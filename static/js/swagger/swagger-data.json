{
    "openapi": "3.0.2",
    "info": {
        "description": "API access to your community.",
        "title": "Vanilla API",
        "version": "2.0"
    },
    "paths": {
        "/addons": {
            "get": {
                "parameters": [
                    {
                        "description": "The type of addon.",
                        "in": "query",
                        "name": "type",
                        "schema": {
                            "enum": [
                                "addon",
                                "theme",
                                "locale"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "Filter enabled or disabled addons.\n",
                        "in": "query",
                        "name": "enabled",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "Which theme to show the enabled status for.\n",
                        "in": "query",
                        "name": "themeType",
                        "schema": {
                            "type": "string",
                            "default": "desktop",
                            "enum": [
                                "desktop",
                                "mobile"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Addon"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Addons"
                ],
                "summary": "List addons.",
                "x-addon": "dashboard"
            }
        },
        "/addons/{addonID}": {
            "get": {
                "parameters": [
                    {
                        "description": "The ID of the addon.\n",
                        "in": "path",
                        "name": "addonID",
                        "required": true,
                        "schema": {
                            "minLength": 1,
                            "type": "string"
                        }
                    },
                    {
                        "description": "Which theme to show the enabled status for.\n",
                        "in": "query",
                        "name": "themeType",
                        "schema": {
                            "type": "string",
                            "default": "desktop",
                            "enum": [
                                "desktop",
                                "mobile"
                            ]
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Addon"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Addons"
                ],
                "summary": "Get an addon.",
                "x-addon": "dashboard"
            },
            "patch": {
                "parameters": [
                    {
                        "description": "The ID of the addon.",
                        "in": "path",
                        "name": "addonID",
                        "required": true,
                        "schema": {
                            "minLength": 1,
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Addon"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Addons"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "enabled": {
                                        "description": "Enable or disable the addon.",
                                        "type": "boolean"
                                    },
                                    "themeType": {
                                        "type": "string",
                                        "default": "desktop",
                                        "description": "Which theme type to set.",
                                        "enum": [
                                            "desktop",
                                            "mobile"
                                        ]
                                    }
                                },
                                "required": [
                                    "enabled"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Enable or disable an addon.",
                "x-addon": "dashboard"
            }
        },
        "/analytics/leaderboard": {
            "get": {
                "parameters": [
                    {
                        "description": "The user leaderboard to query.",
                        "in": "query",
                        "name": "board",
                        "required": true,
                        "schema": {
                            "enum": [
                                "top-posters",
                                "top-discussion-starters",
                                "top-question-answerers",
                                "top-best-answerers",
                                "top-viewed-discussions",
                                "top-viewed-qna-discussions",
                                "top-commented-discussions",
                                "top-positive-discussions",
                                "top-negative-discussions",
                                "top-member-by-total-reputation",
                                "top-member-by-reputation"
                            ],
                            "minLength": 1,
                            "type": "string"
                        }
                    },
                    {
                        "description": "The number of rows to return.",
                        "in": "query",
                        "name": "limit",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "default": 10,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "description": "Start of the time frame.",
                        "in": "query",
                        "name": "start",
                        "required": true,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "description": "End of the time frame.",
                        "in": "query",
                        "name": "end",
                        "required": true,
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Leaderboard"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Analytics"
                ],
                "summary": "Retrieve data for a leaderboard.",
                "x-addon": "vanillaanalytics"
            }
        },
        "/analytics/query": {
            "post": {
                "responses": {
                    "201": {
                        "content": {
                            "*/*": {
                                "schema": {
                                    "properties": {
                                        "result": {
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "result"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Analytics"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "collection": {
                                        "description": "Event collection.",
                                        "enum": [
                                            "page",
                                            "point",
                                            "post",
                                            "post_modify",
                                            "qna",
                                            "reaction",
                                            "registration",
                                            "session"
                                        ],
                                        "minLength": 1,
                                        "type": "string"
                                    },
                                    "end": {
                                        "description": "End of the time frame.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "filters": {
                                        "items": {
                                            "properties": {
                                                "op": {
                                                    "type": "string",
                                                    "default": "eq",
                                                    "description": "The comparison operation for the filter.",
                                                    "enum": [
                                                        "eq",
                                                        "ne",
                                                        "gt",
                                                        "gte",
                                                        "lt",
                                                        "lte",
                                                        "in"
                                                    ],
                                                    "minLength": 1
                                                },
                                                "prop": {
                                                    "description": "The property name.",
                                                    "minLength": 1,
                                                    "type": "string"
                                                },
                                                "val": {
                                                    "description": "The target value for comparison."
                                                }
                                            },
                                            "required": [
                                                "prop",
                                                "op",
                                                "val"
                                            ],
                                            "type": "object"
                                        },
                                        "type": "array"
                                    },
                                    "group": {
                                        "description": "An event property to group results.",
                                        "type": "string"
                                    },
                                    "interval": {
                                        "description": "Result interval.",
                                        "enum": [
                                            "hourly",
                                            "daily",
                                            "weekly",
                                            "monthly"
                                        ],
                                        "type": "string"
                                    },
                                    "property": {
                                        "description": "An event property to perform the analysis on. Required for count_unique, maximum, median and sum query types.",
                                        "type": "string"
                                    },
                                    "start": {
                                        "description": "Start of the time frame.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "type": {
                                        "description": "Type of analysis to perform.",
                                        "enum": [
                                            "count",
                                            "count_unique",
                                            "maximum",
                                            "median",
                                            "sum"
                                        ],
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "type",
                                    "collection",
                                    "start",
                                    "end"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Get the result of an analytics query.",
                "x-addon": "vanillaanalytics"
            }
        },
        "/article-revisions/re-render": {
            "patch": {
                "parameters": [
                    {
                        "description": "The article ID.",
                        "in": "path",
                        "name": "id",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "The desired number of revisions to process.",
                        "in": "path",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 1000,
                            "minimum": 1,
                            "maximum": 1000
                        }
                    },
                    {
                        "description": "The number revisions to exclude.",
                        "in": "path",
                        "name": "offset",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReRender"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Article revisions re-render."
                ],
                "summary": "Re-render content in the article revisions table.",
                "x-addon": "knowledge"
            }
        },
        "/article-revisions/{id}": {
            "get": {
                "parameters": [
                    {
                        "description": "<p>The article revision ID.</p>\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ArticleRevision"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Article Revisions"
                ],
                "summary": "Get an article revision.",
                "x-addon": "knowledge"
            }
        },
        "/articles": {
            "get": {
                "parameters": [
                    {
                        "description": "<p>Expand associated records using one or more valid field names. A value of \"all\" will expand all expandable fields.</p>\n",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "items": {
                                "enum": [
                                    "excerpt",
                                    "all"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "in": "query",
                        "name": "knowledgeCategoryID",
                        "required": true,
                        "schema": {
                            "minimum": 1,
                            "type": "integer"
                        }
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "required": true,
                        "schema": {
                            "type": "integer",
                            "default": 30,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "description": "Page number. See [Pagination](https://docs.vanillaforums.com/apiv2/#pagination\">Pagination).\n",
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "integer",
                            "default": 1,
                            "maximum": 100,
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ArticleSimple"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Articles"
                ],
                "summary": "List published articles in a given knowledge category.",
                "x-addon": "knowledge"
            },
            "post": {
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Article"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Articles"
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/ArticlePost"
                },
                "summary": "Create a new article.",
                "x-addon": "knowledge"
            }
        },
        "/articles/by-alias": {
            "get": {
                "parameters": [
                    {
                        "description": "Article alias.",
                        "in": "query",
                        "name": "alias",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Article"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Articles"
                ],
                "summary": "Get an article by its alias.",
                "x-addon": "knowledge"
            }
        },
        "/articles/drafts": {
            "get": {
                "parameters": [
                    {
                        "description": "<p>Unique ID article associated with a draft.</p>\n",
                        "in": "query",
                        "name": "articleID",
                        "schema": {
                            "type": "integer"
                        },
                        "x-filter": {
                            "field": "recordID"
                        }
                    },
                    {
                        "description": "<p>Unique ID of the user who created the article draft.</p>\n",
                        "in": "query",
                        "name": "insertUserID",
                        "schema": {
                            "type": "integer"
                        },
                        "x-filter": {
                            "field": "insertUserID"
                        }
                    },
                    {
                        "description": "<p>Expand associated records using one or more valid field names. A value of \"all\" will expand all expandable fields.</p>\n",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "items": {
                                "enum": [
                                    "insertUser",
                                    "updateUser"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "properties": {
                                            "attributes": {
                                                "description": "A free-form object containing all custom data for this draft.",
                                                "type": "object"
                                            },
                                            "body": {
                                                "description": "Content of article",
                                                "type": "string"
                                            },
                                            "dateInserted": {
                                                "description": "When the draft was created.",
                                                "format": "date-time",
                                                "type": "string"
                                            },
                                            "dateUpdated": {
                                                "description": "When the draft was last updated",
                                                "format": "date-time",
                                                "type": "string"
                                            },
                                            "draftID": {
                                                "description": "The unique ID of the draft.",
                                                "type": "integer"
                                            },
                                            "excerpt": {
                                                "description": "Excerpt of article",
                                                "type": "string"
                                            },
                                            "format": {
                                                "type": "string",
                                                "default": "rich",
                                                "description": "Body content format: rich, text, html.",
                                                "enum": [
                                                    "rich",
                                                    "html",
                                                    "text",
                                                    "markdown"
                                                ]
                                            },
                                            "insertUserID": {
                                                "description": "Unique ID of the user who originally created the draft.",
                                                "type": "integer"
                                            },
                                            "insertUser": {
                                                "$ref": "#/components/schemas/UserFragment"
                                            },
                                            "parentRecordID": {
                                                "description": "The unique ID of the intended parent to this record.",
                                                "nullable": true,
                                                "type": "integer"
                                            },
                                            "recordID": {
                                                "description": "Unique ID of an existing record to associate with this draft.",
                                                "nullable": true,
                                                "type": "integer"
                                            },
                                            "recordType": {
                                                "description": "The type of record associated with this draft.",
                                                "type": "string"
                                            },
                                            "updateUserID": {
                                                "description": "Unique ID of the last user to update the draft.",
                                                "type": "integer"
                                            },
                                            "updateUser": {
                                                "$ref": "#/components/schemas/UserFragment"
                                            }
                                        },
                                        "required": [
                                            "draftID",
                                            "recordType",
                                            "recordID",
                                            "parentRecordID",
                                            "attributes",
                                            "insertUserID",
                                            "dateInserted",
                                            "updateUserID",
                                            "dateUpdated",
                                            "body",
                                            "format",
                                            "excerpt"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Articles"
                ],
                "summary": "List article drafts.",
                "x-addon": "knowledge"
            },
            "post": {
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "attributes": {
                                            "description": "A free-form object containing all custom data for this draft.",
                                            "type": "object"
                                        },
                                        "body": {
                                            "description": "Content of article",
                                            "type": "string"
                                        },
                                        "dateInserted": {
                                            "description": "When the draft was created.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "dateUpdated": {
                                            "description": "When the draft was last updated",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "draftID": {
                                            "description": "The unique ID of the draft.",
                                            "type": "integer"
                                        },
                                        "excerpt": {
                                            "description": "Excerpt of article",
                                            "type": "string"
                                        },
                                        "format": {
                                            "type": "string",
                                            "default": "rich",
                                            "description": "Body content format: rich, text, html.",
                                            "enum": [
                                                "rich",
                                                "html",
                                                "text",
                                                "markdown"
                                            ]
                                        },
                                        "insertUserID": {
                                            "description": "Unique ID of the user who originally created the draft.",
                                            "type": "integer"
                                        },
                                        "parentRecordID": {
                                            "description": "The unique ID of the intended parent to this record.",
                                            "nullable": true,
                                            "type": "integer"
                                        },
                                        "recordID": {
                                            "description": "Unique ID of an existing record to associate with this draft.",
                                            "nullable": true,
                                            "type": "integer"
                                        },
                                        "recordType": {
                                            "description": "The type of record associated with this draft.",
                                            "type": "string"
                                        },
                                        "updateUserID": {
                                            "description": "Unique ID of the last user to update the draft.",
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "draftID",
                                        "recordType",
                                        "recordID",
                                        "parentRecordID",
                                        "attributes",
                                        "insertUserID",
                                        "dateInserted",
                                        "updateUserID",
                                        "dateUpdated",
                                        "body",
                                        "format",
                                        "excerpt"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Articles"
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Body"
                },
                "summary": "Create a new article draft.",
                "x-addon": "knowledge"
            }
        },
        "/articles/drafts/{draftID}": {
            "delete": {
                "parameters": [
                    {
                        "description": "<p>Target article draft ID.</p>\n",
                        "in": "path",
                        "name": "draftID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                },
                "tags": [
                    "Articles"
                ],
                "summary": "Delete an article draft.",
                "x-addon": "knowledge"
            },
            "get": {
                "parameters": [
                    {
                        "description": "<p>Target article draft ID.</p>\n",
                        "in": "path",
                        "name": "draftID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "attributes": {
                                            "description": "A free-form object containing all custom data for this draft.",
                                            "type": "object"
                                        },
                                        "body": {
                                            "description": "Content of article",
                                            "type": "string"
                                        },
                                        "dateInserted": {
                                            "description": "When the draft was created.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "dateUpdated": {
                                            "description": "When the draft was last updated",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "draftID": {
                                            "description": "The unique ID of the draft.",
                                            "type": "integer"
                                        },
                                        "excerpt": {
                                            "description": "Excerpt of article",
                                            "type": "string"
                                        },
                                        "format": {
                                            "type": "string",
                                            "default": "rich",
                                            "description": "Body content format: rich, text, html.",
                                            "enum": [
                                                "rich",
                                                "html",
                                                "text",
                                                "markdown"
                                            ]
                                        },
                                        "insertUserID": {
                                            "description": "Unique ID of the user who originally created the draft.",
                                            "type": "integer"
                                        },
                                        "parentRecordID": {
                                            "description": "The unique ID of the intended parent to this record.",
                                            "nullable": true,
                                            "type": "integer"
                                        },
                                        "recordID": {
                                            "description": "Unique ID of an existing record to associate with this draft.",
                                            "nullable": true,
                                            "type": "integer"
                                        },
                                        "recordType": {
                                            "description": "The type of record associated with this draft.",
                                            "type": "string"
                                        },
                                        "updateUserID": {
                                            "description": "Unique ID of the last user to update the draft.",
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "draftID",
                                        "recordType",
                                        "recordID",
                                        "parentRecordID",
                                        "attributes",
                                        "insertUserID",
                                        "dateInserted",
                                        "updateUserID",
                                        "dateUpdated",
                                        "body",
                                        "format",
                                        "excerpt"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Articles"
                ],
                "summary": "Get a single article draft.",
                "x-addon": "knowledge"
            },
            "patch": {
                "parameters": [
                    {
                        "description": "Target article draft ID.",
                        "in": "path",
                        "name": "draftID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "attributes": {
                                            "description": "A free-form object containing all custom data for this draft.",
                                            "type": "object"
                                        },
                                        "body": {
                                            "description": "Content of article",
                                            "type": "string"
                                        },
                                        "dateInserted": {
                                            "description": "When the draft was created.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "dateUpdated": {
                                            "description": "When the draft was last updated",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "draftID": {
                                            "description": "The unique ID of the draft.",
                                            "type": "integer"
                                        },
                                        "excerpt": {
                                            "description": "Excerpt of article",
                                            "type": "string"
                                        },
                                        "format": {
                                            "type": "string",
                                            "default": "rich",
                                            "description": "Body content format: rich, text, html.",
                                            "enum": [
                                                "rich",
                                                "html",
                                                "text",
                                                "markdown"
                                            ]
                                        },
                                        "insertUserID": {
                                            "description": "Unique ID of the user who originally created the draft.",
                                            "type": "integer"
                                        },
                                        "parentRecordID": {
                                            "description": "The unique ID of the intended parent to this record.",
                                            "nullable": true,
                                            "type": "integer"
                                        },
                                        "recordID": {
                                            "description": "Unique ID of an existing record to associate with this draft.",
                                            "nullable": true,
                                            "type": "integer"
                                        },
                                        "recordType": {
                                            "description": "The type of record associated with this draft.",
                                            "type": "string"
                                        },
                                        "updateUserID": {
                                            "description": "Unique ID of the last user to update the draft.",
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "draftID",
                                        "recordType",
                                        "recordID",
                                        "parentRecordID",
                                        "attributes",
                                        "insertUserID",
                                        "dateInserted",
                                        "updateUserID",
                                        "dateUpdated",
                                        "body",
                                        "format",
                                        "excerpt"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Articles"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "attributes": {
                                        "description": "A free-form object containing all custom data for this draft.",
                                        "type": "object"
                                    },
                                    "body": {
                                        "description": "Content of article",
                                        "type": "string"
                                    },
                                    "format": {
                                        "type": "string",
                                        "default": "rich",
                                        "description": "Body content format: rich, text, html.",
                                        "enum": [
                                            "rich",
                                            "html",
                                            "text",
                                            "markdown"
                                        ]
                                    },
                                    "parentRecordID": {
                                        "description": "The unique ID of the intended parent to this record.",
                                        "nullable": true,
                                        "type": "integer"
                                    },
                                    "recordID": {
                                        "description": "Unique ID of an existing record to associate with this draft.",
                                        "nullable": true,
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "attributes",
                                    "body",
                                    "format"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Update an article draft.",
                "x-addon": "knowledge"
            }
        },
        "/articles/from-discussion": {
            "get": {
                "parameters": [
                    {
                        "description": "Unique identifier for the community discussion.",
                        "in": "query",
                        "name": "discussionID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DiscussionArticle"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Articles"
                ],
                "summary": "Get a community discussion in a format that is easy to consume when creating a new article.",
                "x-addon": "knowledge"
            }
        },
        "/articles/{id}": {
            "get": {
                "parameters": [
                    {
                        "description": "<p>The article ID.</p>\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Article"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Articles"
                ],
                "summary": "Get an article.",
                "x-addon": "knowledge"
            },
            "patch": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Article"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Articles"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ArticlePatch"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Update an existing article.",
                "x-addon": "knowledge"
            }
        },
        "/articles/{id}/aliases": {
            "put": {
                "parameters": [
                    {
                        "description": "The article ID.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/Aliases"
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ArticleSimple"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Articles"
                ],
                "summary": "Put aliases for article.",
                "x-addon": "knowledge"
            },
            "get": {
                "parameters": [
                    {
                        "description": "The article ID.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ArticleAliases"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Articles"
                ],
                "summary": "Get aliases for article.",
                "x-addon": "knowledge"
            }
        },
        "/articles/{id}/edit": {
            "get": {
                "parameters": [
                    {
                        "description": "<p>The article ID.</p>\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "articleID": {
                                            "description": "Unique article ID.",
                                            "type": "integer"
                                        },
                                        "body": {
                                            "description": "Body contents.",
                                            "minLength": 0,
                                            "nullable": true,
                                            "type": "string"
                                        },
                                        "format": {
                                            "description": "Format of the raw body content.",
                                            "enum": [
                                                "text",
                                                "textex",
                                                "markdown",
                                                "wysiwyg",
                                                "html",
                                                "bbcode",
                                                "rich"
                                            ],
                                            "minLength": 1,
                                            "nullable": true,
                                            "type": "string"
                                        },
                                        "knowledgeCategoryID": {
                                            "description": "Category the article belongs in.",
                                            "nullable": true,
                                            "type": "integer"
                                        },
                                        "locale": {
                                            "description": "Locale the article was written in.",
                                            "minLength": 1,
                                            "nullable": true,
                                            "type": "string"
                                        },
                                        "name": {
                                            "description": "Title of the article.",
                                            "minLength": 0,
                                            "nullable": true,
                                            "type": "string"
                                        },
                                        "sort": {
                                            "description": "Manual sort order of the article.",
                                            "nullable": true,
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "articleID",
                                        "knowledgeCategoryID",
                                        "sort",
                                        "name",
                                        "body",
                                        "format",
                                        "locale"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Articles"
                ],
                "summary": "Get an article for editing.",
                "x-addon": "knowledge"
            }
        },
        "/articles/{id}/react": {
            "put": {
                "parameters": [
                    {
                        "description": "The article ID.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/React"
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ArticleSimple"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Articles"
                ],
                "summary": "Put reaction on article.",
                "x-addon": "knowledge"
            }
        },
        "/articles/{id}/revisions": {
            "get": {
                "parameters": [
                    {
                        "description": "<p>The article ID.</p>",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Page number. See [Pagination](https://docs.vanillaforums.com/apiv2/#pagination\">Pagination).",
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "integer",
                            "default": 1,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "description": "Desired number of items per page.",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 10,
                            "maximum": 100,
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "properties": {
                                            "articleID": {
                                                "description": "Associated article ID.",
                                                "type": "integer"
                                            },
                                            "articleRevisionID": {
                                                "description": "Unique article revision ID.",
                                                "type": "integer"
                                            },
                                            "dateInserted": {
                                                "description": "When the article was created.",
                                                "format": "date-time",
                                                "type": "string"
                                            },
                                            "insertUser": {
                                                "$ref": "#/components/schemas/UserFragment"
                                            },
                                            "locale": {
                                                "description": "Locale the article was written in.",
                                                "minLength": 1,
                                                "nullable": true,
                                                "type": "string"
                                            },
                                            "name": {
                                                "description": "Title of the article.",
                                                "minLength": 0,
                                                "nullable": true,
                                                "type": "string"
                                            },
                                            "status": {
                                                "description": "",
                                                "enum": [
                                                    "published"
                                                ],
                                                "minLength": 1,
                                                "nullable": true,
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "articleRevisionID",
                                            "articleID",
                                            "status",
                                            "name",
                                            "locale",
                                            "insertUser",
                                            "dateInserted"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Articles"
                ],
                "summary": "Get revisions from a specific article.",
                "x-addon": "knowledge"
            }
        },
        "/articles/{id}/status": {
            "patch": {
                "parameters": [
                    {
                        "description": "The article ID.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Article"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Articles"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "status": {
                                        "description": "Article status.",
                                        "enum": [
                                            "undeleted",
                                            "deleted",
                                            "published"
                                        ],
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "status"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Set the status of an article.",
                "x-addon": "knowledge"
            }
        },
        "/badges": {
            "get": {
                "parameters": [
                    {
                        "description": "Page number. See [Pagination](https://docs.vanillaforums.com/apiv2/#pagination).\n",
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "integer",
                            "default": 1,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "description": "Desired number of items per page.\n",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 30,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "description": "Expand associated records using one or more valid field names. A value of \"all\" will expand all expandable fields.\n",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "items": {
                                "enum": [
                                    "insertUser",
                                    "updateUser",
                                    "all"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Badge"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Badges"
                ],
                "summary": "List badges.",
                "x-addon": "badges"
            },
            "post": {
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Badge"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Badges"
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/BadgePost"
                },
                "summary": "Create a custom badge.",
                "x-addon": "badges"
            }
        },
        "/badges/requests": {
            "get": {
                "parameters": [
                    {
                        "description": "Filter by badge ID\n",
                        "in": "query",
                        "name": "badgeID",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Filter by user ID\n",
                        "in": "query",
                        "name": "userID",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Page number. See [Pagination](https://docs.vanillaforums.com/apiv2/#pagination).\n",
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "integer",
                            "default": 1,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "description": "Desired number of items per page.\n",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 30,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "description": "Expand associated records using one or more valid field names. A value of \"all\" will expand all expandable fields.\n",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "items": {
                                "enum": [
                                    "user",
                                    "badge",
                                    "insertUser",
                                    "all"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BadgeRequest"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Badges"
                ],
                "summary": "List badge requests.",
                "x-addon": "badges"
            }
        },
        "/badges/users": {
            "get": {
                "parameters": [
                    {
                        "description": "Filter by badge ID\n",
                        "in": "query",
                        "name": "badgeID",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Filter by user ID\n",
                        "in": "query",
                        "name": "userID",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Page number. See [Pagination](https://docs.vanillaforums.com/apiv2/#pagination).\n",
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "integer",
                            "default": 1,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "description": "Desired number of items per page.\n",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 30,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "description": "Expand associated records using one or more valid field names. A value of \"all\" will expand all expandable fields.\n",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "items": {
                                "enum": [
                                    "user",
                                    "badge",
                                    "insertUser",
                                    "all"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/UserBadge"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Badges"
                ],
                "summary": "List all the users that have the badge.",
                "x-addon": "badges"
            }
        },
        "/badges/{id}": {
            "delete": {
                "parameters": [
                    {
                        "description": "The badge ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                },
                "tags": [
                    "Badges"
                ],
                "summary": "Delete a custom badge.",
                "x-addon": "badges"
            },
            "get": {
                "parameters": [
                    {
                        "description": "The badge ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Badge"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Badges"
                ],
                "summary": "Get a badge.",
                "x-addon": "badges"
            },
            "patch": {
                "parameters": [
                    {
                        "description": "The badge ID.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Badge"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Badges"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BadgePost"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Update a badge.",
                "x-addon": "badges"
            }
        },
        "/badges/{id}/edit": {
            "get": {
                "parameters": [
                    {
                        "description": "The badge ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Badge"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Badges"
                ],
                "summary": "Get a badge for editing.",
                "x-addon": "badges"
            }
        },
        "/badges/{id}/requests": {
            "post": {
                "parameters": [
                    {
                        "description": "The badge ID.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BadgeRequest"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Badges"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/BadgeRequestPost"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Request a badge.",
                "x-addon": "badges"
            }
        },
        "/badges/{id}/requests/{userID}": {
            "delete": {
                "parameters": [
                    {
                        "description": "The badge ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "The user ID.\n",
                        "in": "path",
                        "name": "userID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                },
                "tags": [
                    "Badges"
                ],
                "summary": "Delete the badge request of a user.",
                "x-addon": "badges"
            }
        },
        "/badges/{id}/users": {
            "post": {
                "parameters": [
                    {
                        "description": "The badge ID.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserBadge"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Badges"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserBadgePost"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Give a badge to a user.",
                "x-addon": "badges"
            }
        },
        "/badges/{id}/users/{userID}": {
            "delete": {
                "parameters": [
                    {
                        "description": "The badge ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "The user ID.\n",
                        "in": "path",
                        "name": "userID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                },
                "tags": [
                    "Badges"
                ],
                "summary": "Remove a badge from a user.",
                "x-addon": "badges"
            }
        },
        "/categories": {
            "get": {
                "parameters": [
                    {
                        "description": "Parent category ID.\n",
                        "in": "query",
                        "name": "parentCategoryID",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Parent category URL code.\n",
                        "in": "query",
                        "name": "parentCategoryCode",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Only list categories followed by the current user.\n",
                        "in": "query",
                        "name": "followed",
                        "required": true,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "\n\n",
                        "in": "query",
                        "name": "maxDepth",
                        "schema": {
                            "type": "integer",
                            "default": 2
                        }
                    },
                    {
                        "name": "archived",
                        "description": "Filter by archived status of a category. True for archived only. False for no archived categories. Not compatible with followed filter.\n",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        },
                        "allowEmptyValue": true
                    },
                    {
                        "description": "Page number. Works with flat and followed categories. See <a rel=\"nofollow\" href=\"https://docs.vanillaforums.com/apiv2/#pagination\">Pagination</a>\n",
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "integer",
                            "default": 1,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "description": "Desired number of items per page.\n",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 30,
                            "maximum": 100,
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "properties": {
                                            "categoryID": {
                                                "description": "The ID of the category.",
                                                "type": "integer"
                                            },
                                            "children": {
                                                "items": {
                                                    "properties": {
                                                        "categoryID": {
                                                            "description": "The ID of the category.",
                                                            "type": "integer"
                                                        },
                                                        "children": {
                                                            "items": {
                                                                "type": "string"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "countAllComments": {
                                                            "description": "Total of all comments in a category and its children.",
                                                            "type": "integer"
                                                        },
                                                        "countAllDiscussions": {
                                                            "description": "Total of all discussions in a category and its children.",
                                                            "type": "integer"
                                                        },
                                                        "countCategories": {
                                                            "description": "Total number of child categories.",
                                                            "type": "integer"
                                                        },
                                                        "countComments": {
                                                            "description": "Total comments in the category.",
                                                            "type": "integer"
                                                        },
                                                        "countDiscussions": {
                                                            "description": "Total discussions in the category.",
                                                            "type": "integer"
                                                        },
                                                        "customPermissions": {
                                                            "description": "Are custom permissions set for this category?",
                                                            "type": "boolean"
                                                        },
                                                        "depth": {
                                                            "type": "integer"
                                                        },
                                                        "description": {
                                                            "description": "The description of the category.",
                                                            "minLength": 0,
                                                            "nullable": true,
                                                            "type": "string"
                                                        },
                                                        "displayAs": {
                                                            "type": "string",
                                                            "default": "discussions",
                                                            "description": "The display style of the category.",
                                                            "enum": [
                                                                "categories",
                                                                "discussions",
                                                                "flat",
                                                                "heading"
                                                            ],
                                                            "minLength": 1
                                                        },
                                                        "followed": {
                                                            "description": "Is the category being followed by the current user?",
                                                            "type": "boolean"
                                                        },
                                                        "isArchived": {
                                                            "description": "The archived state of this category.",
                                                            "type": "boolean"
                                                        },
                                                        "name": {
                                                            "description": "The name of the category.",
                                                            "minLength": 1,
                                                            "type": "string"
                                                        },
                                                        "parentCategoryID": {
                                                            "description": "Parent category ID.",
                                                            "nullable": true,
                                                            "type": "integer"
                                                        },
                                                        "url": {
                                                            "description": "The URL to the category.",
                                                            "minLength": 1,
                                                            "type": "string"
                                                        },
                                                        "urlcode": {
                                                            "description": "The URL code of the category.",
                                                            "minLength": 1,
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "categoryID",
                                                        "name",
                                                        "description",
                                                        "parentCategoryID",
                                                        "customPermissions",
                                                        "isArchived",
                                                        "urlcode",
                                                        "url",
                                                        "displayAs",
                                                        "countCategories",
                                                        "countDiscussions",
                                                        "countComments",
                                                        "countAllDiscussions",
                                                        "countAllComments",
                                                        "depth",
                                                        "children"
                                                    ],
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            },
                                            "countAllComments": {
                                                "description": "Total of all comments in a category and its children.",
                                                "type": "integer"
                                            },
                                            "countAllDiscussions": {
                                                "description": "Total of all discussions in a category and its children.",
                                                "type": "integer"
                                            },
                                            "countCategories": {
                                                "description": "Total number of child categories.",
                                                "type": "integer"
                                            },
                                            "countComments": {
                                                "description": "Total comments in the category.",
                                                "type": "integer"
                                            },
                                            "countDiscussions": {
                                                "description": "Total discussions in the category.",
                                                "type": "integer"
                                            },
                                            "customPermissions": {
                                                "description": "Are custom permissions set for this category?",
                                                "type": "boolean"
                                            },
                                            "depth": {
                                                "type": "integer"
                                            },
                                            "description": {
                                                "description": "The description of the category.",
                                                "minLength": 0,
                                                "nullable": true,
                                                "type": "string"
                                            },
                                            "displayAs": {
                                                "type": "string",
                                                "default": "discussions",
                                                "description": "The display style of the category.",
                                                "enum": [
                                                    "categories",
                                                    "discussions",
                                                    "flat",
                                                    "heading"
                                                ],
                                                "minLength": 1
                                            },
                                            "followed": {
                                                "description": "Is the category being followed by the current user?",
                                                "type": "boolean"
                                            },
                                            "isArchived": {
                                                "description": "The archived state of this category.",
                                                "type": "boolean"
                                            },
                                            "name": {
                                                "description": "The name of the category.",
                                                "minLength": 1,
                                                "type": "string"
                                            },
                                            "parentCategoryID": {
                                                "description": "Parent category ID.",
                                                "nullable": true,
                                                "type": "integer"
                                            },
                                            "url": {
                                                "description": "The URL to the category.",
                                                "minLength": 1,
                                                "type": "string"
                                            },
                                            "urlcode": {
                                                "description": "The URL code of the category.",
                                                "minLength": 1,
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "categoryID",
                                            "name",
                                            "description",
                                            "parentCategoryID",
                                            "customPermissions",
                                            "isArchived",
                                            "urlcode",
                                            "url",
                                            "displayAs",
                                            "countCategories",
                                            "countDiscussions",
                                            "countComments",
                                            "countAllDiscussions",
                                            "countAllComments",
                                            "depth"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Categories"
                ],
                "summary": "List categories.",
                "x-addon": "vanilla"
            },
            "post": {
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "categoryID": {
                                            "description": "The ID of the category.",
                                            "type": "integer"
                                        },
                                        "countAllComments": {
                                            "description": "Total of all comments in a category and its children.",
                                            "type": "integer"
                                        },
                                        "countAllDiscussions": {
                                            "description": "Total of all discussions in a category and its children.",
                                            "type": "integer"
                                        },
                                        "countCategories": {
                                            "description": "Total number of child categories.",
                                            "type": "integer"
                                        },
                                        "countComments": {
                                            "description": "Total comments in the category.",
                                            "type": "integer"
                                        },
                                        "countDiscussions": {
                                            "description": "Total discussions in the category.",
                                            "type": "integer"
                                        },
                                        "customPermissions": {
                                            "description": "Are custom permissions set for this category?",
                                            "type": "boolean"
                                        },
                                        "description": {
                                            "description": "The description of the category.",
                                            "minLength": 0,
                                            "nullable": true,
                                            "type": "string"
                                        },
                                        "displayAs": {
                                            "type": "string",
                                            "default": "discussions",
                                            "description": "The display style of the category.",
                                            "enum": [
                                                "categories",
                                                "discussions",
                                                "flat",
                                                "heading"
                                            ],
                                            "minLength": 1
                                        },
                                        "followed": {
                                            "description": "Is the category being followed by the current user?",
                                            "type": "boolean"
                                        },
                                        "isArchived": {
                                            "description": "The archived state of this category.",
                                            "type": "boolean"
                                        },
                                        "name": {
                                            "description": "The name of the category.",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "parentCategoryID": {
                                            "description": "Parent category ID.",
                                            "nullable": true,
                                            "type": "integer"
                                        },
                                        "url": {
                                            "description": "The URL to the category.",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "urlcode": {
                                            "description": "The URL code of the category.",
                                            "minLength": 1,
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "categoryID",
                                        "name",
                                        "description",
                                        "parentCategoryID",
                                        "customPermissions",
                                        "isArchived",
                                        "urlcode",
                                        "url",
                                        "displayAs",
                                        "countCategories",
                                        "countDiscussions",
                                        "countComments",
                                        "countAllDiscussions",
                                        "countAllComments"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Categories"
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/CategoryPost"
                },
                "summary": "Add a category.",
                "x-addon": "vanilla"
            }
        },
        "/categories/search": {
            "get": {
                "parameters": [
                    {
                        "description": "Category name filter.\n",
                        "in": "query",
                        "name": "query",
                        "required": true,
                        "schema": {
                            "minLength": 1,
                            "type": "string"
                        }
                    },
                    {
                        "description": "Page number. See [Pagination](https://docs.vanillaforums.com/apiv2/#pagination).\n",
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "integer",
                            "default": 1,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "description": "Desired number of items per page.\n",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 30,
                            "maximum": 200,
                            "minimum": 1
                        }
                    },
                    {
                        "description": "Expand associated records using one or more valid field names (all, parent, breadcrumbs).\nA value of \"all\" will expand all expandable fields.\n",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "oneOf": [
                                {
                                    "type": "array"
                                },
                                {
                                    "type": "boolean"
                                }
                            ],
                            "items": {
                                "enum": [
                                    "breadcrumbs",
                                    "parent",
                                    "all"
                                ],
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "properties": {
                                            "categoryID": {
                                                "description": "The ID of the category.",
                                                "type": "integer"
                                            },
                                            "countAllComments": {
                                                "description": "Total of all comments in a category and its children.",
                                                "type": "integer"
                                            },
                                            "countAllDiscussions": {
                                                "description": "Total of all discussions in a category and its children.",
                                                "type": "integer"
                                            },
                                            "countCategories": {
                                                "description": "Total number of child categories.",
                                                "type": "integer"
                                            },
                                            "countComments": {
                                                "description": "Total comments in the category.",
                                                "type": "integer"
                                            },
                                            "countDiscussions": {
                                                "description": "Total discussions in the category.",
                                                "type": "integer"
                                            },
                                            "customPermissions": {
                                                "description": "Are custom permissions set for this category?",
                                                "type": "boolean"
                                            },
                                            "description": {
                                                "description": "The description of the category.",
                                                "minLength": 0,
                                                "nullable": true,
                                                "type": "string"
                                            },
                                            "displayAs": {
                                                "type": "string",
                                                "default": "discussions",
                                                "description": "The display style of the category.",
                                                "enum": [
                                                    "categories",
                                                    "discussions",
                                                    "flat",
                                                    "heading"
                                                ],
                                                "minLength": 1
                                            },
                                            "followed": {
                                                "description": "Is the category being followed by the current user?",
                                                "type": "boolean"
                                            },
                                            "isArchived": {
                                                "description": "The archived state of this category.",
                                                "type": "boolean"
                                            },
                                            "name": {
                                                "description": "The name of the category.",
                                                "minLength": 1,
                                                "type": "string"
                                            },
                                            "parentCategoryID": {
                                                "description": "Parent category ID.",
                                                "nullable": true,
                                                "type": "integer"
                                            },
                                            "url": {
                                                "description": "The URL to the category.",
                                                "minLength": 1,
                                                "type": "string"
                                            },
                                            "urlcode": {
                                                "description": "The URL code of the category.",
                                                "minLength": 1,
                                                "type": "string"
                                            },
                                            "breadcrumbs": {
                                                "items": {
                                                    "properties": {
                                                        "name": {
                                                            "description": "Breadcrumb element name.",
                                                            "minLength": 1,
                                                            "type": "string"
                                                        },
                                                        "url": {
                                                            "description": "Breadcrumb element url.",
                                                            "minLength": 1,
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "name",
                                                        "url"
                                                    ],
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            }
                                        },
                                        "required": [
                                            "categoryID",
                                            "name",
                                            "description",
                                            "parentCategoryID",
                                            "customPermissions",
                                            "isArchived",
                                            "urlcode",
                                            "url",
                                            "displayAs",
                                            "countCategories",
                                            "countDiscussions",
                                            "countComments",
                                            "countAllDiscussions",
                                            "countAllComments"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Categories"
                ],
                "summary": "Search categories.",
                "x-addon": "vanilla"
            }
        },
        "/categories/{id}": {
            "delete": {
                "parameters": [
                    {
                        "description": "The category ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                },
                "tags": [
                    "Categories"
                ],
                "summary": "Delete a category.",
                "x-addon": "vanilla"
            },
            "get": {
                "parameters": [
                    {
                        "description": "The category ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "categoryID": {
                                            "description": "The ID of the category.",
                                            "type": "integer"
                                        },
                                        "countAllComments": {
                                            "description": "Total of all comments in a category and its children.",
                                            "type": "integer"
                                        },
                                        "countAllDiscussions": {
                                            "description": "Total of all discussions in a category and its children.",
                                            "type": "integer"
                                        },
                                        "countCategories": {
                                            "description": "Total number of child categories.",
                                            "type": "integer"
                                        },
                                        "countComments": {
                                            "description": "Total comments in the category.",
                                            "type": "integer"
                                        },
                                        "countDiscussions": {
                                            "description": "Total discussions in the category.",
                                            "type": "integer"
                                        },
                                        "customPermissions": {
                                            "description": "Are custom permissions set for this category?",
                                            "type": "boolean"
                                        },
                                        "description": {
                                            "description": "The description of the category.",
                                            "minLength": 0,
                                            "nullable": true,
                                            "type": "string"
                                        },
                                        "displayAs": {
                                            "type": "string",
                                            "default": "discussions",
                                            "description": "The display style of the category.",
                                            "enum": [
                                                "categories",
                                                "discussions",
                                                "flat",
                                                "heading"
                                            ],
                                            "minLength": 1
                                        },
                                        "followed": {
                                            "description": "Is the category being followed by the current user?",
                                            "type": "boolean"
                                        },
                                        "isArchived": {
                                            "description": "The archived state of this category.",
                                            "type": "boolean"
                                        },
                                        "name": {
                                            "description": "The name of the category.",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "parentCategoryID": {
                                            "description": "Parent category ID.",
                                            "nullable": true,
                                            "type": "integer"
                                        },
                                        "url": {
                                            "description": "The URL to the category.",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "urlcode": {
                                            "description": "The URL code of the category.",
                                            "minLength": 1,
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "categoryID",
                                        "name",
                                        "description",
                                        "parentCategoryID",
                                        "customPermissions",
                                        "isArchived",
                                        "urlcode",
                                        "url",
                                        "displayAs",
                                        "countCategories",
                                        "countDiscussions",
                                        "countComments",
                                        "countAllDiscussions",
                                        "countAllComments"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Categories"
                ],
                "summary": "Get a category.",
                "x-addon": "vanilla"
            },
            "patch": {
                "parameters": [
                    {
                        "description": "The category ID.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "categoryID": {
                                            "description": "The ID of the category.",
                                            "type": "integer"
                                        },
                                        "countAllComments": {
                                            "description": "Total of all comments in a category and its children.",
                                            "type": "integer"
                                        },
                                        "countAllDiscussions": {
                                            "description": "Total of all discussions in a category and its children.",
                                            "type": "integer"
                                        },
                                        "countCategories": {
                                            "description": "Total number of child categories.",
                                            "type": "integer"
                                        },
                                        "countComments": {
                                            "description": "Total comments in the category.",
                                            "type": "integer"
                                        },
                                        "countDiscussions": {
                                            "description": "Total discussions in the category.",
                                            "type": "integer"
                                        },
                                        "customPermissions": {
                                            "description": "Are custom permissions set for this category?",
                                            "type": "boolean"
                                        },
                                        "description": {
                                            "description": "The description of the category.",
                                            "minLength": 0,
                                            "nullable": true,
                                            "type": "string"
                                        },
                                        "displayAs": {
                                            "type": "string",
                                            "default": "discussions",
                                            "description": "The display style of the category.",
                                            "enum": [
                                                "categories",
                                                "discussions",
                                                "flat",
                                                "heading"
                                            ],
                                            "minLength": 1
                                        },
                                        "followed": {
                                            "description": "Is the category being followed by the current user?",
                                            "type": "boolean"
                                        },
                                        "isArchived": {
                                            "description": "The archived state of this category.",
                                            "type": "boolean"
                                        },
                                        "name": {
                                            "description": "The name of the category.",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "parentCategoryID": {
                                            "description": "Parent category ID.",
                                            "nullable": true,
                                            "type": "integer"
                                        },
                                        "url": {
                                            "description": "The URL to the category.",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "urlcode": {
                                            "description": "The URL code of the category.",
                                            "minLength": 1,
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "categoryID",
                                        "name",
                                        "description",
                                        "parentCategoryID",
                                        "customPermissions",
                                        "isArchived",
                                        "urlcode",
                                        "url",
                                        "displayAs",
                                        "countCategories",
                                        "countDiscussions",
                                        "countComments",
                                        "countAllDiscussions",
                                        "countAllComments"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Categories"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CategoryPost"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Update a category.",
                "x-addon": "vanilla"
            }
        },
        "/categories/{id}/edit": {
            "get": {
                "parameters": [
                    {
                        "description": "The category ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "categoryID": {
                                            "description": "The ID of the category.",
                                            "type": "integer"
                                        },
                                        "description": {
                                            "description": "The description of the category.",
                                            "minLength": 0,
                                            "nullable": true,
                                            "type": "string"
                                        },
                                        "displayAs": {
                                            "type": "string",
                                            "default": "discussions",
                                            "description": "The display style of the category.",
                                            "enum": [
                                                "categories",
                                                "discussions",
                                                "flat",
                                                "heading"
                                            ],
                                            "minLength": 1
                                        },
                                        "name": {
                                            "description": "The name of the category.",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "parentCategoryID": {
                                            "description": "Parent category ID.",
                                            "nullable": true,
                                            "type": "integer"
                                        },
                                        "urlcode": {
                                            "description": "The URL code of the category.",
                                            "minLength": 1,
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "categoryID",
                                        "name",
                                        "parentCategoryID",
                                        "urlcode",
                                        "description",
                                        "displayAs"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Categories"
                ],
                "summary": "Get a category for editing.",
                "x-addon": "vanilla"
            }
        },
        "/categories/{id}/follow": {
            "put": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "followed": {
                                            "description": "The category-follow status for the current user.",
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "followed"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Categories"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "followed": {
                                        "description": "The category-follow status for the current user.",
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "followed"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                },
                "x-addon": "vanilla"
            }
        },
        "/comments": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/components/parameters/DateInserted"
                    },
                    {
                        "$ref": "#/components/parameters/DateUpdated"
                    },
                    {
                        "description": "The discussion ID.\n",
                        "in": "query",
                        "name": "discussionID",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "description": "Desired number of items per page.\n",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": "30",
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "description": "Filter by author.\n",
                        "in": "query",
                        "name": "insertUserID",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Expand associated records using one or more valid field names. A value of \"all\" will expand all expandable fields.\n",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "items": {
                                "enum": [
                                    "insertUser",
                                    "all",
                                    "reactions"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Comment"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Comments"
                ],
                "summary": "List comments.",
                "x-addon": "vanilla"
            },
            "post": {
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Comment"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Comments"
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/CommentPost"
                },
                "summary": "Add a comment.",
                "x-addon": "vanilla"
            }
        },
        "/comments/search": {
            "get": {
                "parameters": [
                    {
                        "description": "The numeric ID of a category.\n",
                        "in": "query",
                        "name": "categoryID",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Search terms.\n",
                        "in": "query",
                        "name": "query",
                        "required": true,
                        "schema": {
                            "minLength": 1,
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "description": "Desired number of items per page.\n",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 30,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "description": "Expand associated records.\n",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Comment"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Comments"
                ],
                "summary": "Search comments.",
                "x-addon": "vanilla"
            }
        },
        "/comments/{id}": {
            "delete": {
                "parameters": [
                    {
                        "description": "The comment ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Expand associated records using one or more valid field names. A value of \"all\" will expand all expandable fields.\n",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "items": {
                                "enum": [
                                    "reactions",
                                    "all"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                },
                "tags": [
                    "Comments"
                ],
                "summary": "Delete a comment.",
                "x-addon": "vanilla"
            },
            "get": {
                "parameters": [
                    {
                        "description": "The comment ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Expand associated records using one or more valid field names. A value of \"all\" will expand all expandable fields.\n",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "items": {
                                "enum": [
                                    "reactions",
                                    "all"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Comment"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Comments"
                ],
                "summary": "Get a comment.",
                "x-addon": "vanilla"
            },
            "patch": {
                "parameters": [
                    {
                        "description": "The comment ID.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Comment"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Comments"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommentPost"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Update a comment.",
                "x-addon": "vanilla"
            }
        },
        "/comments/{id}/answer": {
            "patch": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Comment"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Comments"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/CommentGet"
                            }
                        }
                    },
                    "required": true
                },
                "x-addon": "vanilla"
            }
        },
        "/comments/{id}/edit": {
            "get": {
                "parameters": [
                    {
                        "description": "The comment ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Expand associated records using one or more valid field names. A value of \"all\" will expand all expandable fields.\n",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "items": {
                                "enum": [
                                    "reactions",
                                    "all"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "body": {
                                            "description": "The body of the comment.",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "commentID": {
                                            "description": "The ID of the comment.",
                                            "type": "integer"
                                        },
                                        "discussionID": {
                                            "description": "The ID of the discussion.",
                                            "type": "integer"
                                        },
                                        "format": {
                                            "description": "The input format of the comment.",
                                            "minLength": 1,
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "commentID",
                                        "discussionID",
                                        "body",
                                        "format"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Comments"
                ],
                "summary": "Get a comment for editing.",
                "x-addon": "vanilla"
            }
        },
        "/comments/{id}/quote": {
            "get": {
                "parameters": [
                    {
                        "description": "The comment ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Expand associated records using one or more valid field names. A value of \"all\" will expand all expandable fields.\n",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "items": {
                                "enum": [
                                    "reactions",
                                    "all"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "bodyRaw": {
                                            "description": "The raw body of the comment. This can be an array of rich operations or a string for other formats",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "commentID": {
                                            "description": "The ID of the comment.",
                                            "type": "integer"
                                        },
                                        "dateInserted": {
                                            "description": "When the comment was created.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "dateUpdated": {
                                            "description": "When the comment was last updated.",
                                            "format": "date-time",
                                            "nullable": true,
                                            "type": "string"
                                        },
                                        "format": {
                                            "description": "The original format of the comment",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "insertUser": {
                                            "$ref": "#/components/schemas/UserFragment"
                                        },
                                        "url": {
                                            "description": "The full URL to the comment.",
                                            "minLength": 1,
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "commentID",
                                        "bodyRaw",
                                        "dateInserted",
                                        "dateUpdated",
                                        "insertUser",
                                        "url",
                                        "format"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Comments"
                ],
                "x-addon": "vanilla"
            }
        },
        "/comments/{id}/reactions": {
            "x-addon": "reactions",
            "get": {
                "parameters": [
                    {
                        "description": "The comment ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Expand associated records using one or more valid field names. A value of \"all\" will expand all expandable fields.\n",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "items": {
                                "enum": [
                                    "reactions",
                                    "all"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter to a specific reaction type by using its URL code.\n",
                        "in": "query",
                        "name": "type",
                        "required": true,
                        "schema": {
                            "minLength": 1,
                            "type": "string"
                        },
                        "allowEmptyValue": true
                    },
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "description": "Desired number of items per page.\n",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 30,
                            "maximum": 100,
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "properties": {
                                            "dateInserted": {
                                                "format": "date-time",
                                                "type": "string"
                                            },
                                            "reactionType": {
                                                "properties": {
                                                    "class": {
                                                        "minLength": 1,
                                                        "type": "string"
                                                    },
                                                    "name": {
                                                        "minLength": 1,
                                                        "type": "string"
                                                    },
                                                    "tagID": {
                                                        "type": "integer"
                                                    },
                                                    "urlcode": {
                                                        "minLength": 1,
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "tagID",
                                                    "urlcode",
                                                    "name",
                                                    "class"
                                                ],
                                                "type": "object"
                                            },
                                            "recordID": {
                                                "type": "integer"
                                            },
                                            "recordType": {
                                                "minLength": 1,
                                                "type": "string"
                                            },
                                            "tagID": {
                                                "type": "integer"
                                            },
                                            "user": {
                                                "$ref": "#/components/schemas/UserFragment"
                                            },
                                            "userID": {
                                                "type": "integer"
                                            }
                                        },
                                        "required": [
                                            "recordType",
                                            "recordID",
                                            "tagID",
                                            "userID",
                                            "dateInserted",
                                            "user",
                                            "reactionType"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Comments"
                ],
                "summary": "Get reactions to a comment.",
                "x-addon": "vanilla"
            },
            "post": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "properties": {
                                            "class": {
                                                "minLength": 1,
                                                "type": "string"
                                            },
                                            "count": {
                                                "type": "integer"
                                            },
                                            "name": {
                                                "minLength": 1,
                                                "type": "string"
                                            },
                                            "tagID": {
                                                "type": "integer"
                                            },
                                            "urlcode": {
                                                "minLength": 1,
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "tagID",
                                            "urlcode",
                                            "name",
                                            "class",
                                            "count"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Comments"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "reactionType": {
                                        "description": "URL code of a reaction type.",
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "reactionType"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "React to a comment.",
                "x-addon": "vanilla"
            }
        },
        "/comments/{id}/reactions/{userID}": {
            "x-addon": "reactions",
            "delete": {
                "parameters": [
                    {
                        "description": "The comment ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "The target user ID.\n",
                        "in": "path",
                        "name": "userID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Expand associated records using one or more valid field names. A value of \"all\" will expand all expandable fields.\n",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "items": {
                                "enum": [
                                    "reactions",
                                    "all"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                },
                "tags": [
                    "Comments"
                ],
                "summary": "Remove a user's reaction.",
                "x-addon": "vanilla"
            }
        },
        "/conversations": {
            "get": {
                "parameters": [
                    {
                        "description": "Filter by author.\n",
                        "in": "query",
                        "name": "insertUserID",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Filter by participating user. (Has no effect if insertUserID is used)\n",
                        "in": "query",
                        "name": "participantUserID",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "description": "Desired number of items per page.\n",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 50,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "description": "Expand associated records using one or more valid field names. A value of \"all\" will expand all expandable fields.\n",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "items": {
                                "enum": [
                                    "insertUser",
                                    "lastInsertUser",
                                    "all"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Conversation"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Conversations"
                ],
                "summary": "List user conversations.",
                "x-addon": "conversations"
            },
            "post": {
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Conversation"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Conversations"
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/ConversationPost"
                },
                "summary": "Add a conversation.",
                "x-addon": "conversations"
            }
        },
        "/conversations/{id}": {
            "get": {
                "parameters": [
                    {
                        "description": "The conversation ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Conversation"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Conversations"
                ],
                "summary": "Get a conversation.",
                "x-addon": "conversations"
            }
        },
        "/conversations/{id}/leave": {
            "delete": {
                "parameters": [
                    {
                        "description": "The conversation ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                },
                "tags": [
                    "Conversations"
                ],
                "summary": "Leave a conversation.",
                "x-addon": "conversations"
            }
        },
        "/conversations/{id}/participants": {
            "get": {
                "parameters": [
                    {
                        "description": "The conversation ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Filter by participant status.\n",
                        "in": "query",
                        "name": "status",
                        "schema": {
                            "type": "string",
                            "default": "participating",
                            "enum": [
                                "all",
                                "participating",
                                "deleted"
                            ]
                        }
                    },
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "description": "Desired number of items per page.\n",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 5,
                            "maximum": 100,
                            "minimum": 5
                        }
                    },
                    {
                        "description": "Expand associated records using one or more valid field names. A value of \"all\" will expand all expandable fields.\n",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "items": {
                                "enum": [
                                    "user",
                                    "all"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConversationParticipants"
                                }
                            }
                        },
                        "description": "List of participants."
                    }
                },
                "tags": [
                    "Conversations"
                ],
                "summary": "Get participants of a conversation.",
                "x-addon": "conversations"
            },
            "post": {
                "parameters": [
                    {
                        "description": "The conversation ID.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ConversationParticipants"
                                }
                            }
                        },
                        "description": "List of participants."
                    }
                },
                "tags": [
                    "Conversations"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ConversationPost"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Add participants to a conversation.",
                "x-addon": "conversations"
            }
        },
        "/dashboard/menus": {
            "get": {
                "summary": "List the dashboard menus.",
                "description": "This endpoint returns the entire navigation structure of the dashboard. It has three levels:\n\n1. The first level represents main menu sections.\n2. Each section can be seperated into groups.\n3. Groups contain the actual menu links.\n",
                "tags": [
                    "Dashboard"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "description": "Represents a main menu item.",
                                        "type": "object",
                                        "properties": {
                                            "description": {
                                                "description": "The menu description.",
                                                "minLength": 1,
                                                "type": "string"
                                            },
                                            "groups": {
                                                "items": {
                                                    "properties": {
                                                        "key": {
                                                            "description": "The key of the group.",
                                                            "minLength": 1,
                                                            "type": "string"
                                                        },
                                                        "links": {
                                                            "items": {
                                                                "properties": {
                                                                    "badge": {
                                                                        "description": "Information about a badge to display beside the link.",
                                                                        "properties": {
                                                                            "text": {
                                                                                "description": "Literal text for the badge.",
                                                                                "minLength": 1,
                                                                                "type": "string"
                                                                            },
                                                                            "type": {
                                                                                "description": "The type of badge.",
                                                                                "enum": [
                                                                                    "view",
                                                                                    "text"
                                                                                ],
                                                                                "minLength": 1,
                                                                                "type": "string"
                                                                            },
                                                                            "url": {
                                                                                "description": "The URL of a view.",
                                                                                "type": "string"
                                                                            }
                                                                        },
                                                                        "type": "object"
                                                                    },
                                                                    "key": {
                                                                        "description": "The key of the link.",
                                                                        "minLength": 1,
                                                                        "type": "string"
                                                                    },
                                                                    "name": {
                                                                        "description": "The title of the link.",
                                                                        "minLength": 1,
                                                                        "type": "string"
                                                                    },
                                                                    "react": {
                                                                        "description": "Whether or not the link represents a React component.",
                                                                        "type": "boolean"
                                                                    },
                                                                    "url": {
                                                                        "description": "The URL of the link.",
                                                                        "minLength": 1,
                                                                        "type": "string"
                                                                    }
                                                                },
                                                                "required": [
                                                                    "name",
                                                                    "key",
                                                                    "url",
                                                                    "react"
                                                                ],
                                                                "type": "object"
                                                            },
                                                            "type": "array"
                                                        },
                                                        "name": {
                                                            "description": "The title of the group.",
                                                            "minLength": 1,
                                                            "type": "string"
                                                        }
                                                    },
                                                    "required": [
                                                        "name",
                                                        "key",
                                                        "links"
                                                    ],
                                                    "type": "object"
                                                },
                                                "type": "array"
                                            },
                                            "key": {
                                                "description": "The ID of the menu.",
                                                "minLength": 1,
                                                "type": "string"
                                            },
                                            "name": {
                                                "description": "The title of the menu.",
                                                "minLength": 1,
                                                "type": "string"
                                            },
                                            "url": {
                                                "description": "The URL to the menu if it doesn't have a submenu.",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "name",
                                            "key",
                                            "description",
                                            "groups"
                                        ]
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "x-addon": "dashboard"
            }
        },
        "/discussions": {
            "get": {
                "parameters": [
                    {
                        "description": "Filter by a category.",
                        "in": "query",
                        "name": "categoryID",
                        "schema": {
                            "type": "integer"
                        },
                        "x-filter": {
                            "field": "d.CategoryID"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/DateInserted"
                    },
                    {
                        "$ref": "#/components/parameters/DateUpdated"
                    },
                    {
                        "description": "Filter by discussion type.\n",
                        "in": "query",
                        "name": "type",
                        "schema": {
                            "type": "string"
                        },
                        "x-filter": {
                            "field": "d.Type"
                        }
                    },
                    {
                        "description": "Only fetch discussions from followed categories. Pinned discussions are mixed in.\n",
                        "in": "query",
                        "name": "followed",
                        "required": true,
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "Whether or not to include pinned discussions. If true, only return pinned discussions. Cannot be used with the pinOrder parameter.\n",
                        "in": "query",
                        "name": "pinned",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "If including pinned posts, in what order should they be integrated? When \"first\", discussions pinned to a specific category will only be affected if the discussion's category is passed as the categoryID parameter. Cannot be used with the pinned parameter.\nMust be one of: \"first\", \"mixed\".\n",
                        "in": "query",
                        "name": "pinOrder",
                        "schema": {
                            "type": "string",
                            "default": "first",
                            "enum": [
                                "first",
                                "mixed"
                            ]
                        }
                    },
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "description": "Desired number of items per page.\n",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 30,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "description": "Filter by author.\n",
                        "in": "query",
                        "name": "insertUserID",
                        "schema": {
                            "type": "integer"
                        },
                        "x-filter": {
                            "field": "d.InsertUserID"
                        }
                    },
                    {
                        "description": "Expand associated records using one or more valid field names. A value of \"all\" will expand all expandable fields.\n",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "items": {
                                "enum": [
                                    "category",
                                    "insertUser",
                                    "lastUser",
                                    "lastPost",
                                    "all",
                                    "reactions"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The group the discussion is in.",
                        "in": "query",
                        "name": "groupID",
                        "schema": {
                            "type": "integer"
                        },
                        "allowEmptyValue": true
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Discussion"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Discussions"
                ],
                "summary": "List discussions.",
                "x-addon": "vanilla"
            },
            "post": {
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Discussion"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Discussions"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DiscussionPost"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Add a discussion.",
                "x-addon": "vanilla"
            }
        },
        "/discussions/bookmarked": {
            "get": {
                "parameters": [
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "description": "Desired number of items per page.\n",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 30,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "description": "Expand associated records using one or more valid field names. A value of \"all\" will expand all expandable fields.\n",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "items": {
                                "enum": [
                                    "insertUser",
                                    "lastUser",
                                    "lastPost",
                                    "all"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Discussion"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Discussions"
                ],
                "summary": "Get a list of the current user's bookmarked discussions.",
                "x-addon": "vanilla"
            }
        },
        "/discussions/idea": {
            "x-addon": "ideation",
            "post": {
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Discussion"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Discussions"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DiscussionPost"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Add an idea.",
                "x-addon": "vanilla"
            }
        },
        "/discussions/question": {
            "x-addon": "qna",
            "post": {
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Discussion"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Discussions"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DiscussionPost"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Add a discussion.",
                "x-addon": "vanilla"
            }
        },
        "/discussions/search": {
            "get": {
                "parameters": [
                    {
                        "description": "The numeric ID of a category to limit search results to.\n",
                        "in": "query",
                        "name": "categoryID",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Limit results to those in followed categories. Cannot be used with the categoryID parameter.\n",
                        "in": "query",
                        "name": "followed",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "Search terms.\n",
                        "in": "query",
                        "name": "query",
                        "required": true,
                        "schema": {
                            "minLength": 1,
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "description": "Desired number of items per page.\n",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 30,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "description": "Expand associated records.\n",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Discussion"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Discussions"
                ],
                "summary": "Search discussions.",
                "x-addon": "vanilla"
            }
        },
        "/discussions/{id}": {
            "delete": {
                "parameters": [
                    {
                        "description": "The discussion ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Expand associated records using one or more valid field names. A value of \"all\" will expand all expandable fields.\n",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "items": {
                                "enum": [
                                    "reactions",
                                    "all"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                },
                "tags": [
                    "Discussions"
                ],
                "summary": "Delete a discussion.",
                "x-addon": "vanilla"
            },
            "get": {
                "parameters": [
                    {
                        "description": "The discussion ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Expand associated records using one or more valid field names. A value of \"all\" will expand all expandable fields.\n",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "items": {
                                "enum": [
                                    "reactions",
                                    "all"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Discussion"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Discussions"
                ],
                "summary": "Get a discussion.",
                "x-addon": "vanilla"
            },
            "patch": {
                "parameters": [
                    {
                        "description": "The discussion ID.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Discussion"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Discussions"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DiscussionPost"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Update a discussion.",
                "x-addon": "vanilla"
            }
        },
        "/discussions/{id}/bookmark": {
            "put": {
                "parameters": [
                    {
                        "description": "The discussion ID.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "bookmarked": {
                                            "description": "The current bookmark value.",
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "bookmarked"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Discussions"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "bookmarked": {
                                        "description": "Pass true to bookmark or false to remove bookmark.",
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "bookmarked"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Bookmark a discussion.",
                "x-addon": "vanilla"
            }
        },
        "/discussions/{id}/canonical-url": {
            "put": {
                "parameters": [
                    {
                        "description": "The discussion ID.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Discussion"
                                }
                            }
                        },
                        "description": "Success"
                    },
                    "404": {
                        "description": "Not Found"
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                },
                "tags": [
                    "Discussions"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "canonicalUrl": {
                                        "description": "Canonical url for discussion.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "canonicalUrl"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Set custom canonical url for a discussion.",
                "x-addon": "vanilla"
            },
            "delete": {
                "parameters": [
                    {
                        "description": "The discussion ID.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "404": {
                        "description": "Not Found"
                    }
                },
                "tags": [
                    "Discussions"
                ],
                "summary": "Remove custom canonical url for a discussion.",
                "x-addon": "vanilla"
            }
        },
        "/discussions/{id}/edit": {
            "get": {
                "parameters": [
                    {
                        "description": "The discussion ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Expand associated records using one or more valid field names. A value of \"all\" will expand all expandable fields.\n",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "items": {
                                "enum": [
                                    "reactions",
                                    "all"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/DiscussionGetEdit"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Discussions"
                ],
                "summary": "Get a discussion for editing.",
                "x-addon": "vanilla"
            }
        },
        "/discussions/{id}/idea": {
            "x-addon": "ideation",
            "patch": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "statusID": {
                                            "description": "Idea status ID.",
                                            "type": "integer"
                                        },
                                        "statusNotes": {
                                            "description": "Notes on a status change. Notes will persist until overwritten.",
                                            "minLength": 1,
                                            "nullable": true,
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "statusID",
                                        "statusNotes"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Discussions"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "statusID": {
                                        "description": "Idea status ID.",
                                        "type": "integer"
                                    },
                                    "statusNotes": {
                                        "description": "Notes on a status change. Notes will persist until overwritten.",
                                        "minLength": 1,
                                        "nullable": true,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "statusID",
                                    "statusNotes"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Update idea metadata on a discussion.",
                "x-addon": "vanilla"
            }
        },
        "/discussions/{id}/quote": {
            "get": {
                "parameters": [
                    {
                        "description": "The discussion ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Expand associated records using one or more valid field names. A value of \"all\" will expand all expandable fields.\n",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "items": {
                                "enum": [
                                    "reactions",
                                    "all"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "bodyRaw": {
                                            "description": "The raw body of the discussion. This can be an array of rich operations or a string for other formats",
                                            "minLength": 1,
                                            "type": "string",
                                            "x-todo": "tpye: array"
                                        },
                                        "dateInserted": {
                                            "description": "When the discussion was created.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "dateUpdated": {
                                            "description": "When the discussion was last updated.",
                                            "format": "date-time",
                                            "nullable": true,
                                            "type": "string"
                                        },
                                        "discussionID": {
                                            "description": "The ID of the discussion.",
                                            "type": "integer"
                                        },
                                        "format": {
                                            "description": "The original format of the discussion",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "insertUser": {
                                            "$ref": "#/components/schemas/UserFragment"
                                        },
                                        "name": {
                                            "description": "The title of the discussion",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "url": {
                                            "description": "The full URL to the discussion.",
                                            "minLength": 1,
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "discussionID",
                                        "name",
                                        "bodyRaw",
                                        "dateInserted",
                                        "dateUpdated",
                                        "insertUser",
                                        "url",
                                        "format"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Discussions"
                ],
                "x-addon": "vanilla"
            }
        },
        "/discussions/{id}/reactions": {
            "x-addon": "reactions",
            "get": {
                "parameters": [
                    {
                        "description": "The discussion ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Expand associated records using one or more valid field names. A value of \"all\" will expand all expandable fields.\n",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "items": {
                                "enum": [
                                    "reactions",
                                    "all"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter to a specific reaction type by using its URL code.",
                        "in": "query",
                        "name": "type",
                        "required": true,
                        "schema": {
                            "minLength": 1,
                            "type": "string"
                        },
                        "allowEmptyValue": true
                    },
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "description": "Desired number of items per page.\n",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 30,
                            "maximum": 100,
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "properties": {
                                            "dateInserted": {
                                                "format": "date-time",
                                                "type": "string"
                                            },
                                            "reactionType": {
                                                "properties": {
                                                    "class": {
                                                        "minLength": 1,
                                                        "type": "string"
                                                    },
                                                    "name": {
                                                        "minLength": 1,
                                                        "type": "string"
                                                    },
                                                    "tagID": {
                                                        "type": "integer"
                                                    },
                                                    "urlcode": {
                                                        "minLength": 1,
                                                        "type": "string"
                                                    }
                                                },
                                                "required": [
                                                    "tagID",
                                                    "urlcode",
                                                    "name",
                                                    "class"
                                                ],
                                                "type": "object"
                                            },
                                            "recordID": {
                                                "type": "integer"
                                            },
                                            "recordType": {
                                                "minLength": 1,
                                                "type": "string"
                                            },
                                            "tagID": {
                                                "type": "integer"
                                            },
                                            "user": {
                                                "$ref": "#/components/schemas/UserFragment"
                                            },
                                            "userID": {
                                                "type": "integer"
                                            }
                                        },
                                        "required": [
                                            "recordType",
                                            "recordID",
                                            "tagID",
                                            "userID",
                                            "dateInserted",
                                            "user",
                                            "reactionType"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Discussions"
                ],
                "summary": "Get reactions to a discussion.",
                "x-addon": "vanilla"
            },
            "post": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "properties": {
                                            "class": {
                                                "minLength": 1,
                                                "type": "string"
                                            },
                                            "count": {
                                                "type": "integer"
                                            },
                                            "name": {
                                                "minLength": 1,
                                                "type": "string"
                                            },
                                            "tagID": {
                                                "type": "integer"
                                            },
                                            "urlcode": {
                                                "minLength": 1,
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "tagID",
                                            "urlcode",
                                            "name",
                                            "class",
                                            "count"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Discussions"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "reactionType": {
                                        "description": "URL code of a reaction type.",
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "reactionType"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "React to a discussion.",
                "x-addon": "vanilla"
            }
        },
        "/discussions/{id}/reactions/{userID}": {
            "x-addon": "reactions",
            "delete": {
                "parameters": [
                    {
                        "description": "The discussion ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "The target user ID.\n",
                        "in": "path",
                        "name": "userID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Expand associated records using one or more valid field names. A value of \"all\" will expand all expandable fields.\n",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "items": {
                                "enum": [
                                    "reactions",
                                    "all"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                },
                "tags": [
                    "Discussions"
                ],
                "summary": "Remove a user's reaction.",
                "x-addon": "vanilla"
            }
        },
        "/drafts": {
            "get": {
                "parameters": [
                    {
                        "description": "Filter drafts by record type.\n",
                        "in": "query",
                        "name": "recordType",
                        "schema": {
                            "enum": [
                                "comment",
                                "discussion"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "Filter by the unique ID of the parent for a draft. Used with recordType.\n",
                        "in": "query",
                        "name": "parentRecordID",
                        "schema": {
                            "type": "integer"
                        },
                        "allowEmptyValue": true
                    },
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "description": "Desired number of items per page.\n",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 30,
                            "maximum": 100,
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "properties": {
                                            "attributes": {
                                                "description": "A free-form object containing all custom data for this draft.",
                                                "type": "object"
                                            },
                                            "dateInserted": {
                                                "description": "When the draft was created.",
                                                "format": "date-time",
                                                "type": "string"
                                            },
                                            "dateUpdated": {
                                                "description": "When the draft was updated.",
                                                "format": "date-time",
                                                "nullable": true,
                                                "type": "string"
                                            },
                                            "draftID": {
                                                "description": "The unique ID of the draft.",
                                                "type": "integer"
                                            },
                                            "insertUserID": {
                                                "description": "The unique ID of the user who created this draft.",
                                                "type": "integer"
                                            },
                                            "parentRecordID": {
                                                "description": "The unique ID of the intended parent to this record.",
                                                "nullable": true,
                                                "type": "integer"
                                            },
                                            "recordType": {
                                                "description": "The type of record associated with this draft.",
                                                "enum": [
                                                    "comment",
                                                    "discussion"
                                                ],
                                                "minLength": 1,
                                                "type": "string"
                                            },
                                            "updateUserID": {
                                                "description": "The unique ID of the user who updated this draft.",
                                                "nullable": true,
                                                "type": "integer"
                                            }
                                        },
                                        "required": [
                                            "draftID",
                                            "recordType",
                                            "parentRecordID",
                                            "attributes",
                                            "insertUserID",
                                            "dateInserted",
                                            "updateUserID",
                                            "dateUpdated"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Drafts"
                ],
                "summary": "List drafts created by the current user.",
                "x-addon": "dashboard"
            },
            "post": {
                "summary": "Create a draft.",
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "attributes": {
                                            "description": "A free-form object containing all custom data for this draft.\n",
                                            "type": "object"
                                        },
                                        "dateInserted": {
                                            "description": "When the draft was created.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "dateUpdated": {
                                            "description": "When the draft was updated.",
                                            "format": "date-time",
                                            "nullable": true,
                                            "type": "string"
                                        },
                                        "draftID": {
                                            "description": "The unique ID of the draft.",
                                            "type": "integer"
                                        },
                                        "insertUserID": {
                                            "description": "The unique ID of the user who created this draft.",
                                            "type": "integer"
                                        },
                                        "parentRecordID": {
                                            "description": "The unique ID of the intended parent to this record.",
                                            "nullable": true,
                                            "type": "integer"
                                        },
                                        "recordType": {
                                            "description": "The type of record associated with this draft.",
                                            "enum": [
                                                "comment",
                                                "discussion"
                                            ],
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "updateUserID": {
                                            "description": "The unique ID of the user who updated this draft.",
                                            "nullable": true,
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "draftID",
                                        "recordType",
                                        "parentRecordID",
                                        "attributes",
                                        "insertUserID",
                                        "dateInserted",
                                        "updateUserID",
                                        "dateUpdated"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Drafts"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DraftPost"
                            }
                        }
                    },
                    "required": true
                },
                "x-addon": "dashboard"
            }
        },
        "/drafts/{id}": {
            "delete": {
                "parameters": [
                    {
                        "description": "The draft ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                },
                "tags": [
                    "Drafts"
                ],
                "summary": "Delete a draft.",
                "x-addon": "dashboard"
            },
            "get": {
                "parameters": [
                    {
                        "description": "The draft ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "attributes": {
                                            "description": "A free-form object containing all custom data for this draft.\n",
                                            "type": "object"
                                        },
                                        "dateInserted": {
                                            "description": "When the draft was created.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "dateUpdated": {
                                            "description": "When the draft was updated.",
                                            "format": "date-time",
                                            "nullable": true,
                                            "type": "string"
                                        },
                                        "draftID": {
                                            "description": "The unique ID of the draft.",
                                            "type": "integer"
                                        },
                                        "insertUserID": {
                                            "description": "The unique ID of the user who created this draft.",
                                            "type": "integer"
                                        },
                                        "parentRecordID": {
                                            "description": "The unique ID of the intended parent to this record.",
                                            "nullable": true,
                                            "type": "integer"
                                        },
                                        "recordType": {
                                            "description": "The type of record associated with this draft.",
                                            "enum": [
                                                "comment",
                                                "discussion"
                                            ],
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "updateUserID": {
                                            "description": "The unique ID of the user who updated this draft.",
                                            "nullable": true,
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "draftID",
                                        "recordType",
                                        "parentRecordID",
                                        "attributes",
                                        "insertUserID",
                                        "dateInserted",
                                        "updateUserID",
                                        "dateUpdated"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Drafts"
                ],
                "summary": "Get a draft.",
                "x-addon": "dashboard"
            },
            "patch": {
                "parameters": [
                    {
                        "description": "The draft ID.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "attributes": {
                                            "description": "A free-form object containing all custom data for this draft.\n",
                                            "type": "object"
                                        },
                                        "draftID": {
                                            "description": "The unique ID of the draft.",
                                            "type": "integer"
                                        },
                                        "parentRecordID": {
                                            "description": "The unique ID of the intended parent to this record.",
                                            "nullable": true,
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "draftID",
                                        "parentRecordID",
                                        "attributes"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Drafts"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/DraftPost"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Update a draft.",
                "x-addon": "dashboard"
            }
        },
        "/drafts/{id}/edit": {
            "get": {
                "parameters": [
                    {
                        "description": "The draft ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "attributes": {
                                            "description": "A free-form object containing all custom data for this draft.\n",
                                            "type": "object"
                                        },
                                        "draftID": {
                                            "description": "The unique ID of the draft.",
                                            "type": "integer"
                                        },
                                        "parentRecordID": {
                                            "description": "The unique ID of the intended parent to this record.",
                                            "nullable": true,
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "draftID",
                                        "parentRecordID",
                                        "attributes"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Drafts"
                ],
                "summary": "Get a draft for editing.",
                "x-addon": "dashboard"
            }
        },
        "/events": {
            "get": {
                "parameters": [
                    {
                        "description": "Filter by group ID.\n",
                        "in": "query",
                        "name": "groupID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Sort the results by the specified field. The default sort order is ascending.Prefixing the field with \"-\" will sort using a descending order.\n",
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "dateInserted",
                                "-dateInserted",
                                "dateStarts",
                                "-dateStarts"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "Page number. See [Pagination](https://docs.vanillaforums.com/apiv2/#pagination).\n",
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "integer",
                            "default": 1,
                            "minimum": 1
                        }
                    },
                    {
                        "description": "Desired number of items per page.\n",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 30,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "description": "Expand associated records.\n",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Event"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Events"
                ],
                "summary": "List events.",
                "x-addon": "groups"
            },
            "post": {
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Event"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Events"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventPost"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Create an event.",
                "x-addon": "groups"
            }
        },
        "/events/{id}": {
            "delete": {
                "parameters": [
                    {
                        "description": "The event ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                },
                "tags": [
                    "Events"
                ],
                "summary": "Delete an event.",
                "x-addon": "groups"
            },
            "get": {
                "parameters": [
                    {
                        "description": "The event ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Event"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Events"
                ],
                "summary": "Get an event.",
                "x-addon": "groups"
            },
            "patch": {
                "parameters": [
                    {
                        "description": "The event ID.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Event"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Events"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/EventPatch"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Update an event.",
                "x-addon": "groups"
            }
        },
        "/events/{id}/edit": {
            "get": {
                "parameters": [
                    {
                        "description": "The event ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Event"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Events"
                ],
                "summary": "Get an event for editing.",
                "x-addon": "groups"
            }
        },
        "/events/{id}/participants": {
            "get": {
                "parameters": [
                    {
                        "description": "The event ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Filter participant by attending status.\n",
                        "in": "query",
                        "name": "attending",
                        "schema": {
                            "type": "string",
                            "default": "all",
                            "enum": [
                                "yes",
                                "no",
                                "maybe",
                                "answered",
                                "unanswered",
                                "all"
                            ]
                        }
                    },
                    {
                        "description": "Page number. See [Pagination](https://docs.vanillaforums.com/apiv2/#pagination).\n",
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "integer",
                            "default": 1,
                            "minimum": 1
                        }
                    },
                    {
                        "description": "Desired number of items per page.\n",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 30,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "description": "Expand associated records.\n",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Event"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Events"
                ],
                "summary": "Get event's participants.",
                "x-addon": "groups"
            },
            "post": {
                "parameters": [
                    {
                        "description": "The event ID.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Event"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Events"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "attending": {
                                        "description": "Is the participant attending the event.",
                                        "enum": [
                                            "yes",
                                            "no",
                                            "maybe"
                                        ],
                                        "minLength": 1,
                                        "nullable": true,
                                        "type": "string"
                                    },
                                    "userID": {
                                        "description": "The ID of the user that RSVP.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "attending"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "RSVP to an event.",
                "x-addon": "groups"
            }
        },
        "/groups": {
            "get": {
                "parameters": [
                    {
                        "description": "Filter by member userID.",
                        "in": "query",
                        "name": "memberID",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Sort the results by the specified field. The default sort order is ascending.\nPrefixing the field with \"-\" will sort using a descending order.\n",
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "dateInserted",
                                "-dateInserted",
                                "dateLastComment",
                                "-dateLastComment",
                                "countMembers",
                                "-countMembers",
                                "countDiscussions",
                                "-countDiscussions"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "Page number. See [Pagination](https://docs.vanillaforums.com/apiv2/#pagination).\n",
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "integer",
                            "default": 1,
                            "minimum": 1
                        }
                    },
                    {
                        "description": "Desired number of items per page.",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 30,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "description": "Expand associated records.",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Group"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Groups"
                ],
                "summary": "List groups.",
                "x-addon": "groups"
            },
            "post": {
                "summary": "Create a group.",
                "tags": [
                    "Groups"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GroupPost"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Group"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "x-addon": "groups"
            }
        },
        "/groups/search": {
            "get": {
                "parameters": [
                    {
                        "description": "The search query.\n",
                        "in": "query",
                        "name": "query",
                        "required": true,
                        "schema": {
                            "minLength": 1,
                            "type": "string"
                        }
                    },
                    {
                        "description": "Sort the results by the specified field. The default sort order is ascending.Prefixing the field with \"-\" will sort using a descending order.\n",
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "dateInserted",
                                "-dateInserted",
                                "dateLastComment",
                                "-dateLastComment",
                                "countMembers",
                                "-countMembers",
                                "countDiscussions",
                                "-countDiscussions"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "Page number. See [Pagination](https://docs.vanillaforums.com/apiv2/#pagination).\n",
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "integer",
                            "default": 1,
                            "minimum": 1
                        }
                    },
                    {
                        "description": "Desired number of items per page.\n",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 24,
                            "maximum": 24,
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Group"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Groups"
                ],
                "summary": "Search for a group",
                "x-addon": "groups"
            }
        },
        "/groups/{id}": {
            "delete": {
                "parameters": [
                    {
                        "description": "The group ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                },
                "tags": [
                    "Groups"
                ],
                "summary": "Delete a group.",
                "x-addon": "groups"
            },
            "get": {
                "parameters": [
                    {
                        "description": "The group ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Group"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Groups"
                ],
                "summary": "Get a group.",
                "x-addon": "groups"
            },
            "patch": {
                "summary": "Update a group.",
                "tags": [
                    "Groups"
                ],
                "parameters": [
                    {
                        "description": "The group ID.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GroupPatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Group"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "x-addon": "groups"
            }
        },
        "/groups/{id}/applicants": {
            "get": {
                "parameters": [
                    {
                        "description": "The group ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Page number. See [Pagination](https://docs.vanillaforums.com/apiv2/#pagination).\n",
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "integer",
                            "default": 1,
                            "minimum": 1
                        }
                    },
                    {
                        "description": "Desired number of items per page.\n",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 30,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "description": "Expand associated records.\n",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/GroupApplicant"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Groups"
                ],
                "summary": "List applicants to a group.",
                "x-addon": "groups"
            },
            "post": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupApplicant"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Groups"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "reason": {
                                        "description": "The reason why the user wants to apply to this group.",
                                        "maxLength": 200,
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "reason"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Apply to a private group.",
                "x-addon": "groups"
            }
        },
        "/groups/{id}/applicants/{userID}": {
            "patch": {
                "parameters": [
                    {
                        "description": "The group ID.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "The group member user ID.",
                        "in": "path",
                        "name": "userID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupApplicant"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Groups"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "status": {
                                        "description": "The status of the applicant.",
                                        "enum": [
                                            "approved",
                                            "denied"
                                        ],
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "status"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Approve or deny a group applicant.",
                "x-addon": "groups"
            }
        },
        "/groups/{id}/apply": {
            "post": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupApplicant"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Groups"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "reason": {
                                        "description": "The reason why the user wants to apply to this group.",
                                        "maxLength": 200,
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "reason"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Apply to a private group.",
                "x-addon": "groups"
            }
        },
        "/groups/{id}/edit": {
            "get": {
                "parameters": [
                    {
                        "description": "The group ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Group"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Groups"
                ],
                "summary": "Get a group for editing.",
                "x-addon": "groups"
            }
        },
        "/groups/{id}/invites": {
            "get": {
                "parameters": [
                    {
                        "description": "The group ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Page number. See [Pagination](https://docs.vanillaforums.com/apiv2/#pagination).\n",
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "integer",
                            "default": 1,
                            "minimum": 1
                        }
                    },
                    {
                        "description": "Desired number of items per page.\n",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 30,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "description": "Expand associated records.\n",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/GroupInvite"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Groups"
                ],
                "summary": "List the invites for a group.",
                "x-addon": "groups"
            },
            "post": {
                "parameters": [
                    {
                        "description": "The group ID.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupInvite"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Groups"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "userID": {
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "userID"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Invite a user to a group.",
                "x-addon": "groups"
            }
        },
        "/groups/{id}/invites/{userID}": {
            "delete": {
                "parameters": [
                    {
                        "description": "The group ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "The group member user ID.\n",
                        "in": "path",
                        "name": "userID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                },
                "tags": [
                    "Groups"
                ],
                "summary": "Delete an invite to a user from a group.",
                "x-addon": "groups"
            }
        },
        "/groups/{id}/join": {
            "post": {
                "parameters": [
                    {
                        "description": "The group ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupMember"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Groups"
                ],
                "summary": "Join a public group or a group that you have been invited to.",
                "x-addon": "groups"
            }
        },
        "/groups/{id}/leave": {
            "post": {
                "parameters": [
                    {
                        "description": "The group ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                },
                "tags": [
                    "Groups"
                ],
                "summary": "Leave a group.",
                "x-addon": "groups"
            }
        },
        "/groups/{id}/members": {
            "get": {
                "parameters": [
                    {
                        "description": "The group ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Page number. See [Pagination](https://docs.vanillaforums.com/apiv2/#pagination).\n",
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "integer",
                            "default": 1,
                            "minimum": 1
                        }
                    },
                    {
                        "description": "Desired number of items per page.\n",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 30,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "description": "Expand associated records.\n",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/GroupMember"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Groups"
                ],
                "summary": "List members of a group.",
                "x-addon": "groups"
            },
            "post": {
                "parameters": [
                    {
                        "description": "The group ID.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupMember"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Groups"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "role": {
                                        "type": "string",
                                        "default": "member",
                                        "description": "The role of the user for that group.",
                                        "enum": [
                                            "leader",
                                            "member"
                                        ]
                                    },
                                    "userID": {
                                        "description": "The ID of the user.",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "userID"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Add a user to a group.",
                "x-addon": "groups"
            }
        },
        "/groups/{id}/members/{userID}": {
            "delete": {
                "parameters": [
                    {
                        "description": "The group ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "The group member user ID.\n",
                        "in": "path",
                        "name": "userID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                },
                "tags": [
                    "Groups"
                ],
                "summary": "Remove a user from a group or leave a group.",
                "x-addon": "groups"
            },
            "patch": {
                "parameters": [
                    {
                        "description": "The group ID.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "The group member user ID.",
                        "in": "path",
                        "name": "userID",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupMember"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Groups"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "role": {
                                        "description": "The role of the user for that group.",
                                        "enum": [
                                            "leader",
                                            "member"
                                        ],
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "role"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Change a user's role within a group.",
                "x-addon": "groups"
            }
        },
        "/knowledge-bases": {
            "get": {
                "parameters": [
                    {
                        "description": "Knowledge base status.",
                        "in": "query",
                        "name": "status",
                        "required": false,
                        "schema": {
                            "default": "published",
                            "enum": [
                                "deleted",
                                "published"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "properties": {
                                            "countArticles": {
                                                "description": "Total articles in the knowledge base.",
                                                "type": "integer"
                                            },
                                            "countCategories": {
                                                "description": "Total categories in the knowledge base.",
                                                "type": "integer"
                                            },
                                            "dateInserted": {
                                                "description": "When the knowledge base was created.",
                                                "format": "date-time",
                                                "type": "string"
                                            },
                                            "dateUpdated": {
                                                "description": "When the knowledge base was last updated.",
                                                "format": "date-time",
                                                "type": "string"
                                            },
                                            "description": {
                                                "description": "Description for the knowledge base.",
                                                "maxLength": 255,
                                                "type": "string"
                                            },
                                            "icon": {
                                                "description": "Full URL to the icon of knowledge base.",
                                                "type": "string"
                                            },
                                            "insertUserID": {
                                                "description": "Unique ID of the user who originally created the knowledge base.",
                                                "type": "integer"
                                            },
                                            "knowledgeBaseID": {
                                                "description": "Unique knowledge base ID.",
                                                "type": "integer"
                                            },
                                            "name": {
                                                "description": "Name for the knowledge base.",
                                                "maxLength": 255,
                                                "type": "string"
                                            },
                                            "rootCategoryID": {
                                                "description": "Root knowledge category ID of knowledge base.",
                                                "type": "integer"
                                            },
                                            "sortArticles": {
                                                "description": "Sort order for articles of the knowledge base.",
                                                "enum": [
                                                    "manual",
                                                    "name",
                                                    "dateInserted",
                                                    "dateInsertedDesc"
                                                ],
                                                "nullable": true,
                                                "type": "string"
                                            },
                                            "sourceLocale": {
                                                "description": "sourceLocale of knowledge base.",
                                                "type": "string"
                                            },
                                            "updateUserID": {
                                                "description": "Unique ID of the last user to update the knowledge base.",
                                                "type": "integer"
                                            },
                                            "urlCode": {
                                                "description": "Full URL to the knowledge base.",
                                                "type": "string"
                                            },
                                            "viewType": {
                                                "type": "string",
                                                "default": "guide",
                                                "description": "Sort order for articles of the knowledge base.",
                                                "enum": [
                                                    "guide",
                                                    "help"
                                                ],
                                                "nullable": true
                                            }
                                        },
                                        "required": [
                                            "knowledgeBaseID",
                                            "name",
                                            "description",
                                            "sortArticles",
                                            "insertUserID",
                                            "dateInserted",
                                            "updateUserID",
                                            "dateUpdated",
                                            "countArticles",
                                            "countCategories",
                                            "urlCode",
                                            "icon",
                                            "sourceLocale",
                                            "viewType",
                                            "rootCategoryID"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Knowledge Bases"
                ],
                "summary": "List knowledge bases.",
                "x-addon": "knowledge"
            },
            "post": {
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "countArticles": {
                                            "description": "Total articles in the knowledge base.",
                                            "type": "integer"
                                        },
                                        "countCategories": {
                                            "description": "Total categories in the knowledge base.",
                                            "type": "integer"
                                        },
                                        "dateInserted": {
                                            "description": "When the knowledge base was created.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "dateUpdated": {
                                            "description": "When the knowledge base was last updated.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "description": {
                                            "description": "Description for the knowledge base.",
                                            "maxLength": 255,
                                            "type": "string"
                                        },
                                        "icon": {
                                            "description": "Full URL to the icon of knowledge base.",
                                            "type": "string"
                                        },
                                        "insertUserID": {
                                            "description": "Unique ID of the user who originally created the knowledge base.",
                                            "type": "integer"
                                        },
                                        "knowledgeBaseID": {
                                            "description": "Unique knowledge base ID.",
                                            "type": "integer"
                                        },
                                        "name": {
                                            "description": "Name for the knowledge base.",
                                            "maxLength": 255,
                                            "type": "string"
                                        },
                                        "rootCategoryID": {
                                            "description": "Root knowledge category ID of knowledge base.",
                                            "type": "integer"
                                        },
                                        "sortArticles": {
                                            "description": "Sort order for articles of the knowledge base.",
                                            "enum": [
                                                "manual",
                                                "name",
                                                "dateInserted",
                                                "dateInsertedDesc"
                                            ],
                                            "nullable": true,
                                            "type": "string"
                                        },
                                        "sourceLocale": {
                                            "description": "sourceLocale of knowledge base.",
                                            "type": "string"
                                        },
                                        "updateUserID": {
                                            "description": "Unique ID of the last user to update the knowledge base.",
                                            "type": "integer"
                                        },
                                        "urlCode": {
                                            "description": "Full URL to the knowledge base.",
                                            "type": "string"
                                        },
                                        "viewType": {
                                            "type": "string",
                                            "default": "guide",
                                            "description": "Sort order for articles of the knowledge base.",
                                            "enum": [
                                                "guide",
                                                "help"
                                            ],
                                            "nullable": true
                                        }
                                    },
                                    "required": [
                                        "knowledgeBaseID",
                                        "name",
                                        "description",
                                        "sortArticles",
                                        "insertUserID",
                                        "dateInserted",
                                        "updateUserID",
                                        "dateUpdated",
                                        "countArticles",
                                        "countCategories",
                                        "urlCode",
                                        "icon",
                                        "sourceLocale",
                                        "viewType",
                                        "rootCategoryID"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Knowledge Bases"
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/KnowledgeBasePost"
                },
                "summary": "Create a new knowledge base.",
                "x-addon": "knowledge"
            }
        },
        "/knowledge-bases/{id}": {
            "delete": {
                "parameters": [
                    {
                        "description": "<p>Knowledge base ID.</p>\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                },
                "tags": [
                    "Knowledge Bases"
                ],
                "summary": "Delete a knowledge base.",
                "x-addon": "knowledge"
            },
            "get": {
                "parameters": [
                    {
                        "description": "<p>Knowledge base ID.</p>\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "countArticles": {
                                            "description": "Total articles in the knowledge base.",
                                            "type": "integer"
                                        },
                                        "countCategories": {
                                            "description": "Total categories in the knowledge base.",
                                            "type": "integer"
                                        },
                                        "dateInserted": {
                                            "description": "When the knowledge base was created.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "dateUpdated": {
                                            "description": "When the knowledge base was last updated.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "description": {
                                            "description": "Description for the knowledge base.",
                                            "maxLength": 255,
                                            "type": "string"
                                        },
                                        "icon": {
                                            "description": "Full URL to the icon of knowledge base.",
                                            "type": "string"
                                        },
                                        "insertUserID": {
                                            "description": "Unique ID of the user who originally created the knowledge base.",
                                            "type": "integer"
                                        },
                                        "knowledgeBaseID": {
                                            "description": "Unique knowledge base ID.",
                                            "type": "integer"
                                        },
                                        "name": {
                                            "description": "Name for the knowledge base.",
                                            "maxLength": 255,
                                            "type": "string"
                                        },
                                        "rootCategoryID": {
                                            "description": "Root knowledge category ID of knowledge base.",
                                            "type": "integer"
                                        },
                                        "sortArticles": {
                                            "description": "Sort order for articles of the knowledge base.",
                                            "enum": [
                                                "manual",
                                                "name",
                                                "dateInserted",
                                                "dateInsertedDesc"
                                            ],
                                            "nullable": true,
                                            "type": "string"
                                        },
                                        "sourceLocale": {
                                            "description": "sourceLocale of knowledge base.",
                                            "type": "string"
                                        },
                                        "updateUserID": {
                                            "description": "Unique ID of the last user to update the knowledge base.",
                                            "type": "integer"
                                        },
                                        "urlCode": {
                                            "description": "Full URL to the knowledge base.",
                                            "type": "string"
                                        },
                                        "viewType": {
                                            "type": "string",
                                            "default": "guide",
                                            "description": "Sort order for articles of the knowledge base.",
                                            "enum": [
                                                "guide",
                                                "help"
                                            ],
                                            "nullable": true
                                        }
                                    },
                                    "required": [
                                        "knowledgeBaseID",
                                        "name",
                                        "description",
                                        "sortArticles",
                                        "insertUserID",
                                        "dateInserted",
                                        "updateUserID",
                                        "dateUpdated",
                                        "countArticles",
                                        "countCategories",
                                        "urlCode",
                                        "icon",
                                        "sourceLocale",
                                        "viewType",
                                        "rootCategoryID"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Knowledge Bases"
                ],
                "summary": "Get a single knowledge base.",
                "x-addon": "knowledge"
            },
            "patch": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "countArticles": {
                                            "description": "Total articles in the knowledge base.",
                                            "type": "integer"
                                        },
                                        "countCategories": {
                                            "description": "Total categories in the knowledge base.",
                                            "type": "integer"
                                        },
                                        "dateInserted": {
                                            "description": "When the knowledge base was created.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "dateUpdated": {
                                            "description": "When the knowledge base was last updated.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "description": {
                                            "description": "Description for the knowledge base.",
                                            "maxLength": 255,
                                            "type": "string"
                                        },
                                        "icon": {
                                            "description": "Full URL to the icon of knowledge base.",
                                            "type": "string"
                                        },
                                        "insertUserID": {
                                            "description": "Unique ID of the user who originally created the knowledge base.",
                                            "type": "integer"
                                        },
                                        "knowledgeBaseID": {
                                            "description": "Unique knowledge base ID.",
                                            "type": "integer"
                                        },
                                        "name": {
                                            "description": "Name for the knowledge base.",
                                            "maxLength": 255,
                                            "type": "string"
                                        },
                                        "rootCategoryID": {
                                            "description": "Root knowledge category ID of knowledge base.",
                                            "type": "integer"
                                        },
                                        "sortArticles": {
                                            "description": "Sort order for articles of the knowledge base.",
                                            "enum": [
                                                "manual",
                                                "name",
                                                "dateInserted",
                                                "dateInsertedDesc"
                                            ],
                                            "nullable": true,
                                            "type": "string"
                                        },
                                        "sourceLocale": {
                                            "description": "sourceLocale of knowledge base.",
                                            "type": "string"
                                        },
                                        "updateUserID": {
                                            "description": "Unique ID of the last user to update the knowledge base.",
                                            "type": "integer"
                                        },
                                        "urlCode": {
                                            "description": "Full URL to the knowledge base.",
                                            "type": "string"
                                        },
                                        "viewType": {
                                            "type": "string",
                                            "default": "guide",
                                            "description": "Sort order for articles of the knowledge base.",
                                            "enum": [
                                                "guide",
                                                "help"
                                            ],
                                            "nullable": true
                                        }
                                    },
                                    "required": [
                                        "knowledgeBaseID",
                                        "name",
                                        "description",
                                        "sortArticles",
                                        "insertUserID",
                                        "dateInserted",
                                        "updateUserID",
                                        "dateUpdated",
                                        "countArticles",
                                        "countCategories",
                                        "urlCode",
                                        "icon",
                                        "sourceLocale",
                                        "viewType",
                                        "rootCategoryID"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Knowledge Bases"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/KnowledgeBasePost"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Update an existing knowledge base.",
                "x-addon": "knowledge"
            }
        },
        "/knowledge-bases/{id}/edit": {
            "get": {
                "parameters": [
                    {
                        "description": "Knowledge base ID.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "description": {
                                            "description": "Description for the knowledge base.",
                                            "maxLength": 255,
                                            "type": "string"
                                        },
                                        "icon": {
                                            "description": "Full URL to the icon of knowledge base.",
                                            "type": "string"
                                        },
                                        "knowledgeBaseID": {
                                            "description": "Unique knowledge base ID.",
                                            "type": "integer"
                                        },
                                        "name": {
                                            "description": "Name for the knowledge base.",
                                            "maxLength": 255,
                                            "type": "string"
                                        },
                                        "sortArticles": {
                                            "description": "Sort order for articles of the knowledge base.",
                                            "enum": [
                                                "manual",
                                                "name",
                                                "dateInserted",
                                                "dateInsertedDesc"
                                            ],
                                            "nullable": true,
                                            "type": "string"
                                        },
                                        "sourceLocale": {
                                            "description": "sourceLocale of knowledge base.",
                                            "type": "string"
                                        },
                                        "viewType": {
                                            "type": "string",
                                            "default": "guide",
                                            "description": "Sort order for articles of the knowledge base.",
                                            "enum": [
                                                "guide",
                                                "help"
                                            ],
                                            "nullable": true
                                        }
                                    },
                                    "required": [
                                        "knowledgeBaseID",
                                        "name",
                                        "description",
                                        "viewType",
                                        "icon",
                                        "sortArticles",
                                        "sourceLocale"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Knowledge Bases"
                ],
                "summary": "Get a knowledge base for editing.",
                "x-addon": "knowledge"
            }
        },
        "/knowledge-bases/{id}/navigation-flat": {
            "get": {
                "parameters": [
                    {
                        "description": "Knowledge base ID.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CategoryNavigationFragment"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Knowledge Bases Navigation"
                ],
                "summary": "Get a navigation-friendly category hierarchy flat mode.",
                "x-addon": "knowledge"
            },
            "patch": {
                "parameters": [
                    {
                        "description": "Knowledge base ID.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CategoryNavigationFragment"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Knowledge Bases Navigation"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "items": {
                                    "properties": {
                                        "parentID": {
                                            "description": "Unique ID of the category this record belongs to.",
                                            "type": "integer"
                                        },
                                        "recordID": {
                                            "description": "Unique ID of the record represented by the navigation item.",
                                            "type": "integer"
                                        },
                                        "recordType": {
                                            "description": "Type of record represented by the navigation item.",
                                            "enum": [
                                                "knowledgeCategory",
                                                "article"
                                            ],
                                            "type": "string"
                                        },
                                        "sort": {
                                            "description": "Sort weight.",
                                            "nullable": true,
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "recordType",
                                        "recordID",
                                        "parentID",
                                        "sort"
                                    ],
                                    "type": "object"
                                },
                                "type": "array"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Update the navigation structure of a knowledge base, using the flat format.",
                "x-addon": "knowledge"
            }
        },
        "/knowledge-bases/{id}/navigation-tree": {
            "get": {
                "parameters": [
                    {
                        "description": "Knowledge base ID.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/navigationTreeSchema"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Knowledge Bases Navigation"
                ],
                "summary": "Get a navigation-friendly category hierarchy tree mode.",
                "x-addon": "knowledge"
            }
        },
        "/knowledge-categories": {
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "properties": {
                                            "articleCount": {
                                                "description": "Total articles in the category.",
                                                "type": "integer"
                                            },
                                            "articleCountRecursive": {
                                                "description": "Aggregate total of all articles in the category and its children.",
                                                "type": "integer"
                                            },
                                            "childCategoryCount": {
                                                "description": "Total child categories.",
                                                "type": "integer"
                                            },
                                            "dateInserted": {
                                                "description": "When the knowledge category was created.",
                                                "format": "date-time",
                                                "type": "string"
                                            },
                                            "dateUpdated": {
                                                "description": "When the knowledge category was last updated.",
                                                "format": "date-time",
                                                "type": "string"
                                            },
                                            "insertUserID": {
                                                "description": "Unique ID of the user who originally created the knowledge category.",
                                                "type": "integer"
                                            },
                                            "knowledgeBaseID": {
                                                "description": "Knowledge base ID for a category.",
                                                "nullable": true,
                                                "type": "integer"
                                            },
                                            "knowledgeCategoryID": {
                                                "description": "Unique knowledge category ID.",
                                                "type": "integer"
                                            },
                                            "lastUpdatedArticleID": {
                                                "description": "Unique ID of the last article to be updated in the category.",
                                                "nullable": true,
                                                "type": "integer"
                                            },
                                            "lastUpdatedUserID": {
                                                "description": "Unique ID of the last user to update an article in the category.",
                                                "nullable": true,
                                                "type": "integer"
                                            },
                                            "name": {
                                                "description": "Name for the category.",
                                                "maxLength": 255,
                                                "type": "string"
                                            },
                                            "parentID": {
                                                "description": "Unique ID of the parent for a category.",
                                                "nullable": true,
                                                "type": "integer"
                                            },
                                            "sort": {
                                                "description": "Sort weight of the category. Used when sorting the parent category's contents.",
                                                "nullable": true,
                                                "type": "integer"
                                            },
                                            "sortChildren": {
                                                "description": "Sort order for contents of the category.",
                                                "enum": [
                                                    "name",
                                                    "dateInserted",
                                                    "dateInsertedDesc",
                                                    "manual"
                                                ],
                                                "nullable": true,
                                                "type": "string"
                                            },
                                            "updateUserID": {
                                                "description": "Unique ID of the last user to update the knowledge category.",
                                                "type": "integer"
                                            },
                                            "url": {
                                                "description": "Full URL to the knowledge category.",
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "knowledgeCategoryID",
                                            "name",
                                            "parentID",
                                            "knowledgeBaseID",
                                            "sortChildren",
                                            "sort",
                                            "insertUserID",
                                            "dateInserted",
                                            "updateUserID",
                                            "dateUpdated",
                                            "lastUpdatedArticleID",
                                            "lastUpdatedUserID",
                                            "articleCount",
                                            "articleCountRecursive",
                                            "childCategoryCount",
                                            "url"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Knowledge Categories"
                ],
                "summary": "List knowledge categories.",
                "x-addon": "knowledge"
            },
            "post": {
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "articleCount": {
                                            "description": "Total articles in the category.",
                                            "type": "integer"
                                        },
                                        "articleCountRecursive": {
                                            "description": "Aggregate total of all articles in the category and its children.",
                                            "type": "integer"
                                        },
                                        "childCategoryCount": {
                                            "description": "Total child categories.",
                                            "type": "integer"
                                        },
                                        "dateInserted": {
                                            "description": "When the knowledge category was created.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "dateUpdated": {
                                            "description": "When the knowledge category was last updated.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "insertUserID": {
                                            "description": "Unique ID of the user who originally created the knowledge category.",
                                            "type": "integer"
                                        },
                                        "knowledgeBaseID": {
                                            "description": "Knowledge base ID for a category.",
                                            "nullable": true,
                                            "type": "integer"
                                        },
                                        "knowledgeCategoryID": {
                                            "description": "Unique knowledge category ID.",
                                            "type": "integer"
                                        },
                                        "lastUpdatedArticleID": {
                                            "description": "Unique ID of the last article to be updated in the category.",
                                            "nullable": true,
                                            "type": "integer"
                                        },
                                        "lastUpdatedUserID": {
                                            "description": "Unique ID of the last user to update an article in the category.",
                                            "nullable": true,
                                            "type": "integer"
                                        },
                                        "name": {
                                            "description": "Name for the category.",
                                            "maxLength": 255,
                                            "type": "string"
                                        },
                                        "parentID": {
                                            "description": "Unique ID of the parent for a category.",
                                            "nullable": true,
                                            "type": "integer"
                                        },
                                        "sort": {
                                            "description": "Sort weight of the category. Used when sorting the parent category's contents.",
                                            "nullable": true,
                                            "type": "integer"
                                        },
                                        "sortChildren": {
                                            "description": "Sort order for contents of the category.",
                                            "enum": [
                                                "name",
                                                "dateInserted",
                                                "dateInsertedDesc",
                                                "manual"
                                            ],
                                            "nullable": true,
                                            "type": "string"
                                        },
                                        "updateUserID": {
                                            "description": "Unique ID of the last user to update the knowledge category.",
                                            "type": "integer"
                                        },
                                        "url": {
                                            "description": "Full URL to the knowledge category.",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "knowledgeCategoryID",
                                        "name",
                                        "parentID",
                                        "knowledgeBaseID",
                                        "sortChildren",
                                        "sort",
                                        "insertUserID",
                                        "dateInserted",
                                        "updateUserID",
                                        "dateUpdated",
                                        "lastUpdatedArticleID",
                                        "lastUpdatedUserID",
                                        "articleCount",
                                        "articleCountRecursive",
                                        "childCategoryCount",
                                        "url"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Knowledge Categories"
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/KnowledgeCategoryPost"
                },
                "summary": "Create a new knowledge category.",
                "x-addon": "knowledge"
            }
        },
        "/knowledge-categories/{id}": {
            "delete": {
                "parameters": [
                    {
                        "description": "<p>Knowledge category ID.</p>\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                },
                "tags": [
                    "Knowledge Categories"
                ],
                "summary": "Delete a knowledge category.",
                "x-addon": "knowledge"
            },
            "get": {
                "parameters": [
                    {
                        "description": "<p>Knowledge category ID.</p>\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "articleCount": {
                                            "description": "Total articles in the category.",
                                            "type": "integer"
                                        },
                                        "articleCountRecursive": {
                                            "description": "Aggregate total of all articles in the category and its children.",
                                            "type": "integer"
                                        },
                                        "childCategoryCount": {
                                            "description": "Total child categories.",
                                            "type": "integer"
                                        },
                                        "dateInserted": {
                                            "description": "When the knowledge category was created.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "dateUpdated": {
                                            "description": "When the knowledge category was last updated.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "insertUserID": {
                                            "description": "Unique ID of the user who originally created the knowledge category.",
                                            "type": "integer"
                                        },
                                        "knowledgeBaseID": {
                                            "description": "Knowledge base ID for a category.",
                                            "nullable": true,
                                            "type": "integer"
                                        },
                                        "knowledgeCategoryID": {
                                            "description": "Unique knowledge category ID.",
                                            "type": "integer"
                                        },
                                        "lastUpdatedArticleID": {
                                            "description": "Unique ID of the last article to be updated in the category.",
                                            "nullable": true,
                                            "type": "integer"
                                        },
                                        "lastUpdatedUserID": {
                                            "description": "Unique ID of the last user to update an article in the category.",
                                            "nullable": true,
                                            "type": "integer"
                                        },
                                        "name": {
                                            "description": "Name for the category.",
                                            "maxLength": 255,
                                            "type": "string"
                                        },
                                        "parentID": {
                                            "description": "Unique ID of the parent for a category.",
                                            "nullable": true,
                                            "type": "integer"
                                        },
                                        "sort": {
                                            "description": "Sort weight of the category. Used when sorting the parent category's contents.",
                                            "nullable": true,
                                            "type": "integer"
                                        },
                                        "sortChildren": {
                                            "description": "Sort order for contents of the category.",
                                            "enum": [
                                                "name",
                                                "dateInserted",
                                                "dateInsertedDesc",
                                                "manual"
                                            ],
                                            "nullable": true,
                                            "type": "string"
                                        },
                                        "updateUserID": {
                                            "description": "Unique ID of the last user to update the knowledge category.",
                                            "type": "integer"
                                        },
                                        "url": {
                                            "description": "Full URL to the knowledge category.",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "knowledgeCategoryID",
                                        "name",
                                        "parentID",
                                        "knowledgeBaseID",
                                        "sortChildren",
                                        "sort",
                                        "insertUserID",
                                        "dateInserted",
                                        "updateUserID",
                                        "dateUpdated",
                                        "lastUpdatedArticleID",
                                        "lastUpdatedUserID",
                                        "articleCount",
                                        "articleCountRecursive",
                                        "childCategoryCount",
                                        "url"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Knowledge Categories"
                ],
                "summary": "Get a single knowledge category.",
                "x-addon": "knowledge"
            },
            "patch": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "articleCount": {
                                            "description": "Total articles in the category.",
                                            "type": "integer"
                                        },
                                        "articleCountRecursive": {
                                            "description": "Aggregate total of all articles in the category and its children.",
                                            "type": "integer"
                                        },
                                        "childCategoryCount": {
                                            "description": "Total child categories.",
                                            "type": "integer"
                                        },
                                        "dateInserted": {
                                            "description": "When the knowledge category was created.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "dateUpdated": {
                                            "description": "When the knowledge category was last updated.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "insertUserID": {
                                            "description": "Unique ID of the user who originally created the knowledge category.",
                                            "type": "integer"
                                        },
                                        "knowledgeBaseID": {
                                            "description": "Knowledge base ID for a category.",
                                            "nullable": true,
                                            "type": "integer"
                                        },
                                        "knowledgeCategoryID": {
                                            "description": "Unique knowledge category ID.",
                                            "type": "integer"
                                        },
                                        "lastUpdatedArticleID": {
                                            "description": "Unique ID of the last article to be updated in the category.",
                                            "nullable": true,
                                            "type": "integer"
                                        },
                                        "lastUpdatedUserID": {
                                            "description": "Unique ID of the last user to update an article in the category.",
                                            "nullable": true,
                                            "type": "integer"
                                        },
                                        "name": {
                                            "description": "Name for the category.",
                                            "maxLength": 255,
                                            "type": "string"
                                        },
                                        "parentID": {
                                            "description": "Unique ID of the parent for a category.",
                                            "nullable": true,
                                            "type": "integer"
                                        },
                                        "sort": {
                                            "description": "Sort weight of the category. Used when sorting the parent category's contents.",
                                            "nullable": true,
                                            "type": "integer"
                                        },
                                        "sortChildren": {
                                            "description": "Sort order for contents of the category.",
                                            "enum": [
                                                "name",
                                                "dateInserted",
                                                "dateInsertedDesc",
                                                "manual"
                                            ],
                                            "nullable": true,
                                            "type": "string"
                                        },
                                        "updateUserID": {
                                            "description": "Unique ID of the last user to update the knowledge category.",
                                            "type": "integer"
                                        },
                                        "url": {
                                            "description": "Full URL to the knowledge category.",
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "knowledgeCategoryID",
                                        "name",
                                        "parentID",
                                        "knowledgeBaseID",
                                        "sortChildren",
                                        "sort",
                                        "insertUserID",
                                        "dateInserted",
                                        "updateUserID",
                                        "dateUpdated",
                                        "lastUpdatedArticleID",
                                        "lastUpdatedUserID",
                                        "articleCount",
                                        "articleCountRecursive",
                                        "childCategoryCount",
                                        "url"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Knowledge Categories"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/KnowledgeCategoryPost"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Update an existing knowledge category.",
                "x-addon": "knowledge"
            }
        },
        "/knowledge-categories/{id}/edit": {
            "get": {
                "parameters": [
                    {
                        "description": "<p>Knowledge category ID.</p>\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "knowledgeCategoryID": {
                                            "description": "Unique knowledge category ID.",
                                            "type": "integer"
                                        },
                                        "name": {
                                            "description": "Name for the category.",
                                            "maxLength": 255,
                                            "type": "string"
                                        },
                                        "parentID": {
                                            "description": "Unique ID of the parent for a category.",
                                            "nullable": true,
                                            "type": "integer"
                                        },
                                        "sort": {
                                            "description": "Sort weight of the category. Used when sorting the parent category's contents.",
                                            "nullable": true,
                                            "type": "integer"
                                        },
                                        "sortChildren": {
                                            "description": "Sort order for contents of the category.",
                                            "enum": [
                                                "name",
                                                "dateInserted",
                                                "dateInsertedDesc",
                                                "manual"
                                            ],
                                            "nullable": true,
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "knowledgeCategoryID",
                                        "name",
                                        "parentID",
                                        "sort",
                                        "sortChildren"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Knowledge Categories"
                ],
                "summary": "Get a knowledge category for editing.",
                "x-addon": "knowledge"
            }
        },
        "/knowledge/search": {
            "get": {
                "parameters": [
                    {
                        "description": "Global search flag. Default: false",
                        "in": "query",
                        "name": "global",
                        "schema": {
                            "type": "boolean",
                            "default": false
                        }
                    },
                    {
                        "description": "Unique ID of a knowledge base. Results will be relative to this value.",
                        "in": "query",
                        "name": "knowledgeBaseID",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Knowledge category ID list to filter results.",
                        "in": "query",
                        "name": "knowledgeCategoryIDs",
                        "schema": {
                            "items": {
                                "type": "integer"
                            },
                            "type": "array"
                        }
                    },
                    {
                        "description": "Community forum category ID list to filter results. Can only be used when: global = true",
                        "in": "query",
                        "name": "categoryIDs",
                        "schema": {
                            "items": {
                                "type": "integer"
                            },
                            "type": "array"
                        }
                    },
                    {
                        "description": "Array of insertUserIDs (authors of article) to filter results.",
                        "in": "query",
                        "name": "insertUserIDs",
                        "schema": {
                            "items": {
                                "type": "integer"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Array of updateUserIDs (last editors of an article) to filter results.",
                        "in": "query",
                        "name": "updateUserIDs",
                        "schema": {
                            "items": {
                                "type": "integer"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Expand data for: user, category.",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "items": {
                                "enum": [
                                    "user",
                                    "category"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        }
                    },
                    {
                        "description": "<p>Filter by date when the article was updated.<br />\nThis filter receive a string that can take two forms.<br />\nA single date that matches '{Operator}{DateTime}' where {Operator} can be =, &lt;, &gt;, &lt;=, &gt;=  and, if omitted, defaults to =.<br />\nA date range that matches '{Opening}{DateTime},{DateTime}{Closing}' where {Opening} can be '[' or '(' and {Closing} can be ']' or ')'. '[]' are inclusive and '()' are exclusive.</p>\n",
                        "in": "query",
                        "name": "dateUpdated",
                        "schema": {
                            "format": "date-filter",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Article statuses array to filter results.",
                        "in": "query",
                        "name": "statuses",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Keywords to search against article name.",
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Keywords to search against article body.",
                        "in": "query",
                        "name": "body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Keywords to search against article name or body.",
                        "in": "query",
                        "name": "all",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Page number. See [Pagination](https://docs.vanillaforums.com/apiv2/#pagination\">Pagination).",
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "integer",
                            "default": 1,
                            "minimum": 1,
                            "maximum": 100
                        }
                    },
                    {
                        "description": "Desired number of items per page.",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 100,
                            "maximum": 100,
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/searchResultSchema"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Knowledge"
                ],
                "summary": "Get a navigation-friendly category hierarchy flat mode.",
                "x-addon": "knowledge"
            }
        },
        "/locales/translations/{locale}": {
            "get": {
                "summary": "Get all of the application's translation strings.",
                "tags": [
                    "Locales"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/LocaleCodeParameter"
                    },
                    {
                        "$ref": "#/components/parameters/CacheBusterParameter"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "description": "A map of string keys to translation strings.",
                                    "type": "object",
                                    "additionalProperties": {
                                        "type": "string"
                                    }
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "x-addon": "dashboard"
            }
        },
        "/locales/translations/{locale}.js": {
            "get": {
                "summary": "Get the application's translations strings as a javascrpt file.",
                "description": "This endpoint is intended for application optimization where translations are requested within a `<script>` tag\nrather than as an external API call.\n",
                "tags": [
                    "Locales"
                ],
                "parameters": [
                    {
                        "$ref": "#/components/parameters/LocaleCodeParameter"
                    },
                    {
                        "$ref": "#/components/parameters/CacheBusterParameter"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/javascript": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "x-addon": "dashboard"
            }
        },
        "/media": {
            "post": {
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "dateInserted": {
                                            "description": "When the media item was created.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "foreignID": {
                                            "description": "The ID of the table.",
                                            "nullable": true,
                                            "type": "integer"
                                        },
                                        "foreignType": {
                                            "description": "Table the media is linked to.",
                                            "minLength": 1,
                                            "nullable": true,
                                            "type": "string"
                                        },
                                        "height": {
                                            "description": "Image height",
                                            "nullable": true,
                                            "type": "integer"
                                        },
                                        "insertUserID": {
                                            "description": "The user that created the media item.",
                                            "type": "integer"
                                        },
                                        "mediaID": {
                                            "description": "The ID of the record.",
                                            "type": "integer"
                                        },
                                        "name": {
                                            "description": "The original filename of the upload.",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "size": {
                                            "description": "File size in bytes",
                                            "type": "integer"
                                        },
                                        "type": {
                                            "description": "MIME type",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "url": {
                                            "description": "The URL of the file.",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "width": {
                                            "description": "Image width",
                                            "nullable": true,
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "mediaID",
                                        "url",
                                        "name",
                                        "type",
                                        "size",
                                        "dateInserted",
                                        "insertUserID",
                                        "foreignType",
                                        "foreignID"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Media"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "file": {
                                        "$ref": "#/components/schemas/UploadedFile"
                                    },
                                    "type": {
                                        "description": "The upload type.",
                                        "enum": [
                                            "image",
                                            "text",
                                            "archive",
                                            "binary"
                                        ],
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "file",
                                    "type"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Add a media item.",
                "x-addon": "dashboard"
            }
        },
        "/media/by-url": {
            "delete": {
                "parameters": [
                    {
                        "description": "Full URL to the item.\n",
                        "in": "query",
                        "name": "url",
                        "required": true,
                        "schema": {
                            "minLength": 1,
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                },
                "tags": [
                    "Media"
                ],
                "summary": "Delete a media item, using its URL.",
                "x-addon": "dashboard"
            },
            "get": {
                "parameters": [
                    {
                        "description": "Full URL to the item.\n",
                        "in": "query",
                        "name": "url",
                        "required": true,
                        "schema": {
                            "minLength": 1,
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "dateInserted": {
                                            "description": "When the media item was created.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "foreignID": {
                                            "description": "The ID of the table.",
                                            "nullable": true,
                                            "type": "integer"
                                        },
                                        "foreignType": {
                                            "description": "Table the media is linked to.",
                                            "minLength": 1,
                                            "nullable": true,
                                            "type": "string"
                                        },
                                        "height": {
                                            "description": "Image height",
                                            "nullable": true,
                                            "type": "integer"
                                        },
                                        "insertUserID": {
                                            "description": "The user that created the media item.",
                                            "type": "integer"
                                        },
                                        "mediaID": {
                                            "description": "The ID of the record.",
                                            "type": "integer"
                                        },
                                        "name": {
                                            "description": "The original filename of the upload.",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "size": {
                                            "description": "File size in bytes",
                                            "type": "integer"
                                        },
                                        "type": {
                                            "description": "MIME type",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "url": {
                                            "description": "The URL of the file.",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "width": {
                                            "description": "Image width",
                                            "nullable": true,
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "mediaID",
                                        "url",
                                        "name",
                                        "type",
                                        "size",
                                        "dateInserted",
                                        "insertUserID",
                                        "foreignType",
                                        "foreignID"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Media"
                ],
                "summary": "Get a media item, using its URL.",
                "x-addon": "dashboard"
            }
        },
        "/media/scrape": {
            "post": {
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "attributes": {
                                            "description": "Any additional attributes required by the the specific embed.",
                                            "nullable": true,
                                            "type": "object"
                                        },
                                        "body": {
                                            "description": "A paragraph summarizing the content, if any. This is not what is what gets rendered to the page.",
                                            "minLength": 1,
                                            "nullable": true,
                                            "type": "string"
                                        },
                                        "height": {
                                            "description": "The height of the image/video/etc. if applicable. This may be the photoUrl, but might exist even when there is no photoUrl in the case of a video without preview image.",
                                            "nullable": true,
                                            "type": "integer"
                                        },
                                        "name": {
                                            "description": "The title of the page/item/etc. if any.",
                                            "minLength": 1,
                                            "nullable": true,
                                            "type": "string"
                                        },
                                        "photoUrl": {
                                            "description": "A photo that goes with the content.",
                                            "minLength": 1,
                                            "nullable": true,
                                            "type": "string"
                                        },
                                        "type": {
                                            "description": "The type of site. This determines how the embed is rendered.",
                                            "enum": [
                                                "quote",
                                                "twitter",
                                                "youtube",
                                                "vimeo",
                                                "instagram",
                                                "soundcloud",
                                                "imgur",
                                                "twitch",
                                                "getty",
                                                "giphy",
                                                "wistia",
                                                "codepen",
                                                "image",
                                                "link"
                                            ],
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "url": {
                                            "description": "The URL that was scraped.",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "width": {
                                            "description": "The width of the image/video/etc. if applicable.",
                                            "nullable": true,
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "url",
                                        "type",
                                        "name",
                                        "body",
                                        "photoUrl",
                                        "height",
                                        "width",
                                        "attributes"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Media"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "force": {
                                        "default": false,
                                        "description": "Force the scrape even if the result is cached.",
                                        "type": "boolean"
                                    },
                                    "url": {
                                        "description": "The URL to scrape.",
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "url"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Scrape information from a URL.",
                "x-addon": "dashboard"
            }
        },
        "/media/{id}": {
            "delete": {
                "parameters": [
                    {
                        "description": "The media ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "dateInserted": {
                                            "description": "When the media item was created.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "foreignID": {
                                            "description": "The ID of the table.",
                                            "nullable": true,
                                            "type": "integer"
                                        },
                                        "foreignType": {
                                            "description": "Table the media is linked to.",
                                            "minLength": 1,
                                            "nullable": true,
                                            "type": "string"
                                        },
                                        "height": {
                                            "description": "Image height",
                                            "nullable": true,
                                            "type": "integer"
                                        },
                                        "insertUserID": {
                                            "description": "The user that created the media item.",
                                            "type": "integer"
                                        },
                                        "mediaID": {
                                            "description": "The ID of the record.",
                                            "type": "integer"
                                        },
                                        "name": {
                                            "description": "The original filename of the upload.",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "size": {
                                            "description": "File size in bytes",
                                            "type": "integer"
                                        },
                                        "type": {
                                            "description": "MIME type",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "url": {
                                            "description": "The URL of the file.",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "width": {
                                            "description": "Image width",
                                            "nullable": true,
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "mediaID",
                                        "url",
                                        "name",
                                        "type",
                                        "size",
                                        "dateInserted",
                                        "insertUserID",
                                        "foreignType",
                                        "foreignID"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Media"
                ],
                "summary": "Delete a media item.",
                "x-addon": "dashboard"
            },
            "get": {
                "parameters": [
                    {
                        "description": "The media ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "dateInserted": {
                                            "description": "When the media item was created.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "foreignID": {
                                            "description": "The ID of the table.",
                                            "nullable": true,
                                            "type": "integer"
                                        },
                                        "foreignType": {
                                            "description": "Table the media is linked to.",
                                            "minLength": 1,
                                            "nullable": true,
                                            "type": "string"
                                        },
                                        "height": {
                                            "description": "Image height",
                                            "nullable": true,
                                            "type": "integer"
                                        },
                                        "insertUserID": {
                                            "description": "The user that created the media item.",
                                            "type": "integer"
                                        },
                                        "mediaID": {
                                            "description": "The ID of the record.",
                                            "type": "integer"
                                        },
                                        "name": {
                                            "description": "The original filename of the upload.",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "size": {
                                            "description": "File size in bytes",
                                            "type": "integer"
                                        },
                                        "type": {
                                            "description": "MIME type",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "url": {
                                            "description": "The URL of the file.",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "width": {
                                            "description": "Image width",
                                            "nullable": true,
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "mediaID",
                                        "url",
                                        "name",
                                        "type",
                                        "size",
                                        "dateInserted",
                                        "insertUserID",
                                        "foreignType",
                                        "foreignID"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Media"
                ],
                "summary": "Get a media item.",
                "x-addon": "dashboard"
            }
        },
        "/media/{id}/attachment": {
            "patch": {
                "parameters": [
                    {
                        "description": "The media ID.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "dateInserted": {
                                            "description": "When the media item was created.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "foreignID": {
                                            "description": "The ID of the table.",
                                            "nullable": true,
                                            "type": "integer"
                                        },
                                        "foreignType": {
                                            "description": "Table the media is linked to.",
                                            "minLength": 1,
                                            "nullable": true,
                                            "type": "string"
                                        },
                                        "height": {
                                            "description": "Image height",
                                            "nullable": true,
                                            "type": "integer"
                                        },
                                        "insertUserID": {
                                            "description": "The user that created the media item.",
                                            "type": "integer"
                                        },
                                        "mediaID": {
                                            "description": "The ID of the record.",
                                            "type": "integer"
                                        },
                                        "name": {
                                            "description": "The original filename of the upload.",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "size": {
                                            "description": "File size in bytes",
                                            "type": "integer"
                                        },
                                        "type": {
                                            "description": "MIME type",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "url": {
                                            "description": "The URL of the file.",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "width": {
                                            "description": "Image width",
                                            "nullable": true,
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "mediaID",
                                        "url",
                                        "name",
                                        "type",
                                        "size",
                                        "dateInserted",
                                        "insertUserID",
                                        "foreignType",
                                        "foreignID"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Media"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MediaItemPatch"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Update a media item's attachment to another record.",
                "x-addon": "dashboard"
            }
        },
        "/messages": {
            "get": {
                "parameters": [
                    {
                        "description": "Filter by conversation.\n",
                        "in": "query",
                        "name": "conversationID",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Filter by author.\n",
                        "in": "query",
                        "name": "insertUserID",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "description": "Desired number of items per page.\n",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 50,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "description": "Expand associated records using one or more valid field names. A value of \"all\" will expand all expandable fields.\n",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "items": {
                                "enum": [
                                    "insertUser",
                                    "all"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Message"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Messages"
                ],
                "summary": "List user messages.",
                "x-addon": "conversations"
            },
            "post": {
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Message"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Messages"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MessagePost"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Add a message.",
                "x-addon": "conversations"
            }
        },
        "/messages/{id}": {
            "get": {
                "parameters": [
                    {
                        "description": "The message ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Message"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Messages"
                ],
                "summary": "Get a message.",
                "x-addon": "conversations"
            }
        },
        "/notifications": {
            "get": {
                "parameters": [
                    {
                        "description": "Desired number of items per page.\n",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 30,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "$ref": "#/components/parameters/Page"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/NotificationSchema"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Notifications"
                ],
                "summary": "List notifications for the current user.",
                "x-addon": "dashboard"
            },
            "patch": {
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                },
                "tags": [
                    "Notifications"
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/NotificationSchema"
                },
                "summary": "Update all notifications.",
                "x-addon": "dashboard"
            }
        },
        "/notifications/{id}": {
            "get": {
                "parameters": [
                    {
                        "description": "The notification ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationSchema"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Notifications"
                ],
                "summary": "Get a single notification.",
                "x-addon": "dashboard"
            },
            "patch": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationSchema"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Notifications"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/NotificationSchema"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Update a notification.",
                "x-addon": "dashboard"
            }
        },
        "/online": {
            "get": {
                "tags": [
                    "Online"
                ],
                "summary": "List all online users.",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "properties": {
                                            "name": {
                                                "description": "Name of the user.",
                                                "minLength": 1,
                                                "type": "string"
                                            },
                                            "photoUrl": {
                                                "description": "URL to the user photo.",
                                                "nullable": true,
                                                "type": "string"
                                            },
                                            "timestamp": {
                                                "format": "date-time",
                                                "type": "string"
                                            },
                                            "userID": {
                                                "description": "ID of the user.",
                                                "type": "integer"
                                            }
                                        },
                                        "required": [
                                            "userID",
                                            "name",
                                            "timestamp"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "x-addon": "online"
            }
        },
        "/online/counts": {
            "get": {
                "summary": "Get a count of users currently online.",
                "tags": [
                    "Online"
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "guests": {
                                            "description": "Number of guests on the site.",
                                            "type": "integer"
                                        },
                                        "total": {
                                            "description": "Total number of all guests and signed-in users.",
                                            "type": "integer"
                                        },
                                        "users": {
                                            "description": "Number of signed-in users on the site.",
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "users",
                                        "guests",
                                        "total"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "x-addon": "online"
            }
        },
        "/polls": {
            "get": {
                "parameters": [
                    {
                        "description": "Filter by discussion.\n",
                        "in": "query",
                        "name": "discussionID",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Page number. See [Pagination](https://docs.vanillaforums.com/apiv2/#pagination).\n",
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "integer",
                            "default": 1,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "description": "Desired number of items per page.\n",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 25,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "description": "Filter by author.\n",
                        "in": "query",
                        "name": "insertUserID",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Expand associated records using one or more valid field names. A value of \"all\" will expand all expandable fields.\n",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "items": {
                                "enum": [
                                    "insertUser",
                                    "updateUser",
                                    "all"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "properties": {
                                            "countOptions": {
                                                "description": "The number of options to choose from.",
                                                "type": "integer"
                                            },
                                            "countVotes": {
                                                "description": "The number of votes.",
                                                "type": "integer"
                                            },
                                            "dateInserted": {
                                                "description": "When the poll was created.",
                                                "format": "date-time",
                                                "type": "string"
                                            },
                                            "dateUpdated": {
                                                "description": "When the poll was updated.",
                                                "format": "date-time",
                                                "nullable": true,
                                                "type": "string"
                                            },
                                            "discussionID": {
                                                "description": "The discussion the poll is displayed in.",
                                                "type": "integer"
                                            },
                                            "insertUser": {
                                                "$ref": "#/components/schemas/UserFragment"
                                            },
                                            "insertUserID": {
                                                "description": "The unique ID of the user who created this poll.",
                                                "type": "integer"
                                            },
                                            "name": {
                                                "description": "The name of the poll.",
                                                "minLength": 1,
                                                "type": "string"
                                            },
                                            "pollID": {
                                                "description": "The unique ID of the poll.",
                                                "type": "integer"
                                            },
                                            "updateUser": {
                                                "$ref": "#/components/schemas/UserFragment"
                                            },
                                            "updateUserID": {
                                                "description": "The unique ID of the user who updated this poll.",
                                                "nullable": true,
                                                "type": "integer"
                                            }
                                        },
                                        "required": [
                                            "pollID",
                                            "name",
                                            "discussionID",
                                            "countOptions",
                                            "countVotes",
                                            "insertUserID",
                                            "dateInserted",
                                            "updateUserID",
                                            "dateUpdated"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Polls"
                ],
                "summary": "List polls.",
                "x-addon": "polls"
            },
            "post": {
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "countOptions": {
                                            "description": "The number of options to choose from.",
                                            "type": "integer"
                                        },
                                        "countVotes": {
                                            "description": "The number of votes.",
                                            "type": "integer"
                                        },
                                        "dateInserted": {
                                            "description": "When the poll was created.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "dateUpdated": {
                                            "description": "When the poll was updated.",
                                            "format": "date-time",
                                            "nullable": true,
                                            "type": "string"
                                        },
                                        "discussionID": {
                                            "description": "The discussion the poll is displayed in.",
                                            "type": "integer"
                                        },
                                        "insertUser": {
                                            "$ref": "#/components/schemas/UserFragment"
                                        },
                                        "insertUserID": {
                                            "description": "The unique ID of the user who created this poll.",
                                            "type": "integer"
                                        },
                                        "name": {
                                            "description": "The name of the poll.",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "pollID": {
                                            "description": "The unique ID of the poll.",
                                            "type": "integer"
                                        },
                                        "updateUser": {
                                            "$ref": "#/components/schemas/UserFragment"
                                        },
                                        "updateUserID": {
                                            "description": "The unique ID of the user who updated this poll.",
                                            "nullable": true,
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "pollID",
                                        "name",
                                        "discussionID",
                                        "countOptions",
                                        "countVotes",
                                        "insertUserID",
                                        "dateInserted",
                                        "updateUserID",
                                        "dateUpdated"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Polls"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PollPost"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Create a poll.",
                "x-addon": "polls"
            }
        },
        "/polls/{id}": {
            "delete": {
                "parameters": [
                    {
                        "description": "The poll ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                },
                "tags": [
                    "Polls"
                ],
                "summary": "Delete a poll.",
                "x-addon": "polls"
            },
            "get": {
                "parameters": [
                    {
                        "description": "The poll ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "countOptions": {
                                            "description": "The number of options to choose from.",
                                            "type": "integer"
                                        },
                                        "countVotes": {
                                            "description": "The number of votes.",
                                            "type": "integer"
                                        },
                                        "dateInserted": {
                                            "description": "When the poll was created.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "dateUpdated": {
                                            "description": "When the poll was updated.",
                                            "format": "date-time",
                                            "nullable": true,
                                            "type": "string"
                                        },
                                        "discussionID": {
                                            "description": "The discussion the poll is displayed in.",
                                            "type": "integer"
                                        },
                                        "insertUser": {
                                            "$ref": "#/components/schemas/UserFragment"
                                        },
                                        "insertUserID": {
                                            "description": "The unique ID of the user who created this poll.",
                                            "type": "integer"
                                        },
                                        "name": {
                                            "description": "The name of the poll.",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "pollID": {
                                            "description": "The unique ID of the poll.",
                                            "type": "integer"
                                        },
                                        "updateUser": {
                                            "$ref": "#/components/schemas/UserFragment"
                                        },
                                        "updateUserID": {
                                            "description": "The unique ID of the user who updated this poll.",
                                            "nullable": true,
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "pollID",
                                        "name",
                                        "discussionID",
                                        "countOptions",
                                        "countVotes",
                                        "insertUserID",
                                        "dateInserted",
                                        "updateUserID",
                                        "dateUpdated"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Polls"
                ],
                "summary": "Get a poll.",
                "x-addon": "polls"
            },
            "patch": {
                "parameters": [
                    {
                        "description": "The poll ID.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "countOptions": {
                                            "description": "The number of options to choose from.",
                                            "type": "integer"
                                        },
                                        "countVotes": {
                                            "description": "The number of votes.",
                                            "type": "integer"
                                        },
                                        "dateInserted": {
                                            "description": "When the poll was created.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "dateUpdated": {
                                            "description": "When the poll was updated.",
                                            "format": "date-time",
                                            "nullable": true,
                                            "type": "string"
                                        },
                                        "discussionID": {
                                            "description": "The discussion the poll is displayed in.",
                                            "type": "integer"
                                        },
                                        "insertUser": {
                                            "$ref": "#/components/schemas/UserFragment"
                                        },
                                        "insertUserID": {
                                            "description": "The unique ID of the user who created this poll.",
                                            "type": "integer"
                                        },
                                        "name": {
                                            "description": "The name of the poll.",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "pollID": {
                                            "description": "The unique ID of the poll.",
                                            "type": "integer"
                                        },
                                        "updateUser": {
                                            "$ref": "#/components/schemas/UserFragment"
                                        },
                                        "updateUserID": {
                                            "description": "The unique ID of the user who updated this poll.",
                                            "nullable": true,
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "pollID",
                                        "name",
                                        "discussionID",
                                        "countOptions",
                                        "countVotes",
                                        "insertUserID",
                                        "dateInserted",
                                        "updateUserID",
                                        "dateUpdated"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Polls"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PollPost"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Update a poll.",
                "x-addon": "polls"
            }
        },
        "/polls/{id}/edit": {
            "get": {
                "parameters": [
                    {
                        "description": "The poll ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PollGetEdit"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Polls"
                ],
                "summary": "Get a poll for editing.",
                "x-addon": "polls"
            }
        },
        "/polls/{id}/options": {
            "get": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Filter by pollOptionID.\n",
                        "in": "query",
                        "name": "pollOptionID",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Expand associated records using one or more valid field names. A value of \"all\" will expand all expandable fields.\n",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "items": {
                                "enum": [
                                    "insertUser",
                                    "updateUser",
                                    "all"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "properties": {
                                            "body": {
                                                "description": "The name of the option.",
                                                "minLength": 1,
                                                "type": "string"
                                            },
                                            "countVotes": {
                                                "description": "The number of votes.",
                                                "type": "integer"
                                            },
                                            "dateInserted": {
                                                "description": "When the poll was created.",
                                                "format": "date-time",
                                                "type": "string"
                                            },
                                            "dateUpdated": {
                                                "description": "When the poll was updated.",
                                                "format": "date-time",
                                                "nullable": true,
                                                "type": "string"
                                            },
                                            "insertUser": {
                                                "$ref": "#/components/schemas/UserFragment"
                                            },
                                            "insertUserID": {
                                                "description": "The unique ID of the user who created this poll.",
                                                "type": "integer"
                                            },
                                            "pollID": {
                                                "description": "The unique ID of the poll.",
                                                "type": "integer"
                                            },
                                            "pollOptionID": {
                                                "description": "The unique ID of the option.",
                                                "type": "integer"
                                            },
                                            "updateUser": {
                                                "$ref": "#/components/schemas/UserFragment"
                                            },
                                            "updateUserID": {
                                                "description": "The unique ID of the user who updated this poll.",
                                                "nullable": true,
                                                "type": "integer"
                                            }
                                        },
                                        "required": [
                                            "pollOptionID",
                                            "pollID",
                                            "body",
                                            "countVotes",
                                            "insertUserID",
                                            "dateInserted",
                                            "updateUserID",
                                            "dateUpdated"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Polls"
                ],
                "summary": "List polls' options.",
                "x-addon": "polls"
            },
            "post": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "body": {
                                            "description": "The name of the option.",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "countVotes": {
                                            "description": "The number of votes.",
                                            "type": "integer"
                                        },
                                        "dateInserted": {
                                            "description": "When the poll was created.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "dateUpdated": {
                                            "description": "When the poll was updated.",
                                            "format": "date-time",
                                            "nullable": true,
                                            "type": "string"
                                        },
                                        "insertUser": {
                                            "$ref": "#/components/schemas/UserFragment"
                                        },
                                        "insertUserID": {
                                            "description": "The unique ID of the user who created this poll.",
                                            "type": "integer"
                                        },
                                        "pollID": {
                                            "description": "The unique ID of the poll.",
                                            "type": "integer"
                                        },
                                        "pollOptionID": {
                                            "description": "The unique ID of the option.",
                                            "type": "integer"
                                        },
                                        "updateUser": {
                                            "$ref": "#/components/schemas/UserFragment"
                                        },
                                        "updateUserID": {
                                            "description": "The unique ID of the user who updated this poll.",
                                            "nullable": true,
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "pollOptionID",
                                        "pollID",
                                        "body",
                                        "countVotes",
                                        "insertUserID",
                                        "dateInserted",
                                        "updateUserID",
                                        "dateUpdated"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Polls"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PollOptionPost"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Create a poll option.",
                "x-addon": "polls"
            }
        },
        "/polls/{id}/options/{pollOptionID}": {
            "delete": {
                "parameters": [
                    {
                        "description": "The poll ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "The poll option ID\n",
                        "in": "path",
                        "name": "pollOptionID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                },
                "tags": [
                    "Polls"
                ],
                "summary": "Delete a poll.",
                "x-addon": "polls"
            },
            "patch": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "The poll option ID",
                        "in": "path",
                        "name": "pollOptionID",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "body": {
                                            "description": "The name of the option.",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "countVotes": {
                                            "description": "The number of votes.",
                                            "type": "integer"
                                        },
                                        "dateInserted": {
                                            "description": "When the poll was created.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "dateUpdated": {
                                            "description": "When the poll was updated.",
                                            "format": "date-time",
                                            "nullable": true,
                                            "type": "string"
                                        },
                                        "insertUser": {
                                            "$ref": "#/components/schemas/UserFragment"
                                        },
                                        "insertUserID": {
                                            "description": "The unique ID of the user who created this poll.",
                                            "type": "integer"
                                        },
                                        "pollID": {
                                            "description": "The unique ID of the poll.",
                                            "type": "integer"
                                        },
                                        "pollOptionID": {
                                            "description": "The unique ID of the option.",
                                            "type": "integer"
                                        },
                                        "updateUser": {
                                            "$ref": "#/components/schemas/UserFragment"
                                        },
                                        "updateUserID": {
                                            "description": "The unique ID of the user who updated this poll.",
                                            "nullable": true,
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "pollOptionID",
                                        "pollID",
                                        "body",
                                        "countVotes",
                                        "insertUserID",
                                        "dateInserted",
                                        "updateUserID",
                                        "dateUpdated"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Polls"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PollOptionPost"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Update a poll option.",
                "x-addon": "polls"
            }
        },
        "/polls/{id}/votes": {
            "delete": {
                "parameters": [
                    {
                        "description": "The poll ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "The user that voted. Defaults to the current user.\n",
                        "in": "query",
                        "name": "userID",
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                },
                "tags": [
                    "Polls"
                ],
                "summary": "Delete a poll vote.",
                "x-addon": "polls"
            },
            "get": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Page number. See [Pagination](https://docs.vanillaforums.com/apiv2/#pagination).\n",
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "integer",
                            "default": 1,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "description": "Desired number of items per page.\n",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 25,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "description": "Filter by pollOptionID.\n",
                        "in": "query",
                        "name": "pollOptionID",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Expand associated records using one or more valid field names. A value of \"all\" will expand all expandable fields.\n",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "items": {
                                "enum": [
                                    "user",
                                    "all"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "properties": {
                                            "dateInserted": {
                                                "description": "When the poll was created.",
                                                "format": "date-time",
                                                "type": "string"
                                            },
                                            "pollOptionID": {
                                                "description": "The unique ID of the option.",
                                                "type": "integer"
                                            },
                                            "userID": {
                                                "description": "The user that made the vote"
                                            }
                                        },
                                        "required": [
                                            "userID",
                                            "pollOptionID",
                                            "dateInserted"
                                        ],
                                        "type": "object"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Polls"
                ],
                "summary": "List polls' votes.",
                "x-addon": "polls"
            },
            "post": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "dateInserted": {
                                            "description": "When the poll was created.",
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "pollOptionID": {
                                            "description": "The unique ID of the option.",
                                            "type": "integer"
                                        },
                                        "userID": {
                                            "description": "The user that made the vote"
                                        }
                                    },
                                    "required": [
                                        "userID",
                                        "pollOptionID",
                                        "dateInserted"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Polls"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PollVotePost"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Vote for a poll option.",
                "x-addon": "polls"
            }
        },
        "/ranks": {
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Rank"
                                    }
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Ranks"
                ],
                "summary": "Get a list of all ranks.",
                "x-addon": "ranks"
            },
            "post": {
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Rank"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Ranks"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RankPost"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Add a new rank.",
                "x-addon": "ranks"
            }
        },
        "/ranks/{id}": {
            "delete": {
                "parameters": [
                    {
                        "description": "The rank ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                },
                "tags": [
                    "Ranks"
                ],
                "summary": "Delete a rank.",
                "x-addon": "ranks"
            },
            "get": {
                "parameters": [
                    {
                        "description": "The rank ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Rank"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Ranks"
                ],
                "summary": "Get a single rank.",
                "x-addon": "ranks"
            },
            "patch": {
                "summary": "Edit a rank.",
                "tags": [
                    "Ranks"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RankPatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Rank"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "x-addon": "ranks"
            }
        },
        "/ranks/{id}/edit": {
            "get": {
                "parameters": [
                    {
                        "description": "The rank ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Rank"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Ranks"
                ],
                "summary": "Get a rank for editing.",
                "x-addon": "ranks"
            }
        },
        "/reactions": {
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ReactionType"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Reactions"
                ],
                "summary": "Get a list of reaction types.",
                "x-addon": "reactions"
            }
        },
        "/reactions/edit/{urlCode}": {
            "get": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "urlCode",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The reaction type ID.\n",
                        "in": "query",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReactionType"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Reactions"
                ],
                "summary": "Get a reaction type for editing.",
                "x-addon": "reactions"
            }
        },
        "/reactions/{urlCode}": {
            "get": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "urlCode",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The reaction type ID.\n",
                        "in": "query",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReactionType"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Reactions"
                ],
                "summary": "Get a single reaction type.",
                "x-addon": "reactions"
            },
            "patch": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "urlCode",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ReactionType"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Reactions"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ReactionType"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Update a reaction type.",
                "x-addon": "reactions"
            }
        },
        "/rich/quote": {
            "post": {
                "summary": "Create a rich-compatible HTML representation of a string for quoting.",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "body": {
                                        "description": "Raw post text to render as a rich post quote.",
                                        "minLength": 1,
                                        "type": "string"
                                    },
                                    "format": {
                                        "description": "The format to be used for rendering the text.",
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "body",
                                    "format"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "properties": {
                                        "quote": {
                                            "description": "A quoted representation of the text, rendered as HTML.",
                                            "minLength": 1,
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "quote"
                                    ]
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Rich"
                ],
                "x-addon": "dashboard"
            }
        },
        "/roles": {
            "get": {
                "parameters": [
                    {
                        "description": "Expand associated records using one or more valid field names. A value of \"all\" will expand all expandable fields.\n",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "items": {
                                "enum": [
                                    "permissions",
                                    "all"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Role"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Roles"
                ],
                "summary": "List roles.",
                "x-addon": "dashboard"
            },
            "post": {
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Role"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Roles"
                ],
                "requestBody": {
                    "$ref": "#/components/requestBodies/RolePost"
                },
                "summary": "Add a role.",
                "x-addon": "dashboard"
            }
        },
        "/roles/{id}": {
            "delete": {
                "parameters": [
                    {
                        "description": "The role ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                },
                "tags": [
                    "Roles"
                ],
                "summary": "Delete a role.",
                "x-addon": "dashboard"
            },
            "get": {
                "parameters": [
                    {
                        "description": "The role ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Expand associated records using one or more valid field names. A value of \"all\" will expand all expandable fields.\n",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "items": {
                                "enum": [
                                    "permissions",
                                    "all"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Role"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Roles"
                ],
                "summary": "Get a role.",
                "x-addon": "dashboard"
            },
            "patch": {
                "parameters": [
                    {
                        "description": "The role ID.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Role"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Roles"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RolePost"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Update a role.",
                "x-addon": "dashboard"
            }
        },
        "/roles/{id}/edit": {
            "get": {
                "parameters": [
                    {
                        "description": "The role ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "canSession": {
                                            "description": "Can users in this role start a session?",
                                            "type": "boolean"
                                        },
                                        "deletable": {
                                            "description": "Is the role deletable?",
                                            "type": "boolean"
                                        },
                                        "description": {
                                            "description": "Description of the role.",
                                            "minLength": 0,
                                            "nullable": true,
                                            "type": "string"
                                        },
                                        "name": {
                                            "description": "Name of the role.",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "personalInfo": {
                                            "description": "Is membership in this role personal information?",
                                            "type": "boolean"
                                        },
                                        "roleID": {
                                            "description": "ID of the role.",
                                            "type": "integer"
                                        },
                                        "type": {
                                            "description": "Default type of this role.",
                                            "minLength": 0,
                                            "nullable": true,
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "roleID",
                                        "name",
                                        "description",
                                        "type",
                                        "deletable",
                                        "canSession",
                                        "personalInfo"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Roles"
                ],
                "summary": "Get a role for editing.",
                "x-addon": "dashboard"
            }
        },
        "/roles/{id}/permissions": {
            "patch": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/PermissionFragment"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Roles"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "items": {
                                    "$ref": "#/components/schemas/PermissionFragment"
                                },
                                "type": "array"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Update permissions on a role",
                "x-addon": "dashboard"
            },
            "put": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/PermissionFragment"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Roles"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "items": {
                                    "$ref": "#/components/schemas/PermissionFragment"
                                },
                                "type": "array"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Overwrite all permissions for a role.",
                "x-addon": "dashboard"
            }
        },
        "/search": {
            "get": {
                "parameters": [
                    {
                        "description": "Filter the records using the supplied terms.\n",
                        "in": "query",
                        "name": "query",
                        "schema": {
                            "type": "string"
                        },
                        "x-search-filter": true
                    },
                    {
                        "description": "Restrict the search to the specified main type(s) of records.\n",
                        "in": "query",
                        "name": "recordTypes",
                        "schema": {
                            "items": {
                                "enum": [
                                    "discussion",
                                    "comment",
                                    "group"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Restrict the search to the specified type(s) of records.\n",
                        "in": "query",
                        "name": "types",
                        "schema": {
                            "items": {
                                "enum": [
                                    "discussion",
                                    "comment",
                                    "question",
                                    "group"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Set the scope of the search to the comments of a discussion. Incompatible with recordType and type.\n",
                        "in": "query",
                        "name": "discussionID",
                        "schema": {
                            "type": "integer"
                        },
                        "x-search-scope": true
                    },
                    {
                        "description": "Set the scope of the search to a specific category.\n",
                        "in": "query",
                        "name": "categoryID",
                        "schema": {
                            "type": "integer"
                        },
                        "x-search-scope": true
                    },
                    {
                        "description": "Set the scope of the search to followed categories only.\n",
                        "in": "query",
                        "name": "followedCategories",
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        },
                        "x-search-scope": true
                    },
                    {
                        "description": "Search the specified category's subtree. Works with categoryID\n",
                        "in": "query",
                        "name": "includeChildCategories",
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "Allow search in archived categories.\n",
                        "in": "query",
                        "name": "includeArchivedCategories",
                        "schema": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "Filter the records by matching part of their name.\n",
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        },
                        "x-search-filter": true
                    },
                    {
                        "description": "Filter the records by inserted user names.\n",
                        "in": "query",
                        "name": "insertUserNames",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form",
                        "x-search-filter": true
                    },
                    {
                        "description": "Filter the records by inserted userIDs.\n",
                        "in": "query",
                        "name": "insertUserIDs",
                        "schema": {
                            "items": {
                                "type": "integer"
                            },
                            "type": "array"
                        },
                        "style": "form",
                        "x-search-filter": true
                    },
                    {
                        "$ref": "#/components/parameters/DateInserted"
                    },
                    {
                        "description": "Filter discussions by matching tags.\n",
                        "in": "query",
                        "name": "tags",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form",
                        "x-search-filter": true
                    },
                    {
                        "description": "Tags search condition.\nMust be one of: \"and\", \"or\".\n",
                        "in": "query",
                        "name": "tagOperator",
                        "schema": {
                            "type": "string",
                            "default": "or",
                            "enum": [
                                "and",
                                "or"
                            ]
                        }
                    },
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "description": "Desired number of items per page.\n",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 30,
                            "maximum": 100,
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/SearchResult"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Search"
                ],
                "summary": "Search for records matching specific criteria.",
                "x-addon": "dashboard"
            }
        },
        "/statuses": {
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Status"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Statuses"
                ],
                "summary": "Get a list of idea statuses.",
                "x-addon": "ideation"
            },
            "post": {
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Statuses"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Status"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Create an idea status.",
                "x-addon": "ideation"
            }
        },
        "/statuses/{id}": {
            "delete": {
                "parameters": [
                    {
                        "description": "The idea status ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                },
                "tags": [
                    "Statuses"
                ],
                "summary": "Delete an idea status.",
                "x-addon": "ideation"
            },
            "get": {
                "parameters": [
                    {
                        "description": "The idea status ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Statuses"
                ],
                "summary": "Get a single idea status.",
                "x-addon": "ideation"
            },
            "patch": {
                "summary": "Update an idea status.",
                "tags": [
                    "Statuses"
                ],
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StatusPatch"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "x-addon": "ideation"
            }
        },
        "/statuses/{id}/edit": {
            "get": {
                "parameters": [
                    {
                        "description": "The idea status ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Status"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Statuses"
                ],
                "summary": "Get editable fields for an idea status.",
                "x-addon": "ideation"
            }
        },
        "/tick": {
            "post": {
                "summary": "Register a page view for statistical and analytical purpose.",
                "responses": {
                    "201": {
                        "description": "Success"
                    }
                },
                "tags": [
                    "Statistics"
                ],
                "x-addon": "dashboard"
            }
        },
        "/tokens": {
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Token"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Tokens"
                ],
                "summary": "Get a list of access token IDs for the current user.",
                "x-addon": "dashboard"
            },
            "post": {
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Tokens"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Token"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Issue a new access token for the current user.",
                "x-addon": "dashboard"
            }
        },
        "/tokens/{id}": {
            "delete": {
                "parameters": [
                    {
                        "description": "The numeric ID of a token.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                },
                "tags": [
                    "Tokens"
                ],
                "summary": "Revoke an access token.",
                "x-addon": "dashboard"
            },
            "get": {
                "parameters": [
                    {
                        "description": "The numeric ID of a token.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "A valid CSRF token for the current user.\n",
                        "in": "query",
                        "name": "transientKey",
                        "required": true,
                        "schema": {
                            "minLength": 1,
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Token"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Tokens"
                ],
                "summary": "Reveal a usable access token.",
                "x-addon": "dashboard"
            }
        },
        "/users": {
            "get": {
                "parameters": [
                    {
                        "description": "When the user was created.\nThis filter receive a string that can take two forms.\nA single date that matches '{Operator}{DateTime}' where {Operator} can be =, &lt;, &gt;, &lt;=, &gt;=  and, if omitted, defaults to =.\nA date range that matches '{Opening}{DateTime},{DateTime}{Closing}' where {Opening} can be '[' or '(' and {Closing} can be ']' or ')'. '[]' are inclusive and '()' are exclusive.\n",
                        "in": "query",
                        "name": "dateInserted",
                        "schema": {
                            "format": "date-filter",
                            "type": "string"
                        }
                    },
                    {
                        "description": "When the user was updated.\nThis filter receive a string that can take two forms.\nA single date that matches '{Operator}{DateTime}' where {Operator} can be =, &lt;, &gt;, &lt;=, &gt;=  and, if omitted, defaults to =.\nA date range that matches '{Opening}{DateTime},{DateTime}{Closing}' where {Opening} can be '[' or '(' and {Closing} can be ']' or ')'. '[]' are inclusive and '()' are exclusive.\n",
                        "in": "query",
                        "name": "dateUpdated",
                        "schema": {
                            "format": "date-filter",
                            "type": "string"
                        }
                    },
                    {
                        "description": "One or more user IDs to lookup.\n",
                        "in": "query",
                        "name": "userID",
                        "schema": {
                            "items": {
                                "type": "integer"
                            },
                            "type": "array"
                        },
                        "style": "form",
                        "x-filter": {
                            "field": "u.UserID"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/Page"
                    },
                    {
                        "description": "Desired number of items per page.\n",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 30,
                            "maximum": 100,
                            "minimum": 1
                        }
                    },
                    {
                        "description": "Expand associated records using one or more valid field names. A value of \"all\" will expand all expandable fields.\n",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "items": {
                                "enum": [
                                    "rank",
                                    "all"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/User"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Users"
                ],
                "summary": "List users.",
                "x-addon": "dashboard"
            },
            "post": {
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Users"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserPost"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Add a user.",
                "x-addon": "dashboard"
            }
        },
        "/users/by-names": {
            "get": {
                "parameters": [
                    {
                        "description": "Filter for username. Supports full or partial matching with appended wildcard (e.g. User*).\n",
                        "in": "query",
                        "name": "name",
                        "required": true,
                        "schema": {
                            "minLength": 1,
                            "type": "string"
                        }
                    },
                    {
                        "description": "Sort method for results.\nMust be one of: \"countComments\", \"dateLastActive\", \"name\", \"mention\".\n",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "type": "string",
                            "default": "name",
                            "enum": [
                                "countComments",
                                "dateLastActive",
                                "name",
                                "mention"
                            ]
                        }
                    },
                    {
                        "description": "Page number. See [Pagination](https://docs.vanillaforums.com/apiv2/#pagination).\n",
                        "in": "query",
                        "name": "page",
                        "schema": {
                            "type": "integer",
                            "default": 1,
                            "minimum": 1
                        }
                    },
                    {
                        "description": "Desired number of items per page.\n",
                        "in": "query",
                        "name": "limit",
                        "schema": {
                            "type": "integer",
                            "default": 30,
                            "maximum": 100,
                            "minimum": 1
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/UserFragment"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Users"
                ],
                "summary": "Search for users by full or partial name matching.",
                "x-addon": "dashboard"
            }
        },
        "/users/me": {
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserFragment"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Users"
                ],
                "summary": "Get information about the current user.",
                "x-addon": "dashboard"
            }
        },
        "/users/me-counts": {
            "get": {
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "counts": {
                                            "type": "array",
                                            "items": {
                                                "type": "object",
                                                "properties": {
                                                    "name": {
                                                        "description": "Menu counter name",
                                                        "type": "string"
                                                    },
                                                    "count": {
                                                        "description": "Counter value",
                                                        "type": "integer"
                                                    }
                                                }
                                            },
                                            "example": [
                                                {
                                                    "name": "UnreadNotifications",
                                                    "count": 2
                                                },
                                                {
                                                    "name": "Bookmarks",
                                                    "count": 3
                                                }
                                            ]
                                        }
                                    },
                                    "required": [
                                        "counts"
                                    ]
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Users"
                ],
                "summary": "Get information about menu counts for current user.",
                "x-addon": "dashboard"
            }
        },
        "/users/register": {
            "post": {
                "responses": {
                    "201": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "email": {
                                            "description": "Email address of the user.",
                                            "minLength": 0,
                                            "type": "string"
                                        },
                                        "name": {
                                            "description": "Name of the user.",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "userID": {
                                            "description": "ID of the user.",
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "userID",
                                        "name",
                                        "email"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Users"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "discoveryText": {
                                        "description": "Why does the user wish to join? Only used when the registration is flagged as SPAM (response code: 202).",
                                        "type": "string"
                                    },
                                    "email": {
                                        "description": "An email address for this user.",
                                        "minLength": 1,
                                        "type": "string"
                                    },
                                    "name": {
                                        "description": "The username.",
                                        "minLength": 1,
                                        "type": "string"
                                    },
                                    "password": {
                                        "description": "A password for this user.",
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "email",
                                    "name",
                                    "password"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Submit a new user registration.",
                "x-addon": "dashboard"
            }
        },
        "/users/request-password": {
            "post": {
                "responses": {
                    "201": {
                        "description": "Success"
                    }
                },
                "tags": [
                    "Users"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "email": {
                                        "description": "The email/username of the user.",
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "email"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                },
                "x-addon": "dashboard"
            }
        },
        "/users/{id}": {
            "delete": {
                "parameters": [
                    {
                        "description": "The user ID.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                },
                "tags": [
                    "Users"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "deleteMethod": {
                                        "type": "string",
                                        "default": "delete",
                                        "description": "The deletion method / strategy.",
                                        "enum": [
                                            "keep",
                                            "wipe",
                                            "delete"
                                        ]
                                    }
                                },
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Delete a user.",
                "x-addon": "dashboard"
            },
            "get": {
                "parameters": [
                    {
                        "description": "The user ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Expand associated records using one or more valid field names. A value of \"all\" will expand all expandable fields.\n",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "items": {
                                "enum": [
                                    "rank",
                                    "all"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Users"
                ],
                "summary": "Get a user.",
                "x-addon": "dashboard"
            },
            "patch": {
                "parameters": [
                    {
                        "description": "The user ID.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Users"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserPatch"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Update a user.",
                "x-addon": "dashboard"
            }
        },
        "/users/{id}/ban": {
            "put": {
                "parameters": [
                    {
                        "description": "The user ID.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "banned": {
                                            "description": "The current banned value.",
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "banned"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Users"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "banned": {
                                        "description": "Pass true to ban or false to unban.",
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "banned"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Ban a user.",
                "x-addon": "dashboard"
            }
        },
        "/users/{id}/confirm-email": {
            "post": {
                "parameters": [
                    {
                        "description": "The user ID.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "email": {
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "emailConfirmed": {
                                            "type": "boolean"
                                        },
                                        "userID": {
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "userID",
                                        "email",
                                        "emailConfirmed"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Users"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "confirmationCode": {
                                        "description": "Email confirmation code",
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "confirmationCode"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Confirm a users current email address by using a confirmation code",
                "x-addon": "dashboard"
            }
        },
        "/users/{id}/edit": {
            "get": {
                "parameters": [
                    {
                        "description": "The user ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Expand associated records using one or more valid field names. A value of \"all\" will expand all expandable fields.\n",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "items": {
                                "enum": [
                                    "rank",
                                    "all"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "bypassSpam": {
                                            "description": "Should submissions from this user bypass SPAM checks?",
                                            "type": "boolean"
                                        },
                                        "email": {
                                            "description": "Email address of the user.",
                                            "minLength": 0,
                                            "type": "string"
                                        },
                                        "emailConfirmed": {
                                            "description": "Has the email address for this user been confirmed?",
                                            "type": "boolean"
                                        },
                                        "name": {
                                            "description": "Name of the user.",
                                            "minLength": 1,
                                            "type": "string"
                                        },
                                        "photo": {
                                            "description": "Raw photo field value from the user record.",
                                            "minLength": 0,
                                            "nullable": true,
                                            "type": "string"
                                        },
                                        "userID": {
                                            "description": "ID of the user.",
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "userID",
                                        "name",
                                        "email",
                                        "photo",
                                        "emailConfirmed",
                                        "bypassSpam"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Users"
                ],
                "summary": "Get a user for editing.",
                "x-addon": "dashboard"
            }
        },
        "/users/{id}/hidden": {
            "put": {
                "parameters": [
                    {
                        "description": "The user ID.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "hidden": {
                                            "description": "Whether not the user is hidden from Online status.",
                                            "type": "boolean"
                                        }
                                    },
                                    "required": [
                                        "hidden"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Users"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "hidden": {
                                        "description": "Whether not the user should be hidden from Online status.",
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "hidden"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                },
                "summary": "Adjust a user\u2019s Online privacy.",
                "x-addon": "dashboard"
            }
        },
        "/users/{id}/photo": {
            "delete": {
                "parameters": [
                    {
                        "description": "The user ID.\n",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Expand associated records using one or more valid field names. A value of \"all\" will expand all expandable fields.\n",
                        "in": "query",
                        "name": "expand",
                        "schema": {
                            "items": {
                                "enum": [
                                    "rank",
                                    "all"
                                ],
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                },
                "tags": [
                    "Users"
                ],
                "summary": "Delete a user photo.",
                "x-addon": "dashboard"
            },
            "post": {
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "photoUrl": {
                                            "description": "URL to the user photo.",
                                            "minLength": 0,
                                            "nullable": true,
                                            "type": "string"
                                        }
                                    },
                                    "required": [
                                        "photoUrl"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "tags": [
                    "Users"
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "photo": {
                                        "type": "string",
                                        "format": "binary"
                                    }
                                },
                                "required": [
                                    "photo"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                },
                "x-addon": "dashboard"
            }
        },
        "/users/{id}/rank": {
            "x-addon": "ranks",
            "put": {
                "summary": "Update the rank of a user.",
                "tags": [
                    "Users"
                ],
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "rankID": {
                                        "description": "ID of the user rank.",
                                        "nullable": true,
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "rankID"
                                ],
                                "type": "object"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "rankID": {
                                            "description": "ID of the user rank.",
                                            "nullable": true,
                                            "type": "integer"
                                        }
                                    },
                                    "required": [
                                        "rankID"
                                    ],
                                    "type": "object"
                                }
                            }
                        },
                        "description": "Success"
                    }
                },
                "x-addon": "dashboard"
            }
        }
    },
    "components": {
        "schemas": {
            "Addon": {
                "properties": {
                    "addonID": {
                        "description": "The ID of the addon used for API calls.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "conflict": {
                        "description": "An array of addons that conflict with this addon.",
                        "items": {
                            "properties": {
                                "addonID": {
                                    "description": "The ID of the addon used for API calls.",
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "constraint": {
                                    "description": "The version requirement.",
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "key": {
                                    "description": "The unique key that identifies the addon",
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "name": {
                                    "description": "The name of the addon.",
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "type": {
                                    "description": "The type of addon.",
                                    "enum": [
                                        "addon",
                                        "theme",
                                        "locale"
                                    ],
                                    "minLength": 1,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "addonID",
                                "name",
                                "key",
                                "type",
                                "constraint"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "description": {
                        "description": "The addon's description",
                        "type": "string"
                    },
                    "enabled": {
                        "description": "Whether or not the addon is enabled.",
                        "type": "boolean"
                    },
                    "iconUrl": {
                        "description": "The addon's icon.",
                        "format": "uri",
                        "minLength": 1,
                        "type": "string"
                    },
                    "key": {
                        "description": "The unique key that identifies the addon",
                        "minLength": 1,
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the addon.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "require": {
                        "description": "An array of addons that are required to enable the addon.",
                        "items": {
                            "properties": {
                                "addonID": {
                                    "description": "The ID of the addon used for API calls.",
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "constraint": {
                                    "description": "The version requirement.",
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "key": {
                                    "description": "The unique key that identifies the addon",
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "name": {
                                    "description": "The name of the addon.",
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "type": {
                                    "description": "The type of addon.",
                                    "enum": [
                                        "addon",
                                        "theme",
                                        "locale"
                                    ],
                                    "minLength": 1,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "addonID",
                                "name",
                                "key",
                                "type",
                                "constraint"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "type": {
                        "description": "The type of addon.",
                        "enum": [
                            "addon",
                            "theme",
                            "locale"
                        ],
                        "minLength": 1,
                        "type": "string"
                    },
                    "version": {
                        "description": "The addon's version.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "addonID",
                    "name",
                    "key",
                    "type",
                    "iconUrl",
                    "version",
                    "enabled"
                ],
                "type": "object",
                "x-addon": "dashboard"
            },
            "Article": {
                "properties": {
                    "articleID": {
                        "description": "Unique article ID.",
                        "type": "integer"
                    },
                    "body": {
                        "description": "Body contents.",
                        "minLength": 0,
                        "nullable": true,
                        "type": "string"
                    },
                    "dateInserted": {
                        "description": "When the article was created.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "dateUpdated": {
                        "description": "When the article was last updated.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "excerpt": {
                        "description": "Plain-text excerpt of the current article body.",
                        "nullable": true,
                        "type": "string"
                    },
                    "insertUser": {
                        "$ref": "#/components/schemas/UserFragment"
                    },
                    "insertUserID": {
                        "description": "Unique ID of the user who originally created the article.",
                        "type": "integer"
                    },
                    "knowledgeCategoryID": {
                        "description": "Category the article belongs in.",
                        "nullable": true,
                        "type": "integer"
                    },
                    "locale": {
                        "description": "Locale the article was written in.",
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "name": {
                        "description": "Title of the article.",
                        "minLength": 0,
                        "nullable": true,
                        "type": "string"
                    },
                    "outline": {
                        "items": {
                            "properties": {
                                "level": {
                                    "description": "Heading level",
                                    "type": "integer"
                                },
                                "ref": {
                                    "description": "Heading blot reference id. Ex: #title",
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "text": {
                                    "description": "Heading text line",
                                    "minLength": 1,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "ref",
                                "level",
                                "text"
                            ],
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "score": {
                        "description": "Score of the article.",
                        "type": "integer"
                    },
                    "seoDescription": {
                        "description": "SEO-optimized description of the article content.",
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "seoName": {
                        "description": "SEO-optimized name for the article.",
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "slug": {
                        "description": "URL slug",
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "sort": {
                        "description": "Manual sort order of the article.",
                        "nullable": true,
                        "type": "integer"
                    },
                    "status": {
                        "description": "",
                        "enum": [
                            "undeleted",
                            "deleted",
                            "published"
                        ],
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "updateUser": {
                        "$ref": "#/components/schemas/UserFragment"
                    },
                    "updateUserID": {
                        "description": "Unique ID of the last user to update the article.",
                        "type": "integer"
                    },
                    "url": {
                        "description": "Full URL to the article.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "views": {
                        "description": "How many times the article has been viewed.",
                        "type": "integer"
                    }
                },
                "required": [
                    "articleID",
                    "knowledgeCategoryID",
                    "name",
                    "body",
                    "outline",
                    "excerpt",
                    "seoName",
                    "seoDescription",
                    "slug",
                    "sort",
                    "score",
                    "views",
                    "url",
                    "insertUserID",
                    "dateInserted",
                    "updateUserID",
                    "dateUpdated",
                    "status",
                    "locale"
                ],
                "type": "object",
                "x-addon": "knowledge"
            },
            "ArticleAliases": {
                "type": "object",
                "properties": {
                    "articleID": {
                        "description": "Unique article ID.",
                        "type": "integer"
                    },
                    "knowledgeCategoryID": {
                        "description": "Category the article belongs in.",
                        "nullable": true,
                        "type": "integer"
                    },
                    "knowledgeBaseID": {
                        "description": "Knowledge base ID article belongs to.",
                        "nullable": false,
                        "type": "integer"
                    },
                    "status": {
                        "description": "",
                        "enum": [
                            "deleted",
                            "published"
                        ],
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "aliases": {
                        "description": "List of url aliases for article.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "category/discussion-migrated-from/forum/",
                            "another-url/for-the-same/article"
                        ]
                    }
                },
                "required": [
                    "articleID",
                    "knowledgeCategoryID",
                    "knowledgeBaseID",
                    "status",
                    "aliases"
                ],
                "x-addon": "knowledge"
            },
            "ArticlePatch": {
                "properties": {
                    "body": {
                        "description": "Body contents.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "draftID": {
                        "description": "Unique ID of a draft to remove upon updating an article.",
                        "type": "integer"
                    },
                    "format": {
                        "description": "Format of the raw body content.",
                        "enum": [
                            "text",
                            "textex",
                            "markdown",
                            "wysiwyg",
                            "html",
                            "bbcode",
                            "rich"
                        ],
                        "minLength": 1,
                        "type": "string"
                    },
                    "knowledgeCategoryID": {
                        "description": "Category the article belongs in.",
                        "type": "integer"
                    },
                    "locale": {
                        "description": "Locale the article was written in.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "name": {
                        "description": "Title of the article.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "sort": {
                        "description": "Manual sort order of the article.",
                        "nullable": true,
                        "type": "integer"
                    },
                    "discussionID": {
                        "description": "Discussion ID to link article url as discussion canonical url.",
                        "type": "integer"
                    }
                },
                "type": "object",
                "x-addon": "knowledge"
            },
            "ArticlePost": {
                "properties": {
                    "body": {
                        "description": "Body contents.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "draftID": {
                        "description": "Unique ID of a draft to remove upon updating an article.",
                        "type": "integer"
                    },
                    "format": {
                        "description": "Format of the raw body content.",
                        "enum": [
                            "text",
                            "textex",
                            "markdown",
                            "wysiwyg",
                            "html",
                            "bbcode",
                            "rich"
                        ],
                        "minLength": 1,
                        "type": "string"
                    },
                    "knowledgeCategoryID": {
                        "description": "Category the article belongs in.",
                        "type": "integer"
                    },
                    "locale": {
                        "description": "Locale the article was written in.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "name": {
                        "description": "Title of the article.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "sort": {
                        "description": "Manual sort order of the article.",
                        "nullable": true,
                        "type": "integer"
                    },
                    "discussionID": {
                        "description": "Discussion ID to link article url as discussion canonical url.",
                        "type": "integer"
                    }
                },
                "required": [
                    "knowledgeCategoryID",
                    "name",
                    "body",
                    "locale",
                    "format"
                ],
                "type": "object",
                "x-addon": "knowledge"
            },
            "ArticleRevision": {
                "properties": {
                    "articleID": {
                        "description": "Associated article ID.",
                        "type": "integer"
                    },
                    "articleRevisionID": {
                        "description": "Unique article revision ID.",
                        "type": "integer"
                    },
                    "body": {
                        "description": "Body contents.",
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "bodyRendered": {
                        "description": "Rendered body contents.",
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "dateInserted": {
                        "description": "When the article was created.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "insertUser": {
                        "$ref": "#/components/schemas/UserFragment"
                    },
                    "insertUserID": {
                        "description": "Unique ID of the user who originally created the article.",
                        "type": "integer"
                    },
                    "locale": {
                        "description": "Locale the article was written in.",
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "name": {
                        "description": "Title of the article.",
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "status": {
                        "description": "",
                        "enum": [
                            "published"
                        ],
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "articleRevisionID",
                    "articleID",
                    "status",
                    "name",
                    "body",
                    "bodyRendered",
                    "locale",
                    "insertUserID",
                    "dateInserted"
                ],
                "x-addon": "knowledge"
            },
            "ArticleSimple": {
                "type": "object",
                "properties": {
                    "articleID": {
                        "description": "Unique article ID.",
                        "type": "integer"
                    },
                    "dateInserted": {
                        "description": "When the article was created.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "dateUpdated": {
                        "description": "When the article was last updated.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "excerpt": {
                        "description": "Plain-text excerpt of the current article body.",
                        "nullable": true,
                        "type": "string"
                    },
                    "insertUser": {
                        "$ref": "#/components/schemas/UserFragment"
                    },
                    "insertUserID": {
                        "description": "Unique ID of the user who originally created the article.",
                        "type": "integer"
                    },
                    "knowledgeCategoryID": {
                        "description": "Category the article belongs in.",
                        "nullable": true,
                        "type": "integer"
                    },
                    "name": {
                        "description": "Title of the article.",
                        "minLength": 0,
                        "nullable": true,
                        "type": "string"
                    },
                    "score": {
                        "description": "Score of the article.",
                        "type": "integer"
                    },
                    "seoDescription": {
                        "description": "SEO-optimized description of the article content.",
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "seoName": {
                        "description": "SEO-optimized name for the article.",
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "slug": {
                        "description": "URL slug",
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "sort": {
                        "description": "Manual sort order of the article.",
                        "nullable": true,
                        "type": "integer"
                    },
                    "status": {
                        "description": "",
                        "enum": [
                            "undeleted",
                            "deleted",
                            "published"
                        ],
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "updateUser": {
                        "$ref": "#/components/schemas/UserFragment"
                    },
                    "updateUserID": {
                        "description": "Unique ID of the last user to update the article.",
                        "type": "integer"
                    },
                    "url": {
                        "description": "Full URL to the article.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "views": {
                        "description": "How many times the article has been viewed.",
                        "type": "integer"
                    },
                    "reactions": {
                        "description": "List of user reactions on article.",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Reaction"
                        }
                    },
                    "aliases": {
                        "description": "List of url aliases for article.",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "example": [
                            "category/discussion-migrated-from/forum/",
                            "another-url/for-the-same/article"
                        ]
                    }
                },
                "required": [
                    "articleID",
                    "knowledgeCategoryID",
                    "name",
                    "seoName",
                    "seoDescription",
                    "slug",
                    "sort",
                    "score",
                    "views",
                    "url",
                    "insertUserID",
                    "dateInserted",
                    "updateUserID",
                    "dateUpdated",
                    "status"
                ],
                "x-addon": "knowledge"
            },
            "AssetData": {
                "type": "object",
                "properties": {
                    "data": {
                        "description": "Asset content data.",
                        "type": "string"
                    }
                },
                "example": {
                    "data": "some content"
                },
                "required": [
                    "data"
                ],
                "x-addon": "themingapi"
            },
            "Badge": {
                "properties": {
                    "badgeID": {
                        "description": "The ID of the badge.",
                        "type": "integer"
                    },
                    "body": {
                        "description": "The description of the badge.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "class": {
                        "description": "The class of the badge.",
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "classLevel": {
                        "description": "The class level.",
                        "nullable": true,
                        "type": "integer"
                    },
                    "enabled": {
                        "description": "Tells whether the badge is enabled or not.",
                        "type": "boolean"
                    },
                    "key": {
                        "description": "They key of the badge.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the badge.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "photoUrl": {
                        "description": "The photo of the badge.",
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "points": {
                        "description": "The amount of point a badge is worth.",
                        "type": "integer"
                    }
                },
                "required": [
                    "badgeID",
                    "name",
                    "key",
                    "body",
                    "points",
                    "class",
                    "classLevel",
                    "enabled"
                ],
                "type": "object",
                "x-addon": "badges"
            },
            "BadgePost": {
                "properties": {
                    "body": {
                        "description": "The description of the badge.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "class": {
                        "description": "The class of the badge.",
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "classLevel": {
                        "description": "The class level.",
                        "nullable": true,
                        "type": "integer"
                    },
                    "enabled": {
                        "default": true,
                        "description": "Tells whether the badge is enabled or not.",
                        "type": "boolean"
                    },
                    "key": {
                        "description": "They key of the badge.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the badge.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "photoUrl": {
                        "description": "The photo of the badge.",
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "points": {
                        "description": "The amount of point a badge is worth.",
                        "type": "integer"
                    }
                },
                "required": [
                    "name",
                    "key",
                    "body",
                    "points",
                    "class",
                    "classLevel"
                ],
                "type": "object",
                "x-addon": "badges"
            },
            "BadgeRequest": {
                "properties": {
                    "badge": {
                        "$ref": "#/components/schemas/Badge"
                    },
                    "badgeID": {
                        "description": "The ID of the badge.",
                        "type": "integer"
                    },
                    "dateInserted": {
                        "description": "When the user requested the badge.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "insertUser": {
                        "$ref": "#/components/schemas/UserFragment"
                    },
                    "insertUserID": {
                        "description": "The user that created the user badge relation.",
                        "type": "integer"
                    },
                    "reasonBody": {
                        "description": "Reason why the user wants the badge.",
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "user": {
                        "$ref": "#/components/schemas/UserFragment"
                    },
                    "userID": {
                        "description": "The ID of the user.",
                        "type": "integer"
                    }
                },
                "required": [
                    "userID",
                    "badgeID",
                    "reasonBody",
                    "insertUserID",
                    "dateInserted"
                ],
                "type": "object",
                "x-addon": "badges"
            },
            "BadgeRequestPost": {
                "properties": {
                    "reasonBody": {
                        "description": "Reason why the user wants the badge.",
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object",
                "x-addon": "badges"
            },
            "CategoryFragment": {
                "properties": {
                    "categoryID": {
                        "description": "The ID of the category.",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of the category.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "url": {
                        "description": "Full URL to the category.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "categoryID",
                    "name",
                    "url"
                ],
                "type": "object",
                "x-addon": "vanilla"
            },
            "CategoryNavigationFragment": {
                "properties": {
                    "knowledgeCategoryID": {
                        "type": "integer"
                    },
                    "name": {
                        "description": "Name of the item.",
                        "nullable": true,
                        "type": "string"
                    },
                    "parentID": {
                        "description": "Unique ID of the category this record belongs to.",
                        "type": "integer"
                    },
                    "recordID": {
                        "description": "Unique ID of the record represented by the navigation item.",
                        "type": "integer"
                    },
                    "recordType": {
                        "description": "Type of record represented by the navigation item.",
                        "enum": [
                            "knowledgeCategory",
                            "article"
                        ],
                        "type": "string"
                    },
                    "sort": {
                        "description": "Sort weight.",
                        "nullable": true,
                        "type": "integer"
                    },
                    "url": {
                        "description": "Full URL to the record.",
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "recordID",
                    "sort",
                    "recordType"
                ],
                "type": "object",
                "x-addon": "knowledge"
            },
            "CategoryPost": {
                "properties": {
                    "customPermissions": {
                        "description": "Are custom permissions set for this category?",
                        "type": "boolean"
                    },
                    "displayAs": {
                        "type": "string",
                        "default": "discussions",
                        "description": "The display style of the category.",
                        "enum": [
                            "categories",
                            "discussions",
                            "flat",
                            "heading"
                        ],
                        "minLength": 1
                    },
                    "name": {
                        "description": "The name of the category.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "parentCategoryID": {
                        "description": "Parent category ID.",
                        "nullable": true,
                        "type": "integer"
                    },
                    "urlcode": {
                        "description": "The URL code of the category.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "urlcode"
                ],
                "type": "object",
                "x-addon": "vanilla"
            },
            "Comment": {
                "properties": {
                    "attributes": {
                        "nullable": true,
                        "properties": {
                            "hootsuite": {
                                "description": "Hootsuite metadata.",
                                "type": "object",
                                "x-addon": "hootsuite"
                            }
                        },
                        "type": "object"
                    },
                    "body": {
                        "description": "The body of the comment.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "commentID": {
                        "description": "The ID of the comment.",
                        "type": "integer"
                    },
                    "dateInserted": {
                        "description": "When the comment was created.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "dateUpdated": {
                        "description": "When the comment was last updated.",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "discussionID": {
                        "description": "The ID of the discussion.",
                        "type": "integer"
                    },
                    "insertUser": {
                        "$ref": "#/components/schemas/UserFragment"
                    },
                    "insertUserID": {
                        "description": "The user that created the comment.",
                        "type": "integer"
                    },
                    "reactions": {
                        "type": "array",
                        "items": {
                            "properties": {
                                "class": {
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "count": {
                                    "type": "integer"
                                },
                                "name": {
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "tagID": {
                                    "type": "integer"
                                },
                                "urlcode": {
                                    "minLength": 1,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "tagID",
                                "urlcode",
                                "name",
                                "class",
                                "count"
                            ],
                            "type": "object"
                        },
                        "x-addon": "reactions"
                    },
                    "score": {
                        "description": "Total points associated with this post.",
                        "nullable": true,
                        "type": "integer"
                    },
                    "url": {
                        "description": "The full URL to the comment.",
                        "type": "string"
                    }
                },
                "required": [
                    "commentID",
                    "discussionID",
                    "body",
                    "dateInserted",
                    "dateUpdated",
                    "insertUserID",
                    "score",
                    "attributes"
                ],
                "type": "object",
                "x-addon": "vanilla"
            },
            "CommentGet": {
                "properties": {
                    "expand": {
                        "description": "Expand associated records using one or more valid field names. A value of \"all\" will expand all expandable fields.",
                        "items": {
                            "enum": [
                                "reactions",
                                "all"
                            ],
                            "type": "string"
                        },
                        "type": "array",
                        "x-collectionFormat": "csv"
                    },
                    "id": {
                        "description": "The comment ID.",
                        "type": "integer"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object",
                "x-addon": "vanilla"
            },
            "CommentPost": {
                "properties": {
                    "body": {
                        "description": "The body of the comment.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "discussionID": {
                        "description": "The ID of the discussion.",
                        "type": "integer"
                    },
                    "format": {
                        "description": "The input format of the comment.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "body",
                    "format",
                    "discussionID"
                ],
                "type": "object",
                "x-addon": "vanilla"
            },
            "Conversation": {
                "properties": {
                    "body": {
                        "description": "The most recent unread message in the conversation.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "conversationID": {
                        "description": "The ID of the conversation.",
                        "type": "integer"
                    },
                    "countMessages": {
                        "description": "The number of messages on the conversation.",
                        "type": "integer"
                    },
                    "countParticipants": {
                        "description": "The number of participants on the conversation.",
                        "type": "integer"
                    },
                    "countUnread": {
                        "description": "The number of unread messages.",
                        "type": "integer"
                    },
                    "dateInserted": {
                        "description": "When the conversation was created.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "insertUser": {
                        "$ref": "#/components/schemas/UserFragment"
                    },
                    "insertUserID": {
                        "description": "The user that created the conversation.",
                        "type": "integer"
                    },
                    "lastMessage": {
                        "properties": {
                            "dateInserted": {
                                "description": "The date of the message.",
                                "format": "date-time",
                                "type": "string"
                            },
                            "insertUser": {
                                "$ref": "#/components/schemas/UserFragment"
                            },
                            "insertUserID": {
                                "description": "The author of the your most recent message.",
                                "type": "integer"
                            }
                        },
                        "required": [
                            "insertUserID",
                            "dateInserted",
                            "insertUser"
                        ],
                        "type": "object"
                    },
                    "name": {
                        "description": "The name of the conversation.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "participants": {
                        "$ref": "#/components/schemas/ConversationParticipants"
                    },
                    "unread": {
                        "description": "Whether the conversation has an unread indicator.",
                        "type": "boolean"
                    },
                    "url": {
                        "description": "The URL of the conversation.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "conversationID",
                    "name",
                    "body",
                    "url",
                    "dateInserted",
                    "insertUserID",
                    "countParticipants",
                    "countMessages"
                ],
                "type": "object",
                "x-addon": "conversations"
            },
            "ConversationParticipants": {
                "description": "List of participants.",
                "items": {
                    "properties": {
                        "userID": {
                            "description": "The userID of the participant.",
                            "type": "integer"
                        },
                        "status": {
                            "description": "Participation status of the user.",
                            "enum": [
                                "participating",
                                "deleted"
                            ],
                            "type": "string"
                        },
                        "user": {
                            "$ref": "#/components/schemas/UserFragment"
                        }
                    },
                    "required": [
                        "userID",
                        "status"
                    ],
                    "type": "object"
                },
                "type": "array",
                "x-addon": "conversations"
            },
            "ConversationPost": {
                "properties": {
                    "participantUserIDs": {
                        "description": "List of userID of the participants.",
                        "items": {
                            "type": "integer"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "participantUserIDs"
                ],
                "type": "object",
                "x-addon": "conversations"
            },
            "Discussion": {
                "properties": {
                    "attributes": {
                        "properties": {
                            "idea": {
                                "properties": {
                                    "status": {
                                        "properties": {
                                            "name": {
                                                "description": "Label for the status.",
                                                "minLength": 1,
                                                "type": "string"
                                            },
                                            "state": {
                                                "description": "The open/closed state of an idea.",
                                                "enum": [
                                                    "open",
                                                    "closed"
                                                ],
                                                "minLength": 1,
                                                "type": "string"
                                            }
                                        },
                                        "required": [
                                            "name",
                                            "state"
                                        ],
                                        "type": "object"
                                    },
                                    "statusID": {
                                        "description": "Unique numeric ID of a status.",
                                        "type": "integer"
                                    },
                                    "statusNotes": {
                                        "description": "Status update notes.",
                                        "minLength": 1,
                                        "nullable": true,
                                        "type": "string"
                                    },
                                    "type": {
                                        "description": "Voting type for this idea: up-only or up and down.",
                                        "enum": [
                                            "up",
                                            "up-down"
                                        ],
                                        "minLength": 1,
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "statusNotes",
                                    "statusID",
                                    "status",
                                    "type"
                                ],
                                "type": "object",
                                "x-addon": "ideation"
                            }
                        },
                        "type": "object"
                    },
                    "body": {
                        "description": "The body of the discussion.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "bookmarked": {
                        "description": "Whether or not the discussion is bookmarked by the current user.",
                        "type": "boolean"
                    },
                    "category": {
                        "$ref": "#/components/schemas/CategoryFragment"
                    },
                    "categoryID": {
                        "description": "The category the discussion is in.",
                        "type": "integer"
                    },
                    "closed": {
                        "description": "Whether the discussion is closed or open.",
                        "type": "boolean"
                    },
                    "countComments": {
                        "description": "The number of comments on the discussion.",
                        "type": "integer"
                    },
                    "countUnread": {
                        "description": "The number of unread comments.",
                        "type": "integer"
                    },
                    "countViews": {
                        "description": "The number of views on the discussion.",
                        "type": "integer"
                    },
                    "dateInserted": {
                        "description": "When the discussion was created.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "dateUpdated": {
                        "description": "When the discussion was last updated.",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "discussionID": {
                        "description": "The ID of the discussion.",
                        "type": "integer"
                    },
                    "groupID": {
                        "x-addon": "groups",
                        "description": "The group the discussion is in.",
                        "nullable": true,
                        "type": "integer"
                    },
                    "insertUser": {
                        "$ref": "#/components/schemas/UserFragment"
                    },
                    "insertUserID": {
                        "description": "The user that created the discussion.",
                        "type": "integer"
                    },
                    "lastPost": {
                        "$ref": "#/components/schemas/PostFragment"
                    },
                    "lastUser": {
                        "$ref": "#/components/schemas/UserFragment"
                    },
                    "name": {
                        "description": "The title of the discussion.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "pinLocation": {
                        "description": "The location for the discussion, if pinned. \"category\" are pinned to their own category. \"recent\" are pinned to the recent discussions list, as well as their own category.",
                        "enum": [
                            "category",
                            "recent"
                        ],
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "pinned": {
                        "description": "Whether or not the discussion has been pinned.",
                        "type": "boolean"
                    },
                    "reactions": {
                        "items": {
                            "properties": {
                                "class": {
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "count": {
                                    "type": "integer"
                                },
                                "name": {
                                    "minLength": 1,
                                    "type": "string"
                                },
                                "tagID": {
                                    "type": "integer"
                                },
                                "urlcode": {
                                    "minLength": 1,
                                    "type": "string"
                                }
                            },
                            "required": [
                                "tagID",
                                "urlcode",
                                "name",
                                "class",
                                "count"
                            ],
                            "type": "object"
                        },
                        "type": "array",
                        "x-addon": "reactions"
                    },
                    "score": {
                        "description": "Total points associated with this post.",
                        "nullable": true,
                        "type": "integer"
                    },
                    "sink": {
                        "description": "Whether or not the discussion has been sunk.",
                        "type": "boolean"
                    },
                    "type": {
                        "description": "The type of this discussion if any.",
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "unread": {
                        "description": "Whether or not the discussion should have an unread indicator.",
                        "type": "boolean"
                    },
                    "url": {
                        "description": "The full URL to the discussion.",
                        "type": "string"
                    }
                },
                "required": [
                    "discussionID",
                    "type",
                    "name",
                    "body",
                    "categoryID",
                    "dateInserted",
                    "dateUpdated",
                    "insertUserID",
                    "pinLocation",
                    "closed",
                    "sink",
                    "countComments",
                    "countViews",
                    "score",
                    "bookmarked",
                    "unread",
                    "attributes"
                ],
                "type": "object",
                "x-addon": "vanilla"
            },
            "DiscussionArticle": {
                "type": "object",
                "properties": {
                    "acceptedAnswers": {
                        "items": {
                            "$ref": "#/components/schemas/DiscussionArticleAnswer"
                        },
                        "type": "array"
                    },
                    "body": {
                        "oneOf": [
                            {
                                "description": "Rendered discussion body contents.",
                                "type": "string"
                            },
                            {
                                "description": "Rich format operations for the discussion body contents.",
                                "type": "array",
                                "items": {
                                    "type": "object"
                                }
                            }
                        ]
                    },
                    "format": {
                        "description": "Post format.",
                        "type": "string"
                    },
                    "name": {
                        "description": "Discussion name.",
                        "type": "string"
                    },
                    "url": {
                        "description": "Full URL to the discussion.",
                        "type": "string"
                    }
                },
                "x-addon": "knowledge"
            },
            "DiscussionArticleAnswer": {
                "type": "object",
                "properties": {
                    "body": {
                        "oneOf": [
                            {
                                "description": "Rendered answer body contents.",
                                "type": "string"
                            },
                            {
                                "description": "Rich format operations for the answer body contents.",
                                "type": "array",
                                "items": {
                                    "type": "object"
                                }
                            }
                        ]
                    },
                    "format": {
                        "description": "Post format.",
                        "type": "string"
                    },
                    "url": {
                        "description": "Full URL to the answer.",
                        "type": "string"
                    }
                },
                "x-addon": "knowledge"
            },
            "DiscussionGetEdit": {
                "properties": {
                    "body": {
                        "description": "The body of the discussion.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "categoryID": {
                        "description": "The category the discussion is in.",
                        "type": "integer"
                    },
                    "closed": {
                        "description": "Whether the discussion is closed or open.",
                        "type": "boolean"
                    },
                    "discussionID": {
                        "description": "The ID of the discussion.",
                        "type": "integer"
                    },
                    "format": {
                        "description": "The input format of the discussion.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "groupID": {
                        "x-addon": "groups",
                        "description": "The group the discussion is in.",
                        "nullable": true,
                        "type": "integer"
                    },
                    "name": {
                        "description": "The title of the discussion.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "pinLocation": {
                        "description": "The location for the discussion, if pinned. \"category\" are pinned to their own category.\n\"recent\" are pinned to the recent discussions list, as well as their own category.\n",
                        "enum": [
                            "category",
                            "recent"
                        ],
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "pinned": {
                        "description": "Whether or not the discussion has been pinned.",
                        "type": "boolean"
                    },
                    "sink": {
                        "description": "Whether or not the discussion has been sunk.",
                        "type": "boolean"
                    }
                },
                "required": [
                    "discussionID",
                    "name",
                    "body",
                    "format",
                    "categoryID",
                    "sink",
                    "closed",
                    "pinned",
                    "pinLocation"
                ],
                "type": "object",
                "x-addon": "vanilla"
            },
            "DiscussionPost": {
                "properties": {
                    "body": {
                        "description": "The body of the discussion.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "categoryID": {
                        "description": "The category the discussion is in.",
                        "type": "integer"
                    },
                    "closed": {
                        "description": "Whether the discussion is closed or open.",
                        "type": "boolean"
                    },
                    "format": {
                        "description": "The input format of the discussion.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "groupID": {
                        "x-addon": "groups",
                        "description": "The group the discussion is in.",
                        "nullable": true,
                        "type": "integer"
                    },
                    "name": {
                        "description": "The title of the discussion.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "pinLocation": {
                        "description": "The location for the discussion, if pinned. \"category\" are pinned to their own category. \"recent\" are pinned to the recent discussions list, as well as their own category.",
                        "enum": [
                            "category",
                            "recent"
                        ],
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "pinned": {
                        "description": "Whether or not the discussion has been pinned.",
                        "type": "boolean"
                    },
                    "sink": {
                        "description": "Whether or not the discussion has been sunk.",
                        "type": "boolean"
                    }
                },
                "required": [
                    "name",
                    "body",
                    "format"
                ],
                "type": "object",
                "x-addon": "vanilla"
            },
            "DraftPatch": {
                "type": "object",
                "properties": {
                    "attributes": {
                        "description": "A free-form object containing all custom data for this draft.",
                        "type": "object"
                    },
                    "parentRecordID": {
                        "description": "The unique ID of the intended parent to this record.",
                        "nullable": true,
                        "type": "integer"
                    },
                    "recordType": {
                        "description": "The type of record associated with this draft.",
                        "enum": [
                            "comment",
                            "discussion"
                        ],
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "x-addon": "dashboard"
            },
            "DraftPost": {
                "type": "object",
                "properties": {
                    "attributes": {
                        "description": "A free-form object containing all custom data for this draft.",
                        "type": "object"
                    },
                    "parentRecordID": {
                        "description": "The unique ID of the intended parent to this record.",
                        "nullable": true,
                        "type": "integer"
                    },
                    "recordType": {
                        "description": "The type of record associated with this draft.",
                        "enum": [
                            "comment",
                            "discussion"
                        ],
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "recordType",
                    "attributes"
                ],
                "x-addon": "dashboard"
            },
            "Event": {
                "properties": {
                    "attending": {
                        "description": "Is the participant attending the event.",
                        "enum": [
                            "yes",
                            "no",
                            "maybe"
                        ],
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "dateInserted": {
                        "description": "When the event was created.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "eventID": {
                        "description": "The ID of the event.",
                        "type": "integer"
                    },
                    "user": {
                        "$ref": "#/components/schemas/UserFragment"
                    },
                    "userID": {
                        "description": "The user ID of the participant.",
                        "type": "integer"
                    }
                },
                "required": [
                    "eventID",
                    "userID",
                    "dateInserted",
                    "attending"
                ],
                "type": "object",
                "x-addon": "groups"
            },
            "EventPatch": {
                "properties": {
                    "body": {
                        "description": "The description of the event.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "dateEnds": {
                        "description": "When the event ends.",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "dateStarts": {
                        "description": "When the event starts.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "format": {
                        "description": "The input format of the event.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "groupID": {
                        "description": "The group the event is in.",
                        "type": "integer"
                    },
                    "location": {
                        "description": "The location of the event.",
                        "maxLength": 255,
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the event.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "type": "object",
                "x-addon": "groups"
            },
            "EventPost": {
                "properties": {
                    "body": {
                        "description": "The description of the event.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "dateEnds": {
                        "description": "When the event ends.",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "dateStarts": {
                        "description": "When the event starts.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "format": {
                        "description": "The input format of the event.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "groupID": {
                        "description": "The group the event is in.",
                        "type": "integer"
                    },
                    "location": {
                        "description": "The location of the event.",
                        "maxLength": 255,
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the event.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "groupID",
                    "name",
                    "body",
                    "format",
                    "location",
                    "dateStarts"
                ],
                "type": "object",
                "x-addon": "groups"
            },
            "Group": {
                "properties": {
                    "bannerUrl": {
                        "description": "The URL of the banner of the group.",
                        "nullable": true,
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the group.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "format": {
                        "description": "The input format of the group.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "groupID": {
                        "description": "The ID of the group.",
                        "type": "integer"
                    },
                    "iconUrl": {
                        "description": "The URL of the icon of the group.",
                        "nullable": true,
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the group.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "privacy": {
                        "description": "The privacy level of the group's content.",
                        "enum": [
                            "public",
                            "private",
                            "secret"
                        ],
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "groupID",
                    "name",
                    "description",
                    "format",
                    "iconUrl",
                    "bannerUrl",
                    "privacy"
                ],
                "type": "object",
                "x-addon": "groups"
            },
            "GroupApplicant": {
                "properties": {
                    "body": {
                        "description": "Universal record field. Content of \"reason\".",
                        "minLength": 1,
                        "type": "string"
                    },
                    "dateInserted": {
                        "description": "When the applicant was created.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "reason": {
                        "description": "The reason why the applicant wants to join the group.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "status": {
                        "description": "The status of the applicant.",
                        "enum": [
                            "approved",
                            "denied",
                            "pending"
                        ],
                        "minLength": 1,
                        "type": "string"
                    },
                    "user": {
                        "$ref": "#/components/schemas/UserFragment"
                    },
                    "userID": {
                        "description": "The user ID of the applicant.",
                        "type": "integer"
                    }
                },
                "required": [
                    "userID",
                    "status",
                    "reason",
                    "body",
                    "dateInserted"
                ],
                "type": "object",
                "x-addon": "groups"
            },
            "GroupInvite": {
                "properties": {
                    "dateInserted": {
                        "description": "When the invite was issued.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "insertUser": {
                        "$ref": "#/components/schemas/UserFragment"
                    },
                    "insertUserID": {
                        "description": "The user that created the invite.",
                        "type": "integer"
                    },
                    "user": {
                        "$ref": "#/components/schemas/UserFragment"
                    },
                    "userID": {
                        "description": "The ID of the user that has been invited.",
                        "type": "integer"
                    }
                },
                "required": [
                    "userID",
                    "dateInserted",
                    "insertUserID"
                ],
                "type": "object",
                "x-addon": "groups"
            },
            "GroupMember": {
                "properties": {
                    "dateInserted": {
                        "description": "When the user was added to the group.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "insertUser": {
                        "$ref": "#/components/schemas/UserFragment"
                    },
                    "insertUserID": {
                        "description": "The user that added this user to the group.",
                        "type": "integer"
                    },
                    "role": {
                        "description": "The role of the user for that group.",
                        "enum": [
                            "leader",
                            "member"
                        ],
                        "minLength": 1,
                        "type": "string"
                    },
                    "user": {
                        "$ref": "#/components/schemas/UserFragment"
                    },
                    "userID": {
                        "description": "The user ID of the member of the group.",
                        "type": "integer"
                    }
                },
                "required": [
                    "userID",
                    "dateInserted",
                    "insertUserID",
                    "role"
                ],
                "type": "object",
                "x-addon": "groups"
            },
            "GroupPatch": {
                "type": "object",
                "properties": {
                    "bannerUrl": {
                        "description": "The URL of the banner of the group.",
                        "nullable": true,
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the group.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "format": {
                        "description": "The input format of the group.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "iconUrl": {
                        "description": "The URL of the icon of the group.",
                        "nullable": true,
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the group.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "privacy": {
                        "description": "The privacy level of the group's content.",
                        "enum": [
                            "public",
                            "private",
                            "secret"
                        ],
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "description",
                    "format",
                    "privacy"
                ],
                "x-addon": "groups"
            },
            "GroupPost": {
                "type": "object",
                "properties": {
                    "bannerUrl": {
                        "description": "The URL of the banner of the group.",
                        "nullable": true,
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the group.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "format": {
                        "description": "The input format of the group.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "iconUrl": {
                        "description": "The URL of the icon of the group.",
                        "nullable": true,
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the group.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "privacy": {
                        "description": "The privacy level of the group's content.",
                        "enum": [
                            "public",
                            "private",
                            "secret"
                        ],
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "description",
                    "format",
                    "privacy"
                ],
                "x-addon": "groups"
            },
            "KnowledgeBasePost": {
                "properties": {
                    "description": {
                        "description": "Description for the knowledge base.",
                        "maxLength": 255,
                        "type": "string"
                    },
                    "icon": {
                        "description": "Full URL to the icon of knowledge base.",
                        "type": "string"
                    },
                    "name": {
                        "description": "Name for the knowledge base.",
                        "maxLength": 255,
                        "type": "string"
                    },
                    "sortArticles": {
                        "description": "Sort order for articles of the knowledge base.",
                        "enum": [
                            "manual",
                            "name",
                            "dateInserted",
                            "dateInsertedDesc"
                        ],
                        "nullable": true,
                        "type": "string"
                    },
                    "sourceLocale": {
                        "description": "sourceLocale of knowledge base.",
                        "type": "string"
                    },
                    "urlCode": {
                        "description": "Full URL to the knowledge base.",
                        "type": "string"
                    },
                    "viewType": {
                        "type": "string",
                        "default": "guide",
                        "description": "Sort order for articles of the knowledge base.",
                        "enum": [
                            "guide",
                            "help"
                        ],
                        "nullable": true
                    }
                },
                "required": [
                    "name",
                    "description",
                    "urlCode",
                    "viewType"
                ],
                "type": "object",
                "x-addon": "knowledge"
            },
            "KnowledgeCategoryPost": {
                "properties": {
                    "knowledgeBaseID": {
                        "description": "Knowledge base ID for a category.",
                        "nullable": true,
                        "type": "integer"
                    },
                    "name": {
                        "description": "Name for the category.",
                        "maxLength": 255,
                        "type": "string"
                    },
                    "parentID": {
                        "description": "Unique ID of the parent for a category.",
                        "nullable": true,
                        "type": "integer"
                    },
                    "sort": {
                        "description": "Sort weight of the category. Used when sorting the parent category's contents.",
                        "nullable": true,
                        "type": "integer"
                    },
                    "sortChildren": {
                        "description": "Sort order for contents of the category.",
                        "enum": [
                            "name",
                            "dateInserted",
                            "dateInsertedDesc",
                            "manual"
                        ],
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "parentID",
                    "knowledgeBaseID"
                ],
                "type": "object",
                "x-addon": "knowledge"
            },
            "Leaderboard": {
                "properties": {
                    "count": {
                        "description": "Associated total for this row.",
                        "type": "integer"
                    },
                    "id": {
                        "description": "ID of the record.",
                        "type": "integer"
                    },
                    "position": {
                        "description": "Current leaderboard position.",
                        "type": "integer"
                    },
                    "positionChange": {
                        "description": "Progression status of the record.",
                        "enum": [
                            "Fall",
                            "New",
                            "Rise",
                            "Same"
                        ],
                        "minLength": 1,
                        "type": "string"
                    },
                    "previous": {
                        "description": "Previous position of the record",
                        "nullable": true,
                        "type": "integer"
                    },
                    "title": {
                        "description": "Title for the row.",
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "url": {
                        "description": "Full URL to the record.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "position",
                    "positionChange",
                    "previous",
                    "url",
                    "title",
                    "count"
                ],
                "type": "object",
                "x-addon": "vanillaanalytics"
            },
            "MediaItemPatch": {
                "properties": {
                    "foreignID": {
                        "description": "Unique ID of the resource this media item will be attached to.",
                        "type": "integer"
                    },
                    "foreignType": {
                        "description": "Type of resource the media item will be attached to (e.g. comment).",
                        "enum": [
                            "embed",
                            "comment",
                            "discussion"
                        ],
                        "type": "string"
                    }
                },
                "required": [
                    "foreignType",
                    "foreignID"
                ],
                "type": "object",
                "x-addon": "dashboard"
            },
            "Message": {
                "properties": {
                    "body": {
                        "description": "The body of the message.",
                        "maxLength": 2000,
                        "minLength": 1,
                        "type": "string"
                    },
                    "conversationID": {
                        "description": "The ID of the conversation.",
                        "type": "integer"
                    },
                    "dateInserted": {
                        "description": "When the message was created.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "insertUser": {
                        "$ref": "#/components/schemas/UserFragment"
                    },
                    "insertUserID": {
                        "description": "The user that created the message.",
                        "type": "integer"
                    },
                    "messageID": {
                        "description": "The ID of the message.",
                        "type": "integer"
                    }
                },
                "required": [
                    "messageID",
                    "conversationID",
                    "body",
                    "insertUserID",
                    "dateInserted"
                ],
                "type": "object",
                "x-addon": "conversations"
            },
            "MessagePost": {
                "properties": {
                    "body": {
                        "description": "The body of the message.",
                        "maxLength": 2000,
                        "minLength": 1,
                        "type": "string"
                    },
                    "conversationID": {
                        "description": "The ID of the conversation.",
                        "type": "integer"
                    },
                    "format": {
                        "description": "The input format of the record.",
                        "type": "string"
                    }
                },
                "required": [
                    "conversationID",
                    "body"
                ],
                "type": "object",
                "x-addon": "conversations"
            },
            "NotificationSchema": {
                "properties": {
                    "body": {
                        "description": "The notification text. This contains some HTML, but only <b> tags.",
                        "type": "string"
                    },
                    "dateInserted": {
                        "description": "When the notification was first made.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "dateUpdated": {
                        "description": "When the notification was last updated.\n\nNotifications on the same record will group together into a single notification, updating just the dateUpdated property.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "notificationID": {
                        "description": "A unique ID to identify the notification.",
                        "type": "integer"
                    },
                    "photoUrl": {
                        "description": "An avatar or thumbnail associated with the notification.",
                        "nullable": true,
                        "type": "string"
                    },
                    "read": {
                        "description": "Whether or not the notification has been seen.",
                        "type": "boolean"
                    },
                    "url": {
                        "description": "The target of the notification.",
                        "type": "string"
                    }
                },
                "required": [
                    "notificationID",
                    "body",
                    "photoUrl",
                    "url",
                    "dateInserted",
                    "dateUpdated",
                    "read"
                ],
                "type": "object",
                "x-addon": "dashboard"
            },
            "PermissionFragment": {
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "permissions": {
                        "type": "object"
                    },
                    "type": {
                        "enum": [
                            "global",
                            "category"
                        ],
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "type",
                    "permissions"
                ],
                "type": "object",
                "x-addon": "dashboard"
            },
            "PollGetEdit": {
                "properties": {
                    "discussionID": {
                        "description": "The discussion the poll is displayed in.",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of the poll.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "pollID": {
                        "description": "The unique ID of the poll.",
                        "type": "integer"
                    }
                },
                "required": [
                    "pollID",
                    "name",
                    "discussionID"
                ],
                "type": "object",
                "x-addon": "polls"
            },
            "PollOptionPost": {
                "properties": {
                    "body": {
                        "description": "The name of the option.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "body"
                ],
                "type": "object",
                "x-addon": "polls"
            },
            "PollPost": {
                "properties": {
                    "discussionID": {
                        "description": "The discussion the poll is displayed in.",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of the poll.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "discussionID"
                ],
                "type": "object",
                "x-addon": "polls"
            },
            "PollVotePost": {
                "properties": {
                    "pollOptionID": {
                        "description": "The unique ID of the option.",
                        "type": "integer"
                    },
                    "userID": {
                        "description": "The user that made the vote"
                    }
                },
                "required": [
                    "pollOptionID"
                ],
                "type": "object",
                "x-addon": "polls"
            },
            "PostFragment": {
                "properties": {
                    "commentID": {
                        "description": "The comment ID of the post, if any.",
                        "type": "integer"
                    },
                    "dateInserted": {
                        "description": "The date of the post.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "discussionID": {
                        "description": "The discussion ID of the post.",
                        "type": "integer"
                    },
                    "insertUser": {
                        "$ref": "#/components/schemas/UserFragment"
                    },
                    "insertUserID": {
                        "description": "The author of the post.",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The title of the post.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "url": {
                        "description": "The URL of the post.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "url",
                    "dateInserted",
                    "insertUserID"
                ],
                "type": "object",
                "x-addon": "vanilla"
            },
            "Rank": {
                "description": "A single rank object.",
                "type": "object",
                "properties": {
                    "abilities": {
                        "properties": {
                            "avatar": {
                                "description": "Allow user to have a custom avatar.",
                                "type": "boolean"
                            },
                            "commentsAdd": {
                                "description": "Allow adding comments.",
                                "enum": [
                                    false
                                ],
                                "type": "boolean"
                            },
                            "conversationsAdd": {
                                "description": "Allow starting conversations.",
                                "type": "boolean"
                            },
                            "curation": {
                                "description": "Allow content curation.",
                                "type": "boolean"
                            },
                            "discussionsAdd": {
                                "description": "Allow starting discussions.",
                                "enum": [
                                    false
                                ],
                                "type": "boolean"
                            },
                            "editTimeout": {
                                "description": "Length of time, in seconds, a user can edit their post. -1 for no limit.",
                                "type": "integer"
                            },
                            "format": {
                                "description": "Formatting restrictions.",
                                "enum": [
                                    "Text",
                                    "TextEx"
                                ],
                                "type": "string"
                            },
                            "linksActivity": {
                                "description": "Allow links in activity feed.",
                                "enum": [
                                    false
                                ],
                                "type": "boolean"
                            },
                            "linksConversations": {
                                "description": "Allow links in conversations.",
                                "enum": [
                                    false
                                ],
                                "type": "boolean"
                            },
                            "linksPosts": {
                                "description": "Allow links in posts.",
                                "enum": [
                                    false
                                ],
                                "type": "boolean"
                            },
                            "location": {
                                "description": "Allow user to have a location.",
                                "type": "boolean"
                            },
                            "meActions": {
                                "description": "Allow usage of \"me actions\".",
                                "type": "boolean"
                            },
                            "polls": {
                                "description": "Allow creation of polls.",
                                "type": "boolean"
                            },
                            "roleID": {
                                "description": "Permissions of this role are applied to users with the rank.",
                                "type": "integer"
                            },
                            "signature": {
                                "description": "Allow user to have a signature.",
                                "type": "boolean"
                            },
                            "signatureImages": {
                                "description": "Maximum number of images in a signature. -1 for no limit.",
                                "type": "integer"
                            },
                            "signatureLength": {
                                "description": "Maximum length of a signature.",
                                "type": "integer"
                            },
                            "title": {
                                "description": "Allow user to have a title.",
                                "type": "boolean"
                            },
                            "verified": {
                                "description": "Verified status. true is verified. false requires verification.",
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    },
                    "criteria": {
                        "properties": {
                            "manual": {
                                "description": "Allow manually granting this rank.",
                                "type": "boolean"
                            },
                            "permission": {
                                "description": "Permission slug.",
                                "enum": [
                                    "site.manage",
                                    "community.moderate"
                                ],
                                "type": "string"
                            },
                            "points": {
                                "description": "User points.",
                                "type": "integer"
                            },
                            "posts": {
                                "description": "Total posts created by the user.",
                                "type": "integer"
                            },
                            "roleID": {
                                "description": "ID of a role required for this rank.",
                                "type": "integer"
                            },
                            "time": {
                                "description": "Age of user account (e.g. 1 day, 3 weeks, 1 month).",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "cssClass": {
                        "description": "Custom CSS class for users of this rank.",
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "level": {
                        "description": "Level of the rank. Determines the sort order.",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Name of the rank.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "notificationBody": {
                        "description": "Message for the users when they earn this rank.",
                        "minLength": 0,
                        "nullable": true,
                        "type": "string"
                    },
                    "rankID": {
                        "description": "Rank ID."
                    },
                    "userTitle": {
                        "description": "Label that will display beside the user.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "rankID",
                    "name",
                    "userTitle",
                    "level",
                    "notificationBody",
                    "cssClass"
                ],
                "x-addon": "ranks"
            },
            "RankPatch": {
                "properties": {
                    "abilities": {
                        "properties": {
                            "avatar": {
                                "description": "Allow user to have a custom avatar.",
                                "type": "boolean"
                            },
                            "commentsAdd": {
                                "description": "Allow adding comments.",
                                "enum": [
                                    false
                                ],
                                "type": "boolean"
                            },
                            "conversationsAdd": {
                                "description": "Allow starting conversations.",
                                "type": "boolean"
                            },
                            "curation": {
                                "description": "Allow content curation.",
                                "type": "boolean"
                            },
                            "discussionsAdd": {
                                "description": "Allow starting discussions.",
                                "enum": [
                                    false
                                ],
                                "type": "boolean"
                            },
                            "editTimeout": {
                                "description": "Length of time, in seconds, a user can edit their post. -1 for no limit.",
                                "type": "integer"
                            },
                            "format": {
                                "description": "Formatting restrictions.",
                                "enum": [
                                    "Text",
                                    "TextEx"
                                ],
                                "type": "string"
                            },
                            "linksActivity": {
                                "description": "Allow links in activity feed.",
                                "enum": [
                                    false
                                ],
                                "type": "boolean"
                            },
                            "linksConversations": {
                                "description": "Allow links in conversations.",
                                "enum": [
                                    false
                                ],
                                "type": "boolean"
                            },
                            "linksPosts": {
                                "description": "Allow links in posts.",
                                "enum": [
                                    false
                                ],
                                "type": "boolean"
                            },
                            "location": {
                                "description": "Allow user to have a location.",
                                "type": "boolean"
                            },
                            "meActions": {
                                "description": "Allow usage of \"me actions\".",
                                "type": "boolean"
                            },
                            "polls": {
                                "description": "Allow creation of polls.",
                                "type": "boolean"
                            },
                            "roleID": {
                                "description": "Permissions of this role are applied to users with the rank.",
                                "type": "integer"
                            },
                            "signature": {
                                "description": "Allow user to have a signature.",
                                "type": "boolean"
                            },
                            "signatureImages": {
                                "description": "Maximum number of images in a signature. -1 for no limit.",
                                "type": "integer"
                            },
                            "signatureLength": {
                                "description": "Maximum length of a signature.",
                                "type": "integer"
                            },
                            "title": {
                                "description": "Allow user to have a title.",
                                "type": "boolean"
                            },
                            "verified": {
                                "description": "Verified status. true is verified. false requires verification.",
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    },
                    "criteria": {
                        "properties": {
                            "manual": {
                                "description": "Allow manually granting this rank.",
                                "type": "boolean"
                            },
                            "permission": {
                                "description": "Permission slug.",
                                "enum": [
                                    "site.manage",
                                    "community.moderate"
                                ],
                                "type": "string"
                            },
                            "points": {
                                "description": "User points.",
                                "type": "integer"
                            },
                            "posts": {
                                "description": "Total posts created by the user.",
                                "type": "integer"
                            },
                            "roleID": {
                                "description": "ID of a role required for this rank.",
                                "type": "integer"
                            },
                            "time": {
                                "description": "Age of user account (e.g. 1 day, 3 weeks, 1 month).",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "cssClass": {
                        "description": "Custom CSS class for users of this rank.",
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "level": {
                        "description": "Level of the rank. Determines the sort order.",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Name of the rank.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "notificationBody": {
                        "description": "Message for the users when they earn this rank.",
                        "minLength": 0,
                        "nullable": true,
                        "type": "string"
                    },
                    "userTitle": {
                        "description": "Label that will display beside the user.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "type": "object",
                "x-addon": "ranks"
            },
            "RankPost": {
                "properties": {
                    "abilities": {
                        "properties": {
                            "avatar": {
                                "description": "Allow user to have a custom avatar.",
                                "type": "boolean"
                            },
                            "commentsAdd": {
                                "description": "Allow adding comments.",
                                "enum": [
                                    false
                                ],
                                "type": "boolean"
                            },
                            "conversationsAdd": {
                                "description": "Allow starting conversations.",
                                "type": "boolean"
                            },
                            "curation": {
                                "description": "Allow content curation.",
                                "type": "boolean"
                            },
                            "discussionsAdd": {
                                "description": "Allow starting discussions.",
                                "enum": [
                                    false
                                ],
                                "type": "boolean"
                            },
                            "editTimeout": {
                                "description": "Length of time, in seconds, a user can edit their post. -1 for no limit.",
                                "type": "integer"
                            },
                            "format": {
                                "description": "Formatting restrictions.",
                                "enum": [
                                    "Text",
                                    "TextEx"
                                ],
                                "type": "string"
                            },
                            "linksActivity": {
                                "description": "Allow links in activity feed.",
                                "enum": [
                                    false
                                ],
                                "type": "boolean"
                            },
                            "linksConversations": {
                                "description": "Allow links in conversations.",
                                "enum": [
                                    false
                                ],
                                "type": "boolean"
                            },
                            "linksPosts": {
                                "description": "Allow links in posts.",
                                "enum": [
                                    false
                                ],
                                "type": "boolean"
                            },
                            "location": {
                                "description": "Allow user to have a location.",
                                "type": "boolean"
                            },
                            "meActions": {
                                "description": "Allow usage of \"me actions\".",
                                "type": "boolean"
                            },
                            "polls": {
                                "description": "Allow creation of polls.",
                                "type": "boolean"
                            },
                            "roleID": {
                                "description": "Permissions of this role are applied to users with the rank.",
                                "type": "integer"
                            },
                            "signature": {
                                "description": "Allow user to have a signature.",
                                "type": "boolean"
                            },
                            "signatureImages": {
                                "description": "Maximum number of images in a signature. -1 for no limit.",
                                "type": "integer"
                            },
                            "signatureLength": {
                                "description": "Maximum length of a signature.",
                                "type": "integer"
                            },
                            "title": {
                                "description": "Allow user to have a title.",
                                "type": "boolean"
                            },
                            "verified": {
                                "description": "Verified status. true is verified. false requires verification.",
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    },
                    "criteria": {
                        "properties": {
                            "manual": {
                                "description": "Allow manually granting this rank.",
                                "type": "boolean"
                            },
                            "permission": {
                                "description": "Permission slug.",
                                "enum": [
                                    "site.manage",
                                    "community.moderate"
                                ],
                                "type": "string"
                            },
                            "points": {
                                "description": "User points.",
                                "type": "integer"
                            },
                            "posts": {
                                "description": "Total posts created by the user.",
                                "type": "integer"
                            },
                            "roleID": {
                                "description": "ID of a role required for this rank.",
                                "type": "integer"
                            },
                            "time": {
                                "description": "Age of user account (e.g. 1 day, 3 weeks, 1 month).",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    },
                    "cssClass": {
                        "description": "Custom CSS class for users of this rank.",
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "level": {
                        "description": "Level of the rank. Determines the sort order.",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Name of the rank.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "notificationBody": {
                        "description": "Message for the users when they earn this rank.",
                        "minLength": 0,
                        "nullable": true,
                        "type": "string"
                    },
                    "userTitle": {
                        "description": "Label that will display beside the user.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "userTitle",
                    "level"
                ],
                "type": "object",
                "x-addon": "ranks"
            },
            "ReRender": {
                "properties": {
                    "processed": {
                        "description": "The number of articles re-render.",
                        "type": "integer"
                    },
                    "errorCount": {
                        "description": "The number of articles not re-rendered due to some error.",
                        "type": "integer"
                    },
                    "first article RevisionID": {
                        "description": "The id of the first article revision re-render.",
                        "type": "integer"
                    },
                    "last article RevisionID": {
                        "description": "The id of the last article revision re-render.",
                        "type": "integer"
                    },
                    "errors": {
                        "description": "The article id that were not processed and along with the error thrown.",
                        "type": "object",
                        "properties": {
                            "articleRevisionID": {
                                "type": "integer"
                            },
                            "errorMessage": {
                                "type": "string"
                            }
                        }
                    }
                },
                "required": [
                    "processed",
                    "errorCount",
                    "firstArticleRevisionID",
                    "lastArticleRevisionID",
                    "errors"
                ],
                "x-addon": "knowledge"
            },
            "Reaction": {
                "type": "object",
                "properties": {
                    "reactionType": {
                        "type": "string",
                        "example": "helpful"
                    },
                    "yes": {
                        "type": "integer",
                        "example": 1
                    },
                    "no": {
                        "type": "integer",
                        "example": 0
                    },
                    "total": {
                        "type": "integer",
                        "example": 1
                    },
                    "userReaction": {
                        "type": "string",
                        "enum": [
                            "yes",
                            "no",
                            null
                        ],
                        "example": "yes"
                    }
                },
                "x-addon": "knowledge"
            },
            "ReactionType": {
                "properties": {
                    "active": {
                        "description": "Is this type available for use?",
                        "type": "boolean"
                    },
                    "attributes": {
                        "description": "Metadata.",
                        "nullable": true,
                        "type": "object"
                    },
                    "class": {
                        "description": "The classification of the type. Directly maps to permissions.",
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "custom": {
                        "description": "Is this a non-standard type?",
                        "type": "boolean"
                    },
                    "description": {
                        "description": "A user-friendly description.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "hidden": {
                        "description": "Should this type be hidden from the UI?",
                        "type": "boolean"
                    },
                    "name": {
                        "description": "A user-friendly name.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "points": {
                        "description": "Reputation points to be applied along with this reaction.",
                        "type": "integer"
                    },
                    "sort": {
                        "description": "Display order when listing types.",
                        "nullable": true,
                        "type": "integer"
                    },
                    "tagID": {
                        "description": "The numeric ID of the tag associated with the type.",
                        "type": "integer"
                    },
                    "urlCode": {
                        "description": "A URL-safe identifier.",
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "urlCode",
                    "name",
                    "description",
                    "points",
                    "class",
                    "tagID",
                    "attributes",
                    "sort",
                    "active",
                    "custom",
                    "hidden"
                ],
                "type": "object",
                "x-addon": "reactions"
            },
            "Role": {
                "properties": {
                    "canSession": {
                        "description": "Can users in this role start a session?",
                        "type": "boolean"
                    },
                    "deletable": {
                        "description": "Is the role deletable?",
                        "type": "boolean"
                    },
                    "description": {
                        "description": "Description of the role.",
                        "minLength": 0,
                        "nullable": true,
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the role.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "permissions": {
                        "items": {
                            "$ref": "#/components/schemas/PermissionFragment"
                        },
                        "type": "array"
                    },
                    "personalInfo": {
                        "description": "Is membership in this role personal information?",
                        "type": "boolean"
                    },
                    "roleID": {
                        "description": "ID of the role.",
                        "type": "integer"
                    },
                    "type": {
                        "description": "Default type of this role.",
                        "minLength": 0,
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "roleID",
                    "name",
                    "description",
                    "type",
                    "deletable",
                    "canSession",
                    "personalInfo"
                ],
                "type": "object",
                "x-addon": "dashboard"
            },
            "RoleFragment": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Name of the role.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "roleID": {
                        "description": "ID of the role.",
                        "type": "integer"
                    }
                },
                "required": [
                    "roleID",
                    "name"
                ],
                "x-addon": "dashboard"
            },
            "RolePost": {
                "properties": {
                    "canSession": {
                        "description": "Can users in this role start a session?",
                        "type": "boolean"
                    },
                    "deletable": {
                        "description": "Is the role deletable?",
                        "type": "boolean"
                    },
                    "description": {
                        "description": "Description of the role.",
                        "minLength": 0,
                        "nullable": true,
                        "type": "string"
                    },
                    "name": {
                        "description": "Name of the role.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "permissions": {
                        "items": {
                            "$ref": "#/components/schemas/PermissionFragment"
                        },
                        "type": "array"
                    },
                    "personalInfo": {
                        "description": "Is membership in this role personal information?",
                        "type": "boolean"
                    },
                    "type": {
                        "description": "Default type of this role.",
                        "minLength": 0,
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "name"
                ],
                "type": "object",
                "x-addon": "dashboard"
            },
            "SearchResult": {
                "properties": {
                    "body": {
                        "description": "The content of the record.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "categoryID": {
                        "description": "The category containing the record.",
                        "type": "integer"
                    },
                    "commentID": {
                        "description": "The id of the comment.",
                        "type": "integer"
                    },
                    "dateInserted": {
                        "description": "When the record was created.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "dateUpdated": {
                        "description": "When the user was updated.",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "discussionID": {
                        "description": "The id of the discussion.",
                        "type": "integer"
                    },
                    "groupID": {
                        "description": "The id of the group or the id of the group containing the record.",
                        "nullable": true,
                        "type": "integer"
                    },
                    "insertUserID": {
                        "description": "The user that created the record.",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The title of the record. A comment would be \"RE: {DiscussionTitle}\".",
                        "minLength": 1,
                        "type": "string"
                    },
                    "recordID": {
                        "description": "The identifier of the record.",
                        "type": "integer"
                    },
                    "recordType": {
                        "description": "The main type of record.",
                        "enum": [
                            "discussion",
                            "comment",
                            "group"
                        ],
                        "minLength": 1,
                        "type": "string"
                    },
                    "score": {
                        "description": "Score of the record.",
                        "type": "integer"
                    },
                    "type": {
                        "description": "Sub-type of the discussion.",
                        "enum": [
                            "discussion",
                            "comment",
                            "question",
                            "group"
                        ],
                        "minLength": 1,
                        "type": "string"
                    },
                    "updateUserID": {
                        "description": "The user that updated the record.",
                        "nullable": true,
                        "type": "integer"
                    }
                },
                "required": [
                    "recordID",
                    "recordType",
                    "type",
                    "name",
                    "body",
                    "score",
                    "insertUserID",
                    "dateInserted",
                    "updateUserID",
                    "dateUpdated"
                ],
                "type": "object",
                "x-addon": "dashboard"
            },
            "Status": {
                "properties": {
                    "statusID": {
                        "description": "Unique numeric ID of a status.",
                        "type": "integer",
                        "readOnly": true
                    },
                    "name": {
                        "description": "Label for the status.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "isDefault": {
                        "description": "Is this the default status?",
                        "type": "boolean"
                    },
                    "state": {
                        "description": "The open/closed state of an idea.",
                        "enum": [
                            "Open",
                            "Closed"
                        ],
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "required": [
                    "statusID",
                    "name",
                    "state",
                    "isDefault"
                ],
                "type": "object",
                "x-addon": "ideation"
            },
            "StatusPatch": {
                "type": "object",
                "properties": {
                    "name": {
                        "description": "Label for the status.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "isDefault": {
                        "description": "Is this the default status?",
                        "type": "boolean"
                    },
                    "state": {
                        "description": "The open/closed state of an idea.",
                        "enum": [
                            "Open",
                            "Closed"
                        ],
                        "minLength": 1,
                        "type": "string"
                    }
                },
                "x-addon": "ideation"
            },
            "Theme": {
                "properties": {
                    "assets": {
                        "$ref": "#/components/schemas/ThemeAssets"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "themeFile"
                        ]
                    },
                    "themeID": {
                        "type": "integer"
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "required": [
                    "assets",
                    "type",
                    "themeID",
                    "version"
                ],
                "type": "object",
                "x-addon": "dashboard"
            },
            "ThemeAssetNotFound": {
                "properties": {
                    "description": {
                        "description": "Verbose description of the error.",
                        "nullable": true,
                        "type": "string"
                    },
                    "message": {
                        "description": "Short description of the error.",
                        "type": "string"
                    },
                    "status": {
                        "description": "Status code of the error response.",
                        "type": "integer"
                    }
                },
                "required": [
                    "description",
                    "message",
                    "status"
                ],
                "type": "object",
                "x-addon": "dashboard"
            },
            "ThemeAssets": {
                "description": "Assets to include in a page as part of the theme.",
                "properties": {
                    "header": {
                        "$ref": "#/components/schemas/ThemeHeaderAsset"
                    },
                    "footer": {
                        "$ref": "#/components/schemas/ThemeFooterAsset"
                    },
                    "fonts": {
                        "$ref": "#/components/schemas/ThemeFontsAsset"
                    },
                    "javascript": {
                        "description": "An absolute URL to the theme's JavaScript file.",
                        "type": "string"
                    },
                    "scripts": {
                        "$ref": "#/components/schemas/ThemeScriptsAsset"
                    },
                    "styles": {
                        "description": "An absolute URL to the theme's stylesheet.",
                        "type": "string"
                    },
                    "variables": {
                        "$ref": "#/components/schemas/ThemeVariablesAsset"
                    },
                    "logo": {
                        "$ref": "#/components/schemas/ThemeLogoAsset"
                    },
                    "mobileLogo": {
                        "$ref": "#/components/schemas/ThemeMobileLogoAsset"
                    }
                },
                "type": "object",
                "x-addon": "dashboard"
            },
            "ThemeFont": {
                "description": "An external font resource.",
                "properties": {
                    "fallbacks": {
                        "type": "string",
                        "nullable": true
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "enum": [
                            "url"
                        ],
                        "type": "string"
                    },
                    "url": {
                        "type": "string"
                    }
                },
                "required": [
                    "fallbacks",
                    "name",
                    "type",
                    "url"
                ],
                "type": "object",
                "x-addon": "dashboard"
            },
            "ThemeFontsAsset": {
                "description": "A collection of external font resources.",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ThemeFont",
                            "type": "object"
                        }
                    }
                },
                "required": [
                    "data"
                ],
                "type": "object",
                "x-addon": "dashboard"
            },
            "ThemeFooterAsset": {
                "description": "Custom footer HTML.",
                "properties": {
                    "data": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "html"
                        ]
                    }
                },
                "required": [
                    "data",
                    "type"
                ],
                "type": "object",
                "x-addon": "dashboard"
            },
            "ThemeHeaderAsset": {
                "description": "Custom header HTML.",
                "properties": {
                    "data": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "html"
                        ]
                    }
                },
                "required": [
                    "data",
                    "type"
                ],
                "type": "object",
                "x-addon": "dashboard"
            },
            "ThemeLogoAsset": {
                "description": "Site logo to be displayed in the theme.",
                "properties": {
                    "url": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "image"
                        ]
                    }
                },
                "required": [
                    "url",
                    "type"
                ],
                "type": "object",
                "x-addon": "dashboard"
            },
            "ThemeMobileLogoAsset": {
                "description": "Site logo to be displayed in the theme when viewed on a mobile device.",
                "properties": {
                    "url": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "image"
                        ]
                    }
                },
                "required": [
                    "url",
                    "type"
                ],
                "type": "object",
                "x-addon": "dashboard"
            },
            "ThemeScript": {
                "properties": {
                    "url": {
                        "type": "string"
                    }
                },
                "required": [
                    "url"
                ],
                "type": "object",
                "x-addon": "dashboard"
            },
            "ThemeScriptsAsset": {
                "description": "External script files to be included.",
                "properties": {
                    "data": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ThemeScript"
                        }
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "data"
                        ]
                    }
                },
                "required": [
                    "data",
                    "type"
                ],
                "type": "object",
                "x-addon": "dashboard"
            },
            "ThemeVariablesAsset": {
                "description": "A collection of variables intended to be used by theme.",
                "properties": {
                    "data": {
                        "type": "object"
                    },
                    "type": {
                        "type": "string",
                        "enum": [
                            "json"
                        ]
                    }
                },
                "required": [
                    "data",
                    "type"
                ],
                "type": "object",
                "x-addon": "dashboard"
            },
            "Token": {
                "properties": {
                    "accessToken": {
                        "description": "A signed version of the token.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "accessTokenID": {
                        "description": "The unique numeric ID.",
                        "type": "integer"
                    },
                    "dateInserted": {
                        "description": "When the token was generated.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "name": {
                        "description": "A user-specified label.",
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "accessTokenID",
                    "name",
                    "accessToken",
                    "dateInserted"
                ],
                "type": "object",
                "x-addon": "dashboard"
            },
            "UploadedFile": {
                "type": "string",
                "format": "binary",
                "x-addon": "dashboard"
            },
            "User": {
                "properties": {
                    "userID": {
                        "description": "ID of the user.",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Name of the user.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "photoUrl": {
                        "description": "URL to the user photo.",
                        "minLength": 0,
                        "nullable": true,
                        "type": "string"
                    },
                    "email": {
                        "description": "Email address of the user.",
                        "minLength": 0,
                        "type": "string"
                    },
                    "roles": {
                        "items": {
                            "$ref": "#/components/schemas/RoleFragment"
                        },
                        "type": "array"
                    },
                    "dateInserted": {
                        "description": "When the user was created.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "dateLastActive": {
                        "description": "Time the user was last active.",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "dateUpdated": {
                        "description": "When the user was last updated.",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "points": {
                        "description": "The total number of points the user has accumulated.",
                        "type": "integer",
                        "default": 0
                    },
                    "emailConfirmed": {
                        "description": "Has the email address for the user been confirmed?",
                        "type": "boolean"
                    },
                    "hidden": {
                        "description": "Is this user hiding their online status?",
                        "type": "boolean"
                    },
                    "bypassSpam": {
                        "description": "Should submissions from this user bypass SPAM checks?",
                        "type": "boolean"
                    },
                    "banned": {
                        "description": "Is the user banned?",
                        "type": "integer"
                    },
                    "rank": {
                        "x-addon": "ranks",
                        "properties": {
                            "name": {
                                "description": "Name of the rank.",
                                "minLength": 1,
                                "type": "string"
                            },
                            "rankID": {
                                "description": "Rank ID.",
                                "type": "integer"
                            },
                            "userTitle": {
                                "description": "Label that will display beside the user.",
                                "minLength": 1,
                                "type": "string"
                            }
                        },
                        "required": [
                            "rankID",
                            "name",
                            "userTitle"
                        ],
                        "type": "object"
                    },
                    "rankID": {
                        "x-addon": "ranks",
                        "description": "ID of the user rank.",
                        "nullable": true,
                        "type": "integer"
                    },
                    "showEmail": {
                        "description": "Is the email address visible to other users?",
                        "type": "boolean"
                    }
                },
                "required": [
                    "userID",
                    "name",
                    "email",
                    "photoUrl",
                    "points",
                    "emailConfirmed",
                    "showEmail",
                    "bypassSpam",
                    "banned",
                    "dateInserted",
                    "dateLastActive",
                    "dateUpdated"
                ],
                "type": "object",
                "x-addon": "dashboard"
            },
            "UserBadge": {
                "properties": {
                    "badge": {
                        "$ref": "#/components/schemas/Badge"
                    },
                    "badgeID": {
                        "description": "The ID of the badge.",
                        "type": "integer"
                    },
                    "dateEarned": {
                        "description": "When the badge was earned.",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "dateInserted": {
                        "description": "When the user badge relation was created.",
                        "format": "date-time",
                        "type": "string"
                    },
                    "insertUser": {
                        "$ref": "#/components/schemas/UserFragment"
                    },
                    "insertUserID": {
                        "description": "The user that created the user badge relation.",
                        "type": "integer"
                    },
                    "reasonBody": {
                        "description": "Reason why the badge was given to the user.",
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "user": {
                        "$ref": "#/components/schemas/UserFragment"
                    },
                    "userID": {
                        "description": "The ID of the user.",
                        "type": "integer"
                    }
                },
                "required": [
                    "userID",
                    "badgeID",
                    "reasonBody",
                    "dateEarned",
                    "insertUserID",
                    "dateInserted"
                ],
                "type": "object",
                "x-addon": "badges"
            },
            "UserBadgePost": {
                "properties": {
                    "reasonBody": {
                        "description": "Reason why the badge was given to the user.",
                        "minLength": 1,
                        "nullable": true,
                        "type": "string"
                    },
                    "userID": {
                        "description": "The ID of the user.",
                        "type": "integer"
                    }
                },
                "required": [
                    "userID"
                ],
                "type": "object",
                "x-addon": "badges"
            },
            "UserFragment": {
                "type": "object",
                "properties": {
                    "dateLastActive": {
                        "description": "Time the user was last active.",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "isAdmin": {
                        "type": "boolean"
                    },
                    "name": {
                        "description": "The username of the user.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "permissions": {
                        "description": "Global permissions available to the current user.",
                        "items": {
                            "type": "string"
                        },
                        "type": "array"
                    },
                    "photoUrl": {
                        "description": "The URL of the user's avatar picture.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "userID": {
                        "description": "The ID of the user.",
                        "type": "integer"
                    }
                },
                "required": [
                    "userID",
                    "name",
                    "photoUrl",
                    "dateLastActive",
                    "isAdmin",
                    "permissions"
                ],
                "x-addon": "dashboard"
            },
            "UserPatch": {
                "type": "object",
                "properties": {
                    "bypassSpam": {
                        "description": "Should submissions from this user bypass SPAM checks?",
                        "type": "boolean"
                    },
                    "email": {
                        "description": "Email address of the user.",
                        "minLength": 0,
                        "type": "string"
                    },
                    "emailConfirmed": {
                        "description": "Has the email address for this user been confirmed?",
                        "type": "boolean"
                    },
                    "name": {
                        "description": "Name of the user.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "photo": {
                        "description": "Raw photo field value from the user record.",
                        "minLength": 0,
                        "nullable": true,
                        "type": "string"
                    },
                    "roleID": {
                        "description": "Roles to set on the user.",
                        "items": {
                            "type": "integer"
                        },
                        "type": "array"
                    }
                },
                "x-addon": "dashboard"
            },
            "UserPost": {
                "type": "object",
                "properties": {
                    "bypassSpam": {
                        "default": false,
                        "description": "Should submissions from this user bypass SPAM checks?",
                        "type": "boolean"
                    },
                    "email": {
                        "description": "Email address of the user.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "emailConfirmed": {
                        "default": true,
                        "description": "Has the email address for this user been confirmed?",
                        "type": "boolean"
                    },
                    "name": {
                        "description": "Name of the user.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "password": {
                        "description": "Password of the user.",
                        "minLength": 1,
                        "type": "string"
                    },
                    "photo": {
                        "description": "Raw photo field value from the user record.",
                        "minLength": 0,
                        "nullable": true,
                        "type": "string"
                    },
                    "roleID": {
                        "description": "Roles to set on the user.",
                        "items": {
                            "type": "integer"
                        },
                        "type": "array"
                    }
                },
                "required": [
                    "name",
                    "email",
                    "password",
                    "emailConfirmed",
                    "bypassSpam"
                ],
                "x-addon": "dashboard"
            },
            "navigationTreeSchema": {
                "properties": {
                    "children": {
                        "items": {
                            "$ref": "#/components/schemas/navigationTreeSchema"
                        },
                        "type": "array"
                    },
                    "knowledgeCategoryID": {
                        "type": "integer"
                    },
                    "name": {
                        "description": "Name of the item.",
                        "nullable": true,
                        "type": "string"
                    },
                    "parentID": {
                        "description": "Unique ID of the category this record belongs to.",
                        "type": "integer"
                    },
                    "recordID": {
                        "description": "Unique ID of the record represented by the navigation item.",
                        "type": "integer"
                    },
                    "recordType": {
                        "description": "Type of record represented by the navigation item.",
                        "enum": [
                            "knowledgeCategory",
                            "article"
                        ],
                        "type": "string"
                    },
                    "sort": {
                        "description": "Sort weight.",
                        "nullable": true,
                        "type": "integer"
                    },
                    "url": {
                        "description": "Full URL to the record.",
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "recordID",
                    "sort",
                    "recordType"
                ],
                "type": "object",
                "x-addon": "knowledge"
            },
            "searchResultSchema": {
                "properties": {
                    "body": {
                        "type": "string"
                    },
                    "dateInserted": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "dateUpdated": {
                        "format": "date-time",
                        "type": "string"
                    },
                    "insertUserID": {
                        "type": "integer"
                    },
                    "breadcrumbs": {
                        "description": "List of breadcrumbs objects. Only returned if: expand[] = breadcrumbs.",
                        "items": {
                            "properties": {
                                "name": {
                                    "description": "Breadcrumb element name.",
                                    "minLength": 1,
                                    "type": "string",
                                    "example": "User Guide"
                                },
                                "url": {
                                    "description": "Breadcrumb element url.",
                                    "minLength": 1,
                                    "type": "string",
                                    "example": "https://knowledge.com/kb/user-guide/"
                                }
                            },
                            "type": "object"
                        },
                        "type": "array"
                    },
                    "knowledgeCategoryID": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string",
                        "example": "Some article title Lorem Ipsum..."
                    },
                    "recordID": {
                        "type": "integer"
                    },
                    "recordType": {
                        "enum": [
                            "article",
                            "knowledgeCategory",
                            "discussion",
                            "comment"
                        ],
                        "type": "string",
                        "example": "article"
                    },
                    "status": {
                        "type": "string",
                        "enum": [
                            "published",
                            "deleted"
                        ]
                    },
                    "updateUser": {
                        "$ref": "#/components/schemas/UserFragment"
                    },
                    "insertUser": {
                        "$ref": "#/components/schemas/UserFragment"
                    },
                    "updateUserID": {
                        "type": "integer"
                    },
                    "url": {
                        "type": "string"
                    }
                },
                "required": [
                    "name",
                    "url",
                    "insertUserID",
                    "updateUserID",
                    "recordID",
                    "dateInserted",
                    "dateUpdated",
                    "status",
                    "recordType"
                ],
                "type": "object",
                "x-addon": "knowledge"
            }
        },
        "parameters": {
            "CacheBusterParameter": {
                "name": "etag",
                "in": "query",
                "description": "Whether or not output is cached.\n",
                "schema": {
                    "type": "string"
                },
                "x-addon": "dashboard"
            },
            "DateInserted": {
                "name": "dateInserted",
                "in": "query",
                "description": "Filter by insert date. See [date filters](https://docs.vanillaforums.com/help/apiv2/date-filters/).\n",
                "schema": {
                    "format": "date-filter",
                    "type": "string"
                },
                "x-addon": "dashboard"
            },
            "DateUpdated": {
                "name": "dateUpdated",
                "in": "query",
                "description": "Filter by update date. See [date filters](https://docs.vanillaforums.com/help/apiv2/date-filters/).\n",
                "schema": {
                    "format": "date-filter",
                    "type": "string"
                },
                "x-addon": "dashboard"
            },
            "LocaleCodeParameter": {
                "name": "locale",
                "in": "path",
                "description": "The locale code requested.",
                "required": true,
                "schema": {
                    "type": "string",
                    "pattern": "[a-zA-Z0-9-]+"
                },
                "x-addon": "dashboard"
            },
            "Page": {
                "name": "page",
                "in": "query",
                "description": "Page number. See [Pagination](https://docs.vanillaforums.com/apiv2/#pagination).\n",
                "schema": {
                    "type": "integer",
                    "default": 1,
                    "minimum": 1
                },
                "x-addon": "dashboard"
            }
        },
        "requestBodies": {
            "Aliases": {
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "aliases": {
                                    "description": "Array of url aliases for article.",
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    }
                                }
                            },
                            "example": {
                                "aliases": [
                                    "category/discussion-migrated-from/forum/",
                                    "another-url/for-the-same/article"
                                ]
                            }
                        }
                    }
                },
                "required": true,
                "x-addon": "knowledge"
            },
            "ArticlePost": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ArticlePost"
                        }
                    }
                },
                "required": true,
                "x-addon": "knowledge"
            },
            "AssetData": {
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "data": {
                                    "description": "Asset content data.",
                                    "type": "string"
                                }
                            },
                            "example": {
                                "data": "some content"
                            },
                            "required": [
                                "data"
                            ]
                        }
                    }
                },
                "required": true,
                "x-addon": "themingapi"
            },
            "BadgePost": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/BadgePost"
                        }
                    }
                },
                "required": true,
                "x-addon": "badges"
            },
            "Body": {
                "content": {
                    "application/json": {
                        "schema": {
                            "properties": {
                                "attributes": {
                                    "description": "A free-form object containing all custom data for this draft.",
                                    "type": "object"
                                },
                                "body": {
                                    "description": "Content of article",
                                    "type": "string"
                                },
                                "format": {
                                    "type": "string",
                                    "default": "rich",
                                    "description": "Body content format: rich, text, html.",
                                    "enum": [
                                        "rich",
                                        "html",
                                        "text",
                                        "markdown"
                                    ]
                                },
                                "parentRecordID": {
                                    "description": "The unique ID of the intended parent to this record.",
                                    "nullable": true,
                                    "type": "integer"
                                },
                                "recordID": {
                                    "description": "Unique ID of an existing record to associate with this draft.",
                                    "nullable": true,
                                    "type": "integer"
                                }
                            },
                            "required": [
                                "attributes",
                                "body",
                                "format"
                            ],
                            "type": "object"
                        }
                    }
                },
                "required": true,
                "x-addon": "knowledge"
            },
            "CategoryPost": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/CategoryPost"
                        }
                    }
                },
                "required": true,
                "x-addon": "vanilla"
            },
            "CommentPost": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/CommentPost"
                        }
                    }
                },
                "required": true,
                "x-addon": "vanilla"
            },
            "ConversationPost": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/ConversationPost"
                        }
                    }
                },
                "required": true,
                "x-addon": "conversations"
            },
            "KnowledgeBasePost": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/KnowledgeBasePost"
                        }
                    }
                },
                "required": true,
                "x-addon": "knowledge"
            },
            "KnowledgeCategoryPost": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/KnowledgeCategoryPost"
                        }
                    }
                },
                "required": true,
                "x-addon": "knowledge"
            },
            "NotificationSchema": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/NotificationSchema"
                        }
                    }
                },
                "required": true,
                "x-addon": "dashboard"
            },
            "PermissionFragmentArray": {
                "content": {
                    "application/json": {
                        "schema": {
                            "items": {
                                "$ref": "#/components/schemas/PermissionFragment"
                            },
                            "type": "array"
                        }
                    }
                },
                "required": true,
                "x-addon": "dashboard"
            },
            "React": {
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "helpful": {
                                    "description": "User reaction on 'Was it helpful?'.",
                                    "type": "string",
                                    "enum": [
                                        "yes",
                                        "no"
                                    ]
                                }
                            }
                        }
                    }
                },
                "required": true,
                "x-addon": "knowledge"
            },
            "RolePost": {
                "content": {
                    "application/json": {
                        "schema": {
                            "$ref": "#/components/schemas/RolePost"
                        }
                    }
                },
                "required": true,
                "x-addon": "dashboard"
            },
            "Theme": {
                "content": {
                    "application/json": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "description": "Theme name.",
                                    "type": "string"
                                }
                            },
                            "example": {
                                "name": "custom client theme"
                            },
                            "required": [
                                "name"
                            ]
                        }
                    }
                },
                "required": true,
                "x-addon": "themingapi"
            }
        }
    }
}